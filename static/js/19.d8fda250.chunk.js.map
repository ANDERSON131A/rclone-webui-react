{"version":3,"sources":["utils/Tools.js","utils/API/API.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Base/LinkShareModal/LinkShareModal.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","utils/Constants.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["bytesToKB","bytes","bytesToGB","formatBytes","decimals","arguments","length","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","config","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","IsDir","MimeType","searchQuery","toLowerCase","Name","startsWith","remoteName","axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","_async","console","post","abrupt","sent","stop","interceptors","request","use","Authorization","btoa","error","Promise","reject","getSuggestions","value","inputValue","trim","inputLength","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFiles","remotePath","dispatch","fs","remote","path","concat","then","res","type","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","REQUEST_ERROR","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","setRemoteName","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","fileComponentSource","beginDrag","_props$item","Path","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","getDropResult","toast","info","t0","response","JSON","stringify","autoClose","_x","_x2","_x3","apply","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","linkShareHandle","Fragment","UncontrolledButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","header","onClick","divider","FileComponent","clickHandler","connectDragSource","gridMode","itemIdx","ModTime","Size","modTime","Date","parse","Card","CardBody","e","CardFooter","toLocaleDateString","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","LinkShareModal","copyToClipboard","textField","document","innerText","linkUrl","body","appendChild","select","execCommand","remove","handleFocus","target","copySuccess","toggle","bind","assertThisInitialized","closeModal","isVisible","isCopyAllowed","queryCommandSupported","Modal","isOpen","ModalHeader","data-test","ModalBody","Input","readOnly","onFocus","ModalFooter","filesTarget","drop","didDrop","_monitor$getItem","canDrop","_monitor$getItem2","UpButtonComponent","upButtonHandle","colSpan","FilesView","closeLinkShareModal","showLinkShareModal","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","fsInfo","Features","PublicLink","generatedLink","getFileComponents","isDir","files","_this$props$currentPa2","map","ID","FilesView_FileComponent","handleFileClick","canCopy","Copy","canMove","Move","isLoading","downloadingItems","shouldUpdate","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa3","downloadUrl","BucketBased","prevState","method","URL","createObjectURL","Blob","link","href","setAttribute","click","_context2","_this$props2","connectDropTarget","isOver","Spinner","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","Base_LinkShareModal_LinkShareModal","PureComponent","compose","visibilityFilter","visibilityFilters","searchQueries","configs","tempRemoteName","pathKey","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","createNewFolder","handleSubmit","preventDefault","FormGroup","row","Label","for","required","autoFocus","disabled","visibilityFilteringOptions","FileOperations","openNewFolderModal","CanHaveEmptyDirectories","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","About","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","err","filterOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","caret","stopPropagation","Base_NewFolder_NewFolder","react_chartjs_2_es","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","slicedToArray","push","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","RemoteExplorer","remoteNameTemp","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"2FAkBO,SAASA,EAAUC,GACtB,OAAc,IAAVA,EAAoB,EACbA,EAAQ,KAKhB,SAASC,EAAUD,GACtB,OAAc,IAAVA,EAAoB,EACbA,EAAQ,KAAO,KAAO,KAW9B,SAASE,EAAYF,GAAqB,IAAdG,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAC1C,GAAIJ,EAAQ,EAAG,MAAO,MAEtB,IACMO,EAAKJ,EAAW,EAAI,EAAIA,EAGxBK,EAAIC,KAAKC,MAAMD,KAAKE,IAAIX,GAASS,KAAKE,IAJlC,OAMV,OAAOC,YAAYZ,EAAQS,KAAKI,IANtB,KAM6BL,IAAIM,QAAQP,IAAO,IAJ5C,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIQC,GAenE,SAASO,EAAaC,GAIzB,SAASC,EAAaC,GAClB,OAAQA,EAAS,EAAK,IAAM,GAGhC,IAAIC,EAAQV,KAAKC,MAAMM,EAAU,SACjC,GAAIG,EACA,OAAOA,EAAQ,QAAUF,EAAaE,GAG1C,IAAIC,EAAOX,KAAKC,OAAOM,GAAW,SAAY,OAC9C,GAAII,EACA,OAAOA,EAAO,OAASH,EAAaG,GAExC,IAAIC,EAAQZ,KAAKC,OAAOM,GAAW,OAAS,MAC5C,GAAIK,EACA,OAAOA,EAAQ,QAAUJ,EAAaI,GAE1C,IAAIC,EAAUb,KAAKC,OAAOM,GAAW,MAAQ,IAC7C,OAAIM,EACOA,EAAU,UAAYL,EAAaK,IAE9CN,GAAoB,IAETA,EAAQF,QAAQ,GAAK,UAAYG,EAAaD,GAElD,WAGJ,SAASO,EAAcC,EAAOC,GAEjC,OAAOD,EAAME,KAAKD,GAIf,SAASE,EAAmBF,GAG/B,OAAOF,EAFO,+CAEcE,GAGzB,SAASG,EAAYH,GAExB,OAAOF,EADO,aACcE,GAGzB,SAASI,EAAiBJ,GAE7B,OAAOF,EADO,0CACcE,GASzB,SAASK,EAAeC,EAAQC,GAInC,OAHsBD,EAAOE,KAAK,SAACC,EAAKC,EAAKC,GACzC,OAAQJ,IAASE,EAAIG,SAKtB,SAASC,EAAeN,GAO3B,OAN2B,IAAvBA,EAAKO,QAAQ,MACiB,MAA1BP,EAAKA,EAAK3B,OAAS,KACnB2B,GAAc,KAIfA,EAxIXQ,EAAAC,EAAAC,EAAA,sBAAA3C,IAAAyC,EAAAC,EAAAC,EAAA,sBAAAzC,IAAAuC,EAAAC,EAAAC,EAAA,sBAAAxC,IAAAsC,EAAAC,EAAAC,EAAA,sBAAA3B,IAAAyB,EAAAC,EAAAC,EAAA,sBAAAf,IAAAa,EAAAC,EAAAC,EAAA,sBAAAd,IAAAY,EAAAC,EAAAC,EAAA,sBAAAb,IAAAW,EAAAC,EAAAC,EAAA,sBAAAZ,IAAAU,EAAAC,EAAAC,EAAA,sBAAAJ,IAAAE,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IASeC,IATR,SAAiBC,GACpB,GAAIC,MAAMC,QAAQF,GAAM,OAAsB,IAAfA,EAAI1C,OACnC,IAAK,IAAI6C,KAAOH,EACZ,GAAIA,EAAII,eAAeD,GACnB,OAAO,EAEf,OAAO,GAqIX,IAAME,EAAwB,CAC1BC,OAAQ,aACRC,IAAK,mBAIF,SAASX,EAAqBY,EAAMC,GAA2C,IAC9EC,GAD8ErD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBgD,GAChCI,GAE3B,OAAIC,EACcF,EAAKC,OAAO,SAACE,GACvB,OAAQA,EAAKC,OAASD,EAAKE,WAAaH,IAIzCF,EAIJ,SAASX,EAAmBW,GAAwB,IAAlBM,EAAkBzD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAEnD,OADAyD,EAAcA,EAAYC,eAERP,EAAKC,OAAO,SAACE,GACvB,OAAOA,EAAKK,KAAKD,cAAcE,WAAWH,KAI3CN,EAKJ,SAASV,EAAkBoB,GAC9B,OAAQA,GAA6B,KAAfA,GAAuC,MAAlBA,EAAW,gKCxKtDC,EAAgBC,IAAMC,OAAO,CAC7BC,QAASC,aAAaC,QAAQ,aAC9BC,QAAS,CAACC,eAAgB,oBAC1BC,aAAc,SAuBX,SAASC,EAAgBC,EAAOC,EAAWC,EAAOC,EAAWhB,EAAMJ,GACtE,OAAOqB,EAAsBJ,EAAOC,EAAWC,EAAOC,EAAWhB,EAAMJ,EAAO,QAa3E,SAASsB,EAAgBL,EAAOC,EAAWC,EAAOC,EAAWhB,EAAMJ,GAEtE,OAAOqB,EAAsBJ,EAAOC,EAAWC,EAAOC,EAAWhB,EAAMJ,EAAO,iBAenEqB,2FAAf,SAAAE,EAAqCN,EAAOC,EAAWC,EAAOC,EAAWhB,EAAMJ,EAAOwB,GAAtF,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACQT,EAAM,GAGFA,EAFK,SAATD,EACIxB,EACM,aAEA,uBAGNA,EACM,aAEA,uBAIVd,YAAkB+B,KAClBA,EAAQ,IAGR/B,YAAkBiC,KAClBA,EAAQ,KAGRnB,EAxBR,CAAAgC,EAAAE,KAAA,gBA0BcR,EAAWR,EAAUiB,MAAM,KAE3BR,EAAO,CACTV,MAAOA,EAAQC,EACfC,MAAOA,EAAQC,EAAY,IAAMM,EAASA,EAAShF,OAAS,GAC5D0F,QAAQ,GAEZC,QAAQrF,IAAI,SAAU2E,GAjC9BK,EAAAE,KAAA,GAkCqB3B,EAAc+B,KAAKb,EAAKE,GAlC7C,eAAAK,EAAAO,OAAA,SAAAP,EAAAQ,MAAA,cAqC0B,KAAdpB,EACAA,EAAYhB,EAEZgB,GAAa,IAAMhB,EAGjBuB,EAAO,CACTV,MAAOA,EACPC,UAAWA,EACXC,MAAOA,EACPC,UAAWA,EACXgB,QAAQ,GAhDpBJ,EAAAE,KAAA,GAkDqB3B,EAAc+B,KAAKb,EAAKE,GAlD7C,eAAAK,EAAAO,OAAA,SAAAP,EAAAQ,MAAA,yBAAAR,EAAAS,SAAAlB,6BAlDAhB,EAAcmC,aAAaC,QAAQC,IAC/B,SAAAxE,GAGI,OAFAA,EAAOyC,QAAQgC,cAAgB,SAAWC,KAAKnC,aAAaC,QAAQ,YAAc,IAAMD,aAAaC,QAAQ,aAEtGxC,GAEX,SAAA2E,GAAK,OAAIC,QAAQC,OAAOF,KAmGbxC,+LC/GT2C,EAAiB,SAAC9E,EAAQ+E,GAC5B,IAAMC,EAAaD,EAAME,OAAOlD,cAC1BmD,EAAcF,EAAW1G,OAE/B,OAAoB,IAAhB4G,EACOlF,EAIY,IAAhBkF,EAAoB,GAAKlF,EAAOyB,OAAO,SAAA0D,GAAI,OAC9CA,EAAKpD,cAAcqD,MAAM,EAAGF,KAAiBF,KAO/CK,EAAqB,SAAAC,GAAU,OAAIA,GAGnCC,EAAmB,SAAAD,GAAU,OAC/BE,EAAA9B,EAAA+B,cAAA,WACKH,IAmEMI,cA9DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeVQ,4BAA8B,SAAAC,GAAa,IAAXrB,EAAWqB,EAAXrB,MAE5Ba,EAAKS,SAAS,CACVC,YAAaxB,EAAec,EAAKD,MAAMW,YAAavB,MAnBzCa,EAwBnBW,4BAA8B,WAC1BX,EAAKS,SAAS,CACVC,YAAa,MAlBjBV,EAAKY,MAAQ,CACTF,YAAa,IATFV,wEA8BV,IAAAa,EACqBV,KAAKJ,MAIzBe,EAAa,CACfC,YAAa,2CACb5B,MAPC0B,EACE1B,MAOH6B,SARCH,EACSG,UAWd,OACIpB,EAAA9B,EAAA+B,cAACoB,EAAAnD,EAAD,CACI4C,YAAaP,KAAKS,MAAMF,YACxBH,4BAA6BJ,KAAKI,4BAClCI,4BAA6BR,KAAKQ,4BAClClB,mBAAoBA,EACpBE,iBAAkBA,EAClBuB,0BAA0B,EAC1BJ,WAAYA,WAnDQK,IAAMC,qDCuB7BC,EAAW,SAAC/E,EAAYgF,GAAb,OAA4B,SAAAC,GAEhD,GAAmB,KAAfjF,EAAmB,CAQnB,IAAIqB,EAAO,CACP6D,GAR4B,IAA5BlF,EAAW1B,QAAQ,KACHD,YAAe2B,GAEfA,EAMhBmF,OAAQH,GAGNI,EAAI,GAAAC,OAAMrF,EAAN,KAAAqF,OAAoBL,GAC9B/E,IAAc+B,KAAK,kBAAmBX,GAAMiE,KAAK,SAAAC,GAAG,OAAIN,EAAS,CACzDO,KAAMC,IACNC,OAAQC,IACRC,QAAS,CAACR,KAAMA,EAAMS,UAAWN,EAAIlE,KAAK/B,SAE9C,SAAAmD,GAAK,OAAIwC,EAAS,CACdO,KAAMC,IACNC,OAAQI,IACRF,QAAS,CAACR,KAAMA,EAAM3C,gBChEzBsD,EAAa,SAACC,EAAahG,EAAYgF,GAChD,OAAO,SAACC,GACJA,EAAS,CACLO,KAAMS,IACNjG,WAAYA,EACZkG,GAAIF,EACJhB,WAAYA,IAEhBC,EAASkB,EAAuBH,MAI3BI,EAAmB,SAACJ,EAAahG,GAE1C,OAAO,SAACiF,GACJA,EAAS,CACLO,KAAMa,IACNrG,WAAYA,EACZkG,GAAIF,EACJhB,WAAY,KAGhBC,EAASkB,EAAuBH,MAI3BG,EAAyB,SAACH,GAEnC,OAAO,SAACf,EAAUqB,GACd,IAD2BC,EACbD,IACyBE,SAASC,aAAaT,GAAtDhG,EAFoBuG,EAEpBvG,WAAYgF,EAFQuB,EAERvB,WACfhF,GAA6B,KAAfA,GACdiF,EAASF,EAAS/E,EAAYgF,MAgB7B0B,EAAa,SAACV,GAAD,OAAiB,SAAAf,GAEvCA,EAAS,CACLO,KAAMmB,IACNT,GAAIF,MAICY,EAAa,SAACZ,GAAD,OAAiB,SAAAf,GAEvCA,EAAS,CACLO,KAAMqB,IACNX,GAAIF,IAERf,EAASkB,EAAuBH,MAIvBc,EAAc,SAACd,GAAD,OAAiB,SAAAf,GAExCA,EAAS,CACLO,KAAMuB,IACNb,GAAIF,IAERf,EAASkB,EAAuBH,MAIvBgB,EAAe,SAAChB,GAAD,OAAiB,SAAAf,GAEzCA,EAAS,CACLO,KAAMyB,IACNf,GAAIF,IAERf,EAASkB,EAAuBH,eCxF9BkB,cAEF,SAAAA,EAAYzD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqD,IACfxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuD,GAAAlD,KAAAH,KAAMJ,KAcV0D,uBAAyB,SAACC,EAADlD,GAAuB,IAAdmD,EAAcnD,EAAdmD,SACA,IAA1BA,EAAS/I,QAAQ,KACjBoF,EAAKS,SAAS,CACVnE,WAAYqH,EACZC,eAAgB,oBAIpB5D,EAAKS,SAAS,CACVnE,WAAYqH,EACZC,eAAgB,UAzBT5D,EAgCnB6D,WAAa,WAAM,IAAAhD,EACyBb,EAAKD,MAAtC2C,EADQ7B,EACR6B,iBAAkBJ,EADVzB,EACUyB,YAClBhG,EAAc0D,EAAKY,MAAnBtE,WACPoG,EAAiBJ,EAAahG,GAE9B0D,EAAKD,MAAM+D,UAAUxH,IAnCrB0D,EAAKY,MAAQ,CACTzF,SAAS,EACTmB,WAAYyD,EAAMzD,WAClByH,aAAa,EACbH,eAAgB,QANL5D,mFAYfG,KAAKJ,MAAMiE,kDA8BN,IAAAC,EAAA9D,KAAA+D,EACyB/D,KAAKS,MAA5BzF,EADF+I,EACE/I,QAASmB,EADX4H,EACW5H,WACT6H,EAAWhE,KAAKJ,MAAhBoE,QAIP,OAHmBhE,KAAKJ,MAAjBqE,SAKCxE,EAAA9B,EAAA+B,cAAA,uDAIG1E,EAEHyE,EAAA9B,EAAA+B,cAAA,gDACsCD,EAAA9B,EAAA+B,cAAA,QAAMwE,KAAK,MAAMC,aAAW,SAA5B,gBADtC,KAMA1E,EAAA9B,EAAA+B,cAAC0E,EAAA,EAAD,CAAMC,SAAU,kBAAMP,EAAKJ,eACvBjE,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KAEI7E,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACrBjF,EAAA9B,EAAA+B,cAACiF,EAAD,CAAuB3F,MAAO7C,EAAY0E,SAAUb,KAAKsD,uBAClC/C,YAAayD,KAExCvE,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAEpBjF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQC,UAAW,SAAUC,MAAM,UAC3BnD,KAAK,UAAU3B,KAAKS,MAAMgD,0BA1EpCzC,IAAMC,WA6GhCoC,EAAY0B,aAHS,GAMNC,kBA3BS,SAACvE,EAAOwE,GAAR,MAAsB,CAC1CjB,QAASvD,EAAMa,OAAO0C,QACtBC,UAAU,EACVrF,MAAO6B,EAAMa,OAAO1C,MACpBsG,YAAazE,EAAMkC,SAASC,aAAaqC,EAAS9C,eAuBd,CACpC0B,eFvF0B,WAC1B,OAAO,SAACzC,EAAUqB,GACd,IAAMhC,EAAQgC,MAEThC,EAAMa,OAAO0C,SAAWvD,EAAMa,OAAO0C,QAAQzL,OAAS,IAEvD6D,IAAc+B,KAAK,sBAAsBsD,KAAK,SAAAC,GAAG,OAAIN,EAAS,CAC1DO,KAAMwD,IACNtD,OAAQC,IACRC,QAASL,EAAIlE,KAAKwG,WAClB,SAAApF,GAAK,OAAIwC,EAAS,CAClBO,KAAMwD,IACNtD,OAAQI,IACRF,QAASnD,QE2ErB+E,UFtHqB,SAACxH,GAAD,OAAgB,SAAAiF,GAErC,IAAIgE,EACAC,EAEAtK,YAAkBoB,GAClBiJ,EAAiBC,EAAgB,KAGjCA,EAAgBlJ,EAAW6B,MAAM,KAAK,GACtCoH,EAAiB5K,YAAe6K,IAGpCjJ,IAAc+B,KAAK,oBAAqB,CAACkD,GAAI+D,IACxC3D,KAAK,SAACC,GACCN,EAAS,CACLO,KAAM2D,IACNzD,OAAQC,IACRC,QAAQjC,OAAAyF,EAAA,EAAAzF,CAAA,GAAGuF,EAAgB3D,EAAIlE,SAIvC,SAAAoB,GAAK,OAAIwC,EAAS,CACdO,KAAM2D,IACNzD,OAAQI,IACRF,QAASnD,QE8FrB2D,oBAHWyC,CAKZ3B,wHC5HUmC,EACM,yBCkBbC,GAAsB,CACxBC,UADwB,SACd9F,GAAO,IAAA+F,EAEe/F,EAAMhE,KAClC,MAAO,CACHK,KAJS0J,EAEN1J,KAES2J,KAJHD,EAEAC,KAEe/J,MAJf8J,EAEM9J,MAEuBM,WAAYyD,EAAMzD,WAAYgF,WAAYvB,EAAMuB,aAIxF0E,QATkB,eAAAC,EAAAhG,OAAAiG,EAAA,EAAAjG,CAAAkG,EAAArI,EAAAsI,KAAA,SAAA7I,EASVwC,EAAOsG,EAASC,GATN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvK,EAAAJ,EAAA4K,EAAAC,EAAAhF,EAAA9C,EAAA,OAAAoH,EAAArI,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAWpBG,QAAQrF,IAAI+G,EAAO,aAAcuG,GAXbtI,EAAAC,KAAA,GAaZoI,EAAQS,kBAAmBR,EAbf,CAAAtI,EAAAE,KAAA,YAAAqI,EAgBmGF,EAAQS,gBAAhHN,EAhBKD,EAgBLC,cAAeC,EAhBVF,EAgBUE,cAAeC,EAhBzBH,EAgByBG,eAAgBC,EAhBzCJ,EAgByCI,eAAgBvK,EAhBzDmK,EAgByDnK,KAAMJ,EAhB/DuK,EAgB+DvK,MAAO4K,EAhBtEL,EAgBsEK,WAAYC,EAhBlFN,EAgBkFM,cAE3E,SAAfD,EAlBQ,CAAA5I,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAoBQZ,YAAgBkJ,EAAeC,EAAeC,EAAgBC,EAAgBvK,EAAMJ,GApB5F,OAoBJ6F,EApBI7D,EAAAQ,KAqBRH,QAAQrF,IAAI,OAAQ6I,GACpBgF,IACI7K,EACA+K,IAAMC,KAAN,4CAAArF,OAAuDvF,IAEvD2K,IAAMC,KAAN,uCAAArF,OAAkDvF,IA1B9C4B,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAkCFlB,YAAgBwJ,EAAeC,EAAeC,EAAgBC,EAAgBvK,EAAMJ,GAlClF,QAmCR6K,IAEIE,IAAMC,KAAN,2CAAArF,OAAsDvF,IArClD,QAAA4B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiJ,GAAAjJ,EAAA,SAgDVe,EAAQf,EAAAiJ,GAAEC,SAAWlJ,EAAAiJ,GAAEC,SAAflJ,EAAAiJ,GACd5I,QAAQrF,IAAImO,KAAKC,UAAUrI,IAE3BgI,IAAMhI,MAAN,0BAAA4C,OAAsC5C,GAAS,CAC3CsI,WAAW,IApDC,yBAAArJ,EAAAS,SAAAlB,EAAA,kCAAA+J,EAAAC,EAAAC,GAAA,OAAAvB,EAAAwB,MAAAtH,KAAA1H,YAAA,IAmE5B,SAASiP,GAATlH,GAAqC,IAAlBxE,EAAkBwE,EAAlBxE,MAAOC,EAAWuE,EAAXvE,SAClB+I,EAAY,UAchB,OAbIhJ,EACAgJ,EAAY,YACQ,oBAAb/I,EACP+I,EAAY,gBACQ,eAAb/I,EACP+I,EAAY,kBACQ,oBAAb/I,GAA+C,iCAAbA,GAA4D,qBAAbA,EACxF+I,EAAY,oBACQ,eAAb/I,EACP+I,EAAY,iBACQ,iBAAb/I,IACP+I,EAAY,qBAETpF,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAWA,EAAY,cAGrC,SAAS2C,GAAcC,EAAc7L,GAC7B8L,OAAOC,QAAP,mCAAAnG,OAAkD5F,EAAKK,QACvDwL,EAAa7L,GAIrB,SAASgM,GAATC,GAAwE,IAAtDC,EAAsDD,EAAtDC,eAAgBL,EAAsCI,EAAtCJ,aAAc7L,EAAwBiM,EAAxBjM,KAAMmM,EAAkBF,EAAlBE,gBAKlD,OAHgBnM,EAATC,MA4BC4D,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KAEIvI,EAAA9B,EAAA+B,cAACuI,EAAA,EAAD,KACIxI,EAAA9B,EAAA+B,cAACwI,EAAA,EAAD,CAAgBpD,MAAM,QAClBrF,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAU,sBAEjBpF,EAAA9B,EAAA+B,cAACyI,EAAA,EAAD,KACI1I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcC,QAAM,GAApB,WACA5I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcE,QAAS,kBAAMP,EAAgBnM,KAAO6D,EAAA9B,EAAA+B,cAAA,KAChDmF,UAAU,+BADd,oBAEApF,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcG,SAAO,IACrB9I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcE,QAAS,kBAAMd,GAAcC,EAAc7L,KAAO6D,EAAA9B,EAAA+B,cAAA,KAC5DmF,UAAU,4CADd,eAjCZpF,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KACIvI,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,OAAOwD,QAAS,kBAAMR,EAAelM,KAC/C6D,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAW,yCAElBpF,EAAA9B,EAAA+B,cAACuI,EAAA,EAAD,KACIxI,EAAA9B,EAAA+B,cAACwI,EAAA,EAAD,CAAgBpD,MAAM,QAClBrF,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAU,sBAEjBpF,EAAA9B,EAAA+B,cAACyI,EAAA,EAAD,KACI1I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcC,QAAM,GAApB,WACA5I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcE,QAAS,kBAAMP,EAAgBnM,KAAO6D,EAAA9B,EAAA+B,cAAA,KAChDmF,UAAU,+BADd,oBAEApF,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcG,SAAO,IACrB9I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,CAAcE,QAAS,kBAAMd,GAAcC,EAAc7L,KAAO6D,EAAA9B,EAAA+B,cAAA,KAC5DmF,UAAU,4CADd,mBA8BlB2D,oLA4BO,IAAA9H,EACuIV,KAAKJ,MAA1IhE,EADF8E,EACE9E,KAAM6M,EADR/H,EACQ+H,aAAcX,EADtBpH,EACsBoH,eAAgBC,EADtCrH,EACsCqH,gBAAiBN,EADvD/G,EACuD+G,aAAciB,EADrEhI,EACqEgI,kBAAmBC,EADxFjI,EACwFiI,SAAUC,EADlGlI,EACkGkI,QAEhG/M,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAU+M,EAAuBjN,EAAvBiN,QAAS5M,EAAcL,EAAdK,KAAM6M,EAAQlN,EAARkN,KAInCC,EAAU,IAAIC,KAAKA,KAAKC,MAAMJ,IAGlC,OACWH,EADM,SAAbC,EAEIlJ,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAW,YACZpF,EAAA9B,EAAA+B,cAACwJ,EAAA,EAAD,KACIzJ,EAAA9B,EAAA+B,cAACyJ,EAAA,EAAD,CAAUb,QAAS,SAACc,GAAD,OAAOX,EAAaW,EAAGxN,KACtC6D,EAAA9B,EAAA+B,cAAC6H,GAAD,CAAU1L,MAAOA,EAAOC,SAAUA,IADtC,IACmDG,GAEnDwD,EAAA9B,EAAA+B,cAAC2J,EAAA,EAAD,KACI5J,EAAA9B,EAAA+B,cAACkI,GAAD,CAASE,eAAgBA,EAAgBC,gBAAiBA,EACjDN,aAAcA,EAAc7L,KAAMA,OAOvD6D,EAAA9B,EAAA+B,cAAA,MAAImF,UAAW,kBACXpF,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,0BAAyBpF,EAAA9B,EAAA+B,cAAA,SAAOiC,KAAK,cACnDlC,EAAA9B,EAAA+B,cAAA,MAAI4I,QAAS,SAACc,GAAD,OAAOX,EAAaW,EAAGxN,IAAOyG,GAAI,OAASuG,GACpDnJ,EAAA9B,EAAA+B,cAAC6H,GAAD,CAAU1L,MAAOA,EAAOC,SAAUA,IADtC,IACmDG,GAOnDwD,EAAA9B,EAAA+B,cAAA,WAAe,IAAVoJ,EAAc,IAAM1Q,YAAY0Q,EAAM,IAC3CrJ,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,0BAA0BkE,EAAQO,sBAChD7J,EAAA9B,EAAA+B,cAAA,UAAID,EAAA9B,EAAA+B,cAACkI,GAAD,CAASE,eAAgBA,EAAgBC,gBAAiBA,EACjDN,aAAcA,EAAc7L,KAAMA,cAnEvCoF,IAAMC,WA0FnBsI,eAAW/D,EAAyBC,GA7KnD,SAAiBT,EAASkB,GACtB,MAAO,CACHwC,kBAAmB1D,EAAQwE,aAC3BC,mBAAoBzE,EAAQ0E,cAC5BC,WAAYzD,EAAQyD,eAyKbJ,CAAkEf,+DCvP3EoB,eAEF,SAAAA,EAAYhK,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4J,IACf/J,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8J,GAAAzJ,KAAAH,KAAMJ,KAYViK,gBAAkB,WACd,IAAIC,EAAYC,SAASrK,cAAc,YACvCoK,EAAUE,UAAYnK,EAAKD,MAAMqK,QACjCF,SAASG,KAAKC,YAAYL,GAC1BA,EAAUM,SACVL,SAASM,YAAY,QACrBP,EAAUQ,UAnBKzK,EAsBnB0K,YAAc,SAAChH,GAAD,OAAWA,EAAMiH,OAAOJ,UApBlCvK,EAAKY,MAAQ,CACTgK,YAAa,IAGjB5K,EAAK6K,OAAS7K,EAAK6K,OAAOC,KAAZ7K,OAAA8K,EAAA,EAAA9K,CAAAD,IANCA,wEAUfG,KAAKJ,MAAMiL,8CAcN,IAAAnK,EACwBV,KAAKJ,MAA3BkL,EADFpK,EACEoK,UAAWb,EADbvJ,EACauJ,QACXQ,EAAezK,KAAKS,MAApBgK,YACHM,GAAiBhB,WAAYA,SAASiB,uBAAyBjB,SAASiB,sBAAsB,QAElG,OACIvL,EAAA9B,EAAA+B,cAAA,WACID,EAAA9B,EAAA+B,cAACuL,GAAA,EAAD,CAAOC,OAAQJ,EAAWJ,OAAQ1K,KAAK0K,QACnCjL,EAAA9B,EAAA+B,cAACyL,GAAA,EAAD,CAAaT,OAAQ1K,KAAK0K,OAAQU,YAAU,eAA5C,0BACA3L,EAAA9B,EAAA+B,cAAC2L,GAAA,EAAD,CAAWD,YAAU,aACjB3L,EAAA9B,EAAA+B,cAAC4L,GAAA,EAAD,CAAOC,UAAQ,EAACvM,MAAOiL,EAASuB,QAASxL,KAAKuK,cAK1CQ,GACAtL,EAAA9B,EAAA+B,cAAA,WACID,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,OAAOwD,QAAStI,KAAK6J,iBAAiBpK,EAAA9B,EAAA+B,cAAA,KAChDmF,UAAU,4BAGrB4F,GAELhL,EAAA9B,EAAA+B,cAAC+L,GAAA,EAAD,CAAaL,YAAU,eACnB3L,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,UAAUwD,QAAStI,KAAK0K,QAAtC,QAA4D,cAlDvD1J,IAAMC,WA+DnC2I,GAAe7E,aAAe,CAC1B+F,WAAW,GAGAlB,UCpDT8B,GAAc,CAChBC,KADgB,SACX/L,EAAOsG,EAASC,GACjB,IAAID,EAAQ0F,UAAZ,CAD4B,IAAAC,EAIU3F,EAAQzJ,UAAzCR,EAJuB4P,EAIvB5P,KAAM2J,EAJiBiG,EAIjBjG,KAAM/J,EAJWgQ,EAIXhQ,MAAOM,EAJI0P,EAIJ1P,WASxB,MAAO,CACHkK,cARgB7L,YAAe2B,GAS/BmK,cARgBV,EAShBW,eARiB/L,YAAeoF,EAAMsF,YAAY/I,YASlDqK,eARiB5G,EAAMsF,YAAY/D,WASnClF,OACAJ,QACA6K,cAAeP,EAAUO,iBAIjCoF,QAzBgB,SAyBRlM,EAAOsG,GAAS,IAAA6F,EACa7F,EAAQzJ,UAAlCN,EADa4P,EACb5P,WAAYgF,EADC4K,EACD5K,WACnBjD,QAAQrF,IAAIsD,EAAYyD,EAAMsF,YAAY/I,WAAYgF,EAAYvB,EAAMsF,YAAY/D,YACpF,IAAMoF,EAAiB3G,EAAMsF,YAAY/I,WACnCqK,EAAiB5G,EAAMsF,YAAY/D,WACzC,OAAIoF,IAAmBpK,GACZqK,IAAmBrF,IAoCtC,SAAS6K,GAAT3L,GAAuD,IAA3B4L,EAA2B5L,EAA3B4L,eACxB,MAAiB,SADkC5L,EAAXsI,SAGhClJ,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKG,GAAI,IACLjF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQ0D,QAAS,kBAAM2D,MAAvB,UAKJxM,EAAA9B,EAAA+B,cAAA,MAAI4I,QAAS,kBAAM2D,KAAkBpH,UAAW,kBAC5CpF,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,IACbzM,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,GAAGzM,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAW,iBAA9B,kBAQVsH,eAGF,SAAAA,EAAYvM,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmM,IACftM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqM,GAAAhM,KAAAH,KAAMJ,KAeVwM,oBAAsB,WAClBvM,EAAKS,SAAS,CACV+L,oBAAoB,KAlBTxM,EAsBnBwM,mBAAqB,WACjBxM,EAAKS,SAAS,CACV+L,oBAAoB,KAxBTxM,EA+InB6G,cAAgB,WAAM,IAAA4F,EAEezM,EAAKD,MAAMsF,YAArC/I,EAFWmQ,EAEXnQ,WAAYgF,EAFDmL,EAECnL,WACnBtB,EAAK0M,aAAapQ,EAAYgF,IAlJftB,EAqJnB2M,aAAe,SAACpD,GACZvJ,EAAKS,SAAS,CAACmM,oBAAoB,KAtJpB5M,EAyJnBkI,gBAAkB,SAACnM,GAEf,GADiBiE,EAAKD,MAAf8M,OACIC,SAASC,WAAY,CAC5B1O,QAAQrF,IAAI,eAAiB+C,EAAKK,MADN,IAErBE,EAAc0D,EAAKD,MAAMsF,YAAzB/I,WACPC,IAAc+B,KAAK,wBAAyB,CACxCkD,GAAI7G,YAAe2B,GACnBmF,OAAQ1F,EAAKgK,OACdnE,KAAK,SAACC,GAGL7B,EAAKS,SAAS,CACVuM,cAAenL,EAAIlE,KAAKF,IACxB+O,oBAAoB,KAEzB,SAACzN,GACAgI,IAAMhI,MAAM,0BAA4BA,UAG5CgI,IAAMhI,MAAM,6CA5KDiB,EAiLnBiN,kBAAoB,SAACC,GAAU,IAAArM,EACoBb,EAAKD,MAA7CoN,EADoBtM,EACpBsM,MAAO7K,EADazB,EACbyB,YAAawG,EADAjI,EACAiI,SAAU+D,EADVhM,EACUgM,OADVO,EAEMpN,EAAKD,MAAMsF,YAArC/I,EAFoB8Q,EAEpB9Q,WAAYgF,EAFQ8L,EAER9L,WAEnB,GAAIuL,IAAW1R,YAAQ0R,GACnB,OAAOM,EAAME,IAAI,SAACtR,EAAMvB,GAAQ,IACvB8S,EAAYvR,EAAZuR,GAAIlR,EAAQL,EAARK,KAKT,YAHWzD,IAAP2U,IACAA,EAAKlR,GAELL,EAAKC,QAAUkR,EAEXtN,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,CAAgB5M,IAAK+R,GACjB1N,EAAA9B,EAAA+B,cAAC0N,GAAD,CAAexR,KAAMA,EAAM6M,aAAc5I,EAAKwN,gBAC/BvF,eAAgBjI,EAAKiI,eAAgBL,aAAc5H,EAAK4H,aACxDtL,WAAYA,EAAYgF,WAAYA,EAAYwH,SAAUA,EAC1DxG,YAAaA,EACb4F,gBAAiBlI,EAAKkI,gBACtBuF,QAASZ,EAAOC,SAASY,KAAMC,QAASd,EAAOC,SAASc,KAAM7E,QAASvO,KAK3F,QAvMfwF,EAAKY,MAAQ,CACTiN,WAAW,EACXjB,oBAAoB,EACpBkB,iBAAkB,EAClBC,cAAc,EACdvB,oBAAoB,EACpBQ,cAAe,IAGnBhN,EAAKwN,gBAAkBxN,EAAKwN,gBAAgB1C,KAArB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IACvBA,EAAKiI,eAAiBjI,EAAKiI,eAAe6C,KAApB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IACtBA,EAAK4H,aAAe5H,EAAK4H,aAAakD,KAAlB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IAbLA,+EA8BHuJ,EAAGxN,GAAM,IACdgK,EAAyBhK,EAAzBgK,KAAM/J,EAAmBD,EAAnBC,MAAOgS,EAAYjS,EAAZiS,SAChBhS,GAASgS,EACT7N,KAAK8N,iBAAiBlI,EAAM/J,EAAOgS,GAEnC7N,KAAK8H,eAAelM,4CAKXmS,EAAelS,EAAOgS,GAAU,IACtC1R,EAAc6D,KAAKJ,MAAMsF,YAAzB/I,WAEH6R,EAAmB,GACnBF,EAAmB,GAGnBD,GACAG,EAAmBxT,YAAe2B,GAAc4R,EAChDD,EAAmB,IAGZjS,IACPmS,EAAmB7R,EACnB2R,EAAmBC,GAGvB/N,KAAKJ,MAAMsC,WAAWlC,KAAKJ,MAAMuC,YAAa6L,EAAkBF,4CAInCxV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,OAAA2V,EACIjO,KAAKJ,MAAMsF,YAArC/I,EADsB8R,EACtB9R,WAAYgF,EADU8M,EACV9M,WAEnBnB,KAAKJ,MAAMsB,SAAS/E,EAAYgF,kFAIfvF,uGAEcoE,KAAKJ,MAAMsF,YAArC/I,eAAYgF,eACVuL,EAAU1M,KAAKJ,MAAf8M,OACHwB,EAAc,GAEdA,EADAxB,EAAOC,SAASwB,YACL,KAAA3M,OAAQrF,EAAR,MAAAqF,OAAuBL,EAAvB,KAAAK,OAAqC5F,EAAKK,MAG1C,KAAAuF,OAAQrF,EAAR,KAAAqF,OAAsBL,EAAtB,MAAAK,OAAqC5F,EAAKK,MAGzD+D,KAAKM,SAAS,SAAC8N,GACX,MAAO,CACHT,iBAAkBS,EAAUT,iBAAmB,EAC/ClB,oBAAoB,cAIPrQ,YAAc,CAC/BkB,IAAK4Q,EACLG,OAAQ,MACRzR,aAAc,gBAHdmK,SAMEzJ,EAAMoK,OAAO4G,IAAIC,gBAAgB,IAAIC,KAAK,CAACzH,EAASvJ,SACpDiR,EAAO1E,SAASrK,cAAc,MAC/BgP,KAAOpR,EACZmR,EAAKE,aAAa,WAAY/S,EAAKK,MACnC8N,SAASG,KAAKC,YAAYsE,GAC1BA,EAAKG,QAEL5O,KAAKM,SAAS,SAAC8N,GACX,MAAO,CACHT,iBAAkBS,EAAUT,iBAAmB,IAEpD,WACqC,IAAhC7J,EAAKrD,MAAMkN,kBACX7J,EAAKxD,SAAS,CAACmM,oBAAoB,uLAK5B7Q,8EACVO,EAAc6D,KAAKJ,MAAMsF,YAAzB/I,WAECqB,EAAO,CACT6D,GAAI7G,YAAe2B,GACnBmF,OAAQ1F,EAAKgK,gBAGThK,EAAKC,uCAECO,IAAc+B,KAAK,oBAAqBX,UAE9CwC,KAAK0G,gBACLE,IAAMC,KAAN,GAAArF,OAAc5F,EAAKK,KAAnB,uDAIMG,IAAc+B,KAAK,yBAA0BX,WACnDwC,KAAK0G,gBACLE,IAAMC,KAAN,GAAArF,OAAc5F,EAAKK,KAAnB,aAAoC,CAChCiL,WAAW,8DAKnBN,IAAMhI,MAAN,wBAAA4C,OAAAqN,EAAA/H,IAAyC,CACrCI,WAAW,kJAsEd,IAAAnD,EACwF/D,KAAKS,MAA3FiN,EADF3J,EACE2J,UAAWjB,EADb1I,EACa0I,mBAAoBkB,EADjC5J,EACiC4J,iBAAkBd,EADnD9I,EACmD8I,cAAeR,EADlEtI,EACkEsI,mBADlEyC,EAEkF9O,KAAKJ,MAArFmP,EAFFD,EAEEC,kBAAmBC,EAFrBF,EAEqBE,OAAQhC,EAF7B8B,EAE6B9B,MAAOjK,EAFpC+L,EAEoC/L,WAAYZ,EAFhD2M,EAEgD3M,YAAawG,EAF7DmG,EAE6DnG,SAAUmD,EAFvEgD,EAEuEhD,QACrE3P,EAAc6D,KAAKJ,MAAMsF,YAAzB/I,WAIP,GAAIuR,IAAcV,EACd,OAAQvN,EAAA9B,EAAA+B,cAAA,WAAKD,EAAA9B,EAAA+B,cAACuP,EAAA,EAAD,CAASnK,MAAM,YAApB,YAIR,GAAmB,KAAf3I,EACA,OAAQsD,EAAA9B,EAAA+B,cAAA,+EAIZ,IAAIwP,EAAkBlP,KAAK8M,mBAAkB,GAEzCqC,EAAmBnP,KAAK8M,mBAAkB,GAE1CsC,EAAgB,GA6EpB,OAzEIA,EAFa,SAAbzG,EAGIlJ,EAAA9B,EAAA+B,cAAC2P,EAAA,EAAD,CAAWC,OAAO,GACd7P,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAACsM,GAAD,CAAmBC,eAAgB,kBAAMlJ,EAAWZ,IAAcwG,SAAUA,KAEhFlJ,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAAA,0BAEJD,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACK4K,GAILzP,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAAA,oBAEJD,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACK6K,IAWT1P,EAAA9B,EAAA+B,cAAC2P,EAAA,EAAD,CAAWC,OAAO,EAAMzK,UAAW,QAE/BpF,EAAA9B,EAAA+B,cAAC6P,EAAA,EAAD,CAAO1K,UAAU,uBACbpF,EAAA9B,EAAA+B,cAAA,aACAD,EAAA9B,EAAA+B,cAAA,UACID,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,0BAAd,KACApF,EAAA9B,EAAA+B,cAAA,kBACAD,EAAA9B,EAAA+B,cAAA,kBACAD,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,0BAAd,YACApF,EAAA9B,EAAA+B,cAAA,uBAGJD,EAAA9B,EAAA+B,cAAA,aACAD,EAAA9B,EAAA+B,cAACsM,GAAD,CAAmBC,eAAgB,kBAAMlJ,EAAWZ,IAAcwG,SAAUA,IAC3EqE,EAAMzU,OAAS,EACRkH,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KACIvI,EAAA9B,EAAA+B,cAAA,UACID,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,EAAGrH,UAAU,sBAC1BpF,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,GAAb,gBAEHgD,EACDzP,EAAA9B,EAAA+B,cAAA,UACID,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,2BACdpF,EAAA9B,EAAA+B,cAAA,mBACAD,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,2BACdpF,EAAA9B,EAAA+B,cAAA,WACAD,EAAA9B,EAAA+B,cAAA,YAEHyP,GAGT1P,EAAA9B,EAAA+B,cAAA,UACID,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,EAAGrH,UAAU,2BAC1BpF,EAAA9B,EAAA+B,cAAA,MAAIwM,QAAS,GAAb,aAYjB6C,EACHtP,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAW,OACXmK,GAAUlD,GA7VvBrM,EAAA9B,EAAA+B,cAAA,OACI8P,MAAO,CACHC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRC,MAAO,OACPC,OAAQ,EACRC,QAAS,GACTC,gBAAiB,UAwVbvQ,EAAA9B,EAAA+B,cAACuQ,EAAA,EAAD,CAAOnL,MAAM,OAAOoG,OAAQuB,EAAoB/B,OAAQ1K,KAAKwM,aAAc/H,GAAI,GACxEC,GAAI,IADX,eAEiBiJ,EAFjB,0BAKCyB,EAED3P,EAAA9B,EAAA+B,cAACwQ,GAAD,CAAgBrF,WAAY7K,KAAKoM,oBAAqBtB,UAAWuB,EACjDpC,QAAS4C,aAlUrB7L,IAAMmP,eAmW9BhE,GAAUpH,aALW,GAQrB,IA2CeqL,gBACXpL,YA5CoB,SAACvE,EAAOwE,GAC5B,IAAMC,EAAczE,EAAMkC,SAASC,aAAaqC,EAAS9C,aACnDkO,EAAmB5P,EAAMkC,SAAS2N,kBAAkBrL,EAAS9C,aAC7DwG,EAAWlI,EAAMkC,SAASgG,SAAS1D,EAAS9C,aAC5CpG,EAAc0E,EAAMkC,SAAS4N,cAActL,EAAS9C,aAEtDuK,EAAS,GACNvQ,EAA0B+I,EAA1B/I,WAAYgF,EAAc+D,EAAd/D,WAEnB,GAAI+D,GAAezE,EAAMa,OAAOkP,QAAS,CAErC,IAAMC,EAAiBtU,EAAW6B,MAAM,KAAK,GACzCyC,EAAMa,OAAOkP,QAAQC,KAErB/D,EAASjM,EAAMa,OAAOkP,QAAQC,IAGtC,IAAMC,EAAO,GAAAlP,OAAMrF,EAAN,KAAAqF,OAAoBL,GAE7B6L,EAAQvM,EAAMa,OAAO0L,MAAM0D,GAe/B,OAbI1D,IACAA,EAAQA,EAAMA,MAEVqD,IACArD,EAAQnS,YAAqBmS,EAAOqD,IAIpCtU,IACAiR,EAAQlS,YAAmBkS,EAAOjR,KAInC,CACHiR,QACA9H,cACAwH,SACA/D,WACA5M,gBAMiB,CAACmF,WAAU6B,aAAYb,eAE5CyO,YAAWnL,EAAyBkG,GAtcxC,SAAiB1G,EAASkB,GACtB,MAAO,CACH6I,kBAAmB/J,EAAQ4L,aAC3B5B,OAAQ9I,EAAQ8I,SAChBlD,QAAS5F,EAAQ4F,aA8bVsE,CAKbjE,ICxfa0E,OANf,SAAAxQ,GAA2C,IAAnBuP,EAAmBvP,EAAnBuP,OAAQkB,EAAWzQ,EAAXyQ,SAC5B,OAAQrR,EAAA9B,EAAA+B,cAAA,OAAK8P,MAAO,CAACuB,SAAU,OAAQnB,OAAQA,IAC1CkB,0ECMHE,eAEF,SAAAA,EAAYpR,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,IACfnR,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkR,GAAA7Q,KAAAH,KAAMJ,KAWVqR,YAAc,SAACC,GACXrR,EAAKS,SAAS,CAAC2Q,YAAaC,KAbbrR,EAuEnBsR,WAAa,SAAA/H,GACT,IAAMpK,EAAQoK,EAAEoB,OAAOxL,MACvBa,EAAKS,SACD,CAACpG,KAAM8E,KAxEXa,EAAKY,MAAQ,CACTvG,KAAM,GACN+W,aAAa,GAEjBpR,EAAKuR,gBAAkBvR,EAAKuR,gBAAgBzG,KAArB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IACvBA,EAAKwR,aAAexR,EAAKwR,aAAa1G,KAAlB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IACpBA,EAAK6K,OAAS7K,EAAK6K,OAAOC,KAAZ7K,OAAA8K,EAAA,EAAA9K,CAAAD,IARCA,gNAmBV3F,EAAQ8F,KAAKS,MAAbvG,OAC0B8F,KAAKJ,MAAMsF,YAArC/I,eAAYgF,eACVuL,EAAU1M,KAAKJ,MAAf8M,OAEPvQ,EAAa3B,YAAe2B,YAKpBuQ,EAAOC,SAASwB,aAA8B,KAAfhN,EAC/BhF,GAAcjC,EAEK,KAAfiH,EACAA,EAAajH,EAEbiH,GAAc,IAAMjH,EAGtBsD,EAAO,CACT6D,GAAIlF,EACJmF,OAAQH,GAIZnB,KAAKiR,aAAY,aAGX7U,IAAc+B,KAAK,mBAAoBX,WAE7CwC,KAAKiR,aAAY,GAEjBjR,KAAK0K,SACL9D,IAAMC,KAAN,mBAAArF,OAA8BL,IAC9BnB,KAAKJ,MAAM0C,uBAAuBtC,KAAKJ,MAAMuC,+DAE7CnC,KAAKiR,aAAY,GAEbpT,EAAAiJ,GAAMC,SACNH,IAAMhI,MAAN,0BAAA4C,OAAsC3D,EAAAiJ,GAAMC,SAASvJ,KAAKoB,QAE1DgI,IAAMhI,MAAN,0BAAA4C,OAAA3D,EAAAiJ,sJAOCsC,GACTA,EAAEkI,iBACFtR,KAAKoR,mDAWLpR,KAAKJ,MAAMiL,8CAGN,IAAA9G,EACuB/D,KAAKS,MAA1BvG,EADF6J,EACE7J,KAAM+W,EADRlN,EACQkN,YADRvQ,EAE4BV,KAAKJ,MAA/BkL,EAFFpK,EAEEoK,UAAW5F,EAFbxE,EAEawE,YAClB,OAEIzF,EAAA9B,EAAA+B,cAACuL,GAAA,EAAD,CAAOC,OAAQJ,EAAWJ,OAAQ1K,KAAK0K,OAAQU,YAAU,sBACrD3L,EAAA9B,EAAA+B,cAAC0E,EAAA,EAAD,CAAMC,SAAUrE,KAAKqR,cACjB5R,EAAA9B,EAAA+B,cAACyL,GAAA,EAAD,CAAaT,OAAQ1K,KAAK0K,QAA1B,wBACQxF,EAAY/I,WADpB,KACkC+I,EAAY/D,YAC9C1B,EAAA9B,EAAA+B,cAAC2L,GAAA,EAAD,KACI5L,EAAA9B,EAAA+B,cAAC6R,GAAA,EAAD,CAAWC,KAAG,GACV/R,EAAA9B,EAAA+B,cAAC+R,GAAA,EAAD,CAAOC,IAAI,aAAajN,GAAI,GAA5B,kBACAhF,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKE,GAAI,GACLhF,EAAA9B,EAAA+B,cAAC4L,GAAA,EAAD,CAAO3J,KAAK,OAAOzH,KAAK,aAAamI,GAAG,aAAarD,MAAO9E,EACrD2G,SAAUb,KAAKmR,WAAYQ,UAAQ,EAACC,WAAS,MAI5DnS,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAU,YACXpF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQjD,KAAK,SAASmD,MAAM,UAAUD,UAAU,cAAcgN,SAAUZ,GAAaxR,EAAA9B,EAAA+B,cAAA,KACjFmF,UAAU,sBADd,4BAvGJ7D,IAAMC,WA8If+D,eAdS,SAACvE,EAAOwE,GAE5B,IAAMC,EAAczE,EAAMkC,SAASC,aAAaqC,EAAS9C,aACrDuK,EAAS,GAKb,OAHIxH,GAAezE,EAAMa,OAAOkP,SAAW/P,EAAMa,OAAOkP,QAAQtL,EAAY/I,cACxEuQ,EAASjM,EAAMa,OAAOkP,QAAQtL,EAAY/I,aAEvC,CACH+I,cACAwH,WAIgC,CAACpK,0BAA1B0C,CAAmDgM,ICxJrDc,GAA6B,CAAC,SAAU,MAAO,oBCqCtDC,eACF,SAAAA,EAAYnS,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+R,IACflS,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiS,GAAA5R,KAAAH,KAAMJ,KASVoS,mBAAqB,WAAM,IAChBtF,EAAU7M,EAAKD,MAAf8M,OACHA,GAAUA,EAAOC,UAAYD,EAAOC,SAASsF,wBAC7CpS,EAAKS,SAAS,CAAC4R,yBAAyB,IAExCtL,IAAMhI,MAAM,8CAfDiB,EAmBnBsS,oBAAsB,WAClBtS,EAAKS,SAAS,CAAC4R,yBAAyB,KApBzBrS,EAuBnBuS,mBAAqB,SAAChJ,GAClB,IAAMiJ,EAAYjJ,EAAEoB,OAAOxL,OAI3BsT,EAFiCzS,EAAKD,MAA/B0S,wBAEgBzS,EAAKD,MAAMuC,YAAakQ,GAC/CxS,EAAK0S,kBA7BU1S,EAkCnB2S,qBAAuB,SAACpJ,GAEpB,IAAMT,EAAWS,EAAEoB,OAAOxL,OAI1ByT,EAFyB5S,EAAKD,MAAvB6S,gBAEQ5S,EAAKD,MAAMuC,YAAawG,GACvC9I,EAAK0S,kBAzCU1S,EA6CnB6S,aAAe,SAACtJ,GACZA,EAAEkI,iBADgB,IAEXnP,EAAetC,EAAKD,MAApBuC,YACPtC,EAAKD,MAAM+S,eAAexQ,EAAaiH,EAAEoB,OAAOxL,QAhDjCa,EAoDnB0S,eAAiB,WACb1S,EAAKS,SAAS,SAAC8N,GACX,MAAO,CACHwE,cAAexE,EAAUwE,iBAvDlB/S,EA4DnBgT,iBAAmB,WAAM,IACdnG,EAAU7M,EAAKD,MAAf8M,OACHA,GAAUA,EAAOC,UAAYD,EAAOC,SAASmG,MAC7CjT,EAAKS,SAAS,SAAC8N,GACX,MAAO,CACH2E,kBAAmB3E,EAAU2E,mBAElC,WACC,GAAIlT,EAAKY,MAAMsS,iBAAkB,KACtB5Q,EAAetC,EAAKD,MAApBuC,YACPtC,EAAKD,MAAMoT,SAAS7Q,MAI5ByE,IAAMhI,MAAM,uCA1EDiB,EA+EnBoT,iBAAmB,WAAM,IACdvG,EAAU7M,EAAKD,MAAf8M,OACP,GAAIA,GAAUA,EAAOC,UAAYD,EAAOC,SAASuG,SAE7C,GAAIxL,OAAOC,QAAQ,6EAA8E,KAAAjH,EAE1Db,EAAKD,MAAjCsF,EAFsFxE,EAEtFwE,YAAa/C,EAFyEzB,EAEzEyB,YACfhG,EAAc+I,EAAd/I,WAEApB,YAAkBoB,KACnBA,EAAa3B,YAAe2B,IAGhCC,IAAc+B,KAAK,qBAAsB,CACrCkD,GAAIlF,IACLsF,KAAK,SAACC,GACkB,MAAfA,EAAIG,SACJ+E,YAAM,iBACN/G,EAAKD,MAAMoT,SAAS7Q,KAI5B,SAACgR,GACGvM,IAAMhI,MAAM,gCAMxBgI,IAAMhI,MAAM,iDA1GhBiB,EAAKY,MAAQ,CACTyR,yBAAyB,EACzBa,kBAAkB,EAClBH,cAAc,GAElB/S,EAAKuT,cAAgBtB,GAPNjS,wEAiHV,IAAAiP,EACwI9O,KAAKJ,MAA3IuC,EADF2M,EACE3M,YAAaG,EADfwM,EACexM,uBAAwB+N,EADvCvB,EACuCuB,iBAAkB1H,EADzDmG,EACyDnG,SAAU1F,EADnE6L,EACmE7L,YAAaE,EADhF2L,EACgF3L,aAAcpH,EAD9F+S,EAC8F/S,YAAamJ,EAD3G4J,EAC2G5J,YAAamO,EADxHvE,EACwHuE,aADxHtP,EAE6D/D,KAAKS,MAAhEyR,EAFFnO,EAEEmO,wBAAyBU,EAF3B7O,EAE2B6O,aAAcG,EAFzChP,EAEyCgP,iBAEvC5W,EAA0B+I,EAA1B/I,WAAYgF,EAAc+D,EAAd/D,WAEnB,OACI1B,EAAA9B,EAAA+B,cAAA,OAAKyE,aAAW,cACZ1E,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,cACVpF,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,0BAA0B1I,EAAxC,MAECgF,EACD1B,EAAA9B,EAAA+B,cAAA,MAAImF,UAAU,mBACVpF,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAU,YAAYX,KAAK,QAC3BC,aAAW,qCAGZ1E,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQ0D,QAAStI,KAAK6S,iBAAkBhO,UAAU,OAAMpF,EAAA9B,EAAA+B,cAAA,KACpDmF,UAAU,iBADd,gBAKZpF,EAAA9B,EAAA+B,cAAA,WACID,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,QAAQD,UAAW,wBACzByD,QAAS,kBAAMnF,EAAahB,KAAc1C,EAAA9B,EAAA+B,cAAA,KAC9CmF,UAAW,4BACfpF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,QAAQD,UAAW,wBACzByD,QAAS,kBAAMrF,EAAYd,KAAc1C,EAAA9B,EAAA+B,cAAA,KAC7CmF,UAAW,6BAGfpF,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAU,qCAEXpF,EAAA9B,EAAA+B,cAAC4T,GAAA,EAAD,KACI7T,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQC,UAAU,wBAAwByD,QAAStI,KAAKgS,oBAAoBvS,EAAA9B,EAAA+B,cAAA,KACxEmF,UAAW,qBADf,KAEApF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQC,UAAU,wBACVyD,QAAS,kBAAMhG,EAAuBH,KAAc1C,EAAA9B,EAAA+B,cAAA,KACxDmF,UAAW,wBACfpF,EAAA9B,EAAA+B,cAAC6T,GAAA,EAAD,KACI9T,EAAA9B,EAAA+B,cAAC8T,GAAA,EAAD,CAAiBC,UAAU,WACvBhU,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQjD,KAAK,SAASmD,MAAM,WAAUrF,EAAA9B,EAAA+B,cAAA,KAAGmF,UAAU,iBAAnD,YAEJpF,EAAA9B,EAAA+B,cAAC4L,GAAA,EAAD,CAAO3J,KAAK,OAAOU,GAAG,gBAAgBzB,YAAY,SAAS5B,MAAOjD,EAC3D8E,SAAUb,KAAK0S,gBAE1BjT,EAAA9B,EAAA+B,cAACgU,GAAA,EAAD,CAAgBxI,OAAQ0H,EAAclI,OAAQ1K,KAAKuS,gBAC/C9S,EAAA9B,EAAA+B,cAACwI,EAAA,EAAD,CAAgByL,OAAK,GAArB,QAGAlU,EAAA9B,EAAA+B,cAACyI,EAAA,EAAD,KACI1I,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,iBAAwB,IACpB3I,EAAA9B,EAAA+B,cAAC4L,GAAA,EAAD,CAAO3J,KAAM,SAAU2G,QAAS,SAACc,GAAD,OAAOA,EAAEwK,mBAClC/S,SAAUb,KAAKwS,qBAAsBxT,MAAO2J,GAC/ClJ,EAAA9B,EAAA+B,cAAA,UAAQV,MAAO,QAAf,QACAS,EAAA9B,EAAA+B,cAAA,UAAQV,MAAO,QAAf,UAIRS,EAAA9B,EAAA+B,cAAC0I,EAAA,EAAD,mBAA0B,IACtB3I,EAAA9B,EAAA+B,cAAC4L,GAAA,EAAD,CAAO3J,KAAM,SAAU2G,QAAS,SAACc,GAAD,OAAOA,EAAEwK,mBAClC/S,SAAUb,KAAKoS,mBAAoBpT,MAAOqR,EAC1CxL,UAAU,aACbpF,EAAA9B,EAAA+B,cAAA,UAAQtE,IAAK,GAAb,QAEI4E,KAAKoT,cAAclG,IAAI,SAACtR,EAAMvB,GAC1B,OAAQoF,EAAA9B,EAAA+B,cAAA,UAAQtE,IAAKQ,EAAMoD,MAAOpD,GAAOA,UAUrE6D,EAAA9B,EAAA+B,cAACmU,GAAD,CAAW1R,YAAaA,EAAa2I,UAAWoH,EACrCrH,WAAY7K,KAAKmS,sBAE5B1S,EAAA9B,EAAA+B,cAACuL,GAAA,EAAD,CAAOC,OAAQ6H,EAAkBrI,OAAQ1K,KAAK6S,kBAC1CpT,EAAA9B,EAAA+B,cAACyL,GAAA,EAAD,mBACgBhP,GAEhBsD,EAAA9B,EAAA+B,cAAC2L,GAAA,EAAD,KACI5L,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKE,GAAI,IACLhF,EAAA9B,EAAA+B,cAAA,OAAKmF,UAAU,iBACXpF,EAAA9B,EAAA+B,cAAA,gCACC2T,IAAiBrY,YAAQqY,GAAgB5T,EAAA9B,EAAA+B,cAACoU,GAAA,EAAD,CAAUtW,KAAM6V,IACtD5T,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KAAgBvI,EAAA9B,EAAA+B,cAACuP,EAAA,EAAD,CAASnK,MAAM,YAA/B,cAIhBrF,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKE,GAAI,IACLhF,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAM,SAASwD,QAAStI,KAAKiT,kBAArC,eAAmExT,EAAA9B,EAAA+B,cAAA,KAC/DmF,UAAU,0BAK1BpF,EAAA9B,EAAA+B,cAAC+L,GAAA,EAAD,iBAvNCzK,IAAMC,WA0SpB+D,eAxDS,SAACvE,EAAOwE,GAC5B,IAAM8O,EAActT,EAAMuT,eAAeC,MAAMhP,EAAS9C,aACpDkR,EAAe,GACbnO,EAAczE,EAAMkC,SAASC,aAAaqC,EAAS9C,aACrDuK,EAAS,GAMb,GAJIxH,GAAezE,EAAMa,OAAOkP,SAAW/P,EAAMa,OAAOkP,QAAQtL,EAAY/I,cACxEuQ,EAASjM,EAAMa,OAAOkP,QAAQtL,EAAY/I,aAG1C4X,EAAa,CAKb,IAHA,IAAIG,EAAS,GACT1W,EAAO,GAEX2W,EAAA,EAAAC,EAA2BtU,OAAOuU,QAAQN,GAA1CI,EAAAC,EAAA7b,OAAA4b,IAAwD,KAAAG,EAAAF,EAAAD,GAAAtM,EAAA/H,OAAAyU,GAAA,EAAAzU,CAAAwU,EAAA,GAA5ClZ,EAA4CyM,EAAA,GAAvC7I,EAAuC6I,EAAA,GACxC,UAARzM,IACA8Y,EAAOM,KAAKpZ,GACZoC,EAAKgX,KAAKrc,YAAU6G,GAAOhG,QAAQ,KAGvCkb,EAAO3b,OAAS,GAAKiF,EAAKjF,OAAS,IACnC8a,EAAe,CACXa,OAAQA,EAAQO,SAAU,CACtB,CACIjX,KAAMA,EACNwS,gBAAiB,CACb,UACA,UACA,UACA,WAEJ0E,qBAAsB,CAClB,UACA,UACA,UACA,eAQxB,MAAO,CACHrE,iBAAkB5P,EAAMkC,SAAS2N,kBAAkBrL,EAAS9C,aAC5D+C,YAAazE,EAAMkC,SAASC,aAAaqC,EAAS9C,aAClDwG,SAAUlI,EAAMkC,SAASgG,SAAS1D,EAAS9C,aAC3CpG,YAAa0E,EAAMkC,SAAS4N,cAActL,EAAS9C,aACnDuK,SACA2G,iBAMgC,CACpCf,uBT5OkC,SAACnQ,EAAazG,GAAd,OAAyB,SAAA0F,GAC3DA,EAAS,CACLO,KAAMgT,IACNtS,GAAIF,EACJzG,aSyOJ+W,eTrO0B,SAACtQ,EAAa9E,GAAd,OAAuB,SAAA+D,GACjDA,EAAS,CACLO,KAAMiT,IACNvS,GAAIF,EACJ9E,WSkOJ8F,eACAF,cACAX,yBACAqQ,eTjO0B,SAACxQ,EAAapG,GAAd,OAA8B,SAAAqF,GACxDA,EAAS,CACLO,KAAMkT,IACNxS,GAAIF,EACJpG,kBS8NJiX,SClVoB,SAAC7Q,GACrB,OAAO,SAACf,EAAUqB,GAEd,IAGKtG,EAHSsG,IACYE,SAASC,aAAaT,GAE3ChG,WAEDA,IACKpB,YAAkBoB,KACnBA,EAAa3B,YAAe2B,IAIhCiF,EAAS,CACLO,KAAMmT,IACNjT,OAAQC,IACRO,GAAIF,EACJJ,QAAS,KAGb3F,IAAc+B,KAAK,mBAAoB,CAACkD,GAAIlF,IACvCsF,KAAK,SAACC,GACHN,EAAS,CACLO,KAAMmT,IACNjT,OAAQC,IACRO,GAAIF,EACJJ,QAASL,EAAIlE,QAElB,SAACkE,GACAN,EAAS,CACLO,KAAMmT,IACNjT,OAAQI,IACRI,GAAIF,EACJvD,MAAO8C,UDyShBsD,CAQZ+M,IEnUGgD,eACF,SAAAA,EAAYnV,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+U,IACflV,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiV,GAAA5U,KAAAH,KAAMJ,KACDa,MAAQ,CACTuU,eAAgB,IAGpBnV,EAAKmO,iBAAmBnO,EAAKmO,iBAAiBrD,KAAtB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IACxBA,EAAKiO,iBAAmBjO,EAAKiO,iBAAiBnD,KAAtB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IAPTA,gFAWF1D,GACb6D,KAAKM,SAAS,CAAC0U,eAAgB7Y,6CAGlB4R,EAAelS,EAAOgS,GAAU,IACtC1R,EAAc6D,KAAKJ,MAAMsF,YAAzB/I,WAEH6R,EAAmB,GACnBF,EAAmB,GAEnBD,GACAG,EAAmBxT,YAAe2B,GAAc4R,EAChDD,EAAmB,IAEZjS,IACPmS,EAAmB7R,EACnB2R,EAAmBC,GAEvB/N,KAAKJ,MAAMsC,WAAWlC,KAAKJ,MAAMuC,YAAa6L,EAAkBF,oCAG3D,IAGE3R,EAAc6D,KAAKJ,MAAMsF,YAAzB/I,WACAgG,EAAenC,KAAKJ,MAApBuC,YAED8S,EAAc9Y,GAA6B,KAAfA,EAElC,OACIsD,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KAGIvI,EAAA9B,EAAA+B,cAACwJ,EAAA,EAAD,KACIzJ,EAAA9B,EAAA+B,cAACwV,EAAA,EAAD,gBACAzV,EAAA9B,EAAA+B,cAACyJ,EAAA,EAAD,KAGI1J,EAAA9B,EAAA+B,cAACyV,EAAD,CACIhZ,WAAYA,EACZgG,YAAaA,MAOxB8S,GAAexV,EAAA9B,EAAA+B,cAACwJ,EAAA,EAAD,KACZzJ,EAAA9B,EAAA+B,cAACwV,EAAA,EAAD,KACIzV,EAAA9B,EAAA+B,cAAC0V,GAAD,CAAgBjT,YAAaA,KAEjC1C,EAAA9B,EAAA+B,cAACyJ,EAAA,EAAD,KACI1J,EAAA9B,EAAA+B,cAAC2V,GAAD,CAAezF,OAAQ,SACnBnQ,EAAA9B,EAAA+B,cAAC4V,GAAD,CAAWnT,YAAaA,eAjEvBnB,IAAMC,WA8HnC8T,GAAehQ,aA1BM,GA4BNC,mBA1BS,SAACvE,EAAOwE,GAE5B,IAAMC,EAAczE,EAAMkC,SAASC,aAAaqC,EAAS9C,aACrDuK,EAAS,GAENvQ,EAAc+I,EAAd/I,WAEP,GAAI+I,GAAezE,EAAMa,OAAOkP,QAAS,CAErC,IAAMC,EAAiBtU,EAAW6B,MAAM,KAAK,GACzCyC,EAAMa,OAAOkP,QAAQC,KAErB/D,EAASjM,EAAMa,OAAOkP,QAAQC,IAEtC,MAAO,CACHD,QAAS/P,EAAMa,OAAOkP,QACtBvM,SAAUxD,EAAMa,OAAO2C,SACvBrF,MAAO6B,EAAMa,OAAO1C,MACpBsG,YAAazE,EAAMkC,SAASC,aAAaqC,EAAS9C,aAClDuK,WASJ,CACI7J,aAAYX,aACZK,mBAAkBgT,iBXtGM,SAACpT,EAAahB,GAC1C,OAAO,SAACC,GACJA,EAAS,CACLO,KAAM6T,IACNnT,GAAIF,EACJhB,WAAYA,IAEhBC,EAASkB,EAAuBH,MW+FIY,aACpCI,eAAcF,eALP+B,CAOb+P,cC/IF,SAASU,GAATpV,GAGI,IAHgC,IAAPqV,EAAOrV,EAAPqV,KACrBC,EAAkB,GAChBC,EAAS,GAAKF,EACXhd,EAAI,EAAGA,EAAIgd,EAAMhd,IAEtBid,EAAgBnB,KACZ/U,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIoR,GAAID,EAAQlR,GAAIkR,EAAQxa,IAAK1C,GAC9C+G,EAAA9B,EAAA+B,cAACoW,GAAD,CAAgB3T,YAAazJ,EAAEqd,eAI3C,OAAOJ,MAGLK,eAGF,SAAAA,EAAYpW,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgW,IACfnW,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkW,GAAA7V,KAAAH,KAAMJ,KACDa,MAAQ,CACTiV,KAAM,GAGV7V,EAAKD,MAAMiD,WAAW,KACtBhD,EAAKoW,aAAepW,EAAKoW,aAAatL,KAAlB7K,OAAA8K,EAAA,EAAA9K,CAAAD,IAPLA,4EAUNqW,EAAK7Y,GAAM,IAAAqD,EACaV,KAAKJ,MAA/BuW,EADazV,EACbyV,WAAYtT,EADCnC,EACDmC,WAEN,SAATxF,GAEA2C,KAAKM,SAAS,SAAC8N,GACX,IAAK,IAAI1V,EAAI,EAAGA,EAAIwd,EAAKxd,MAChByd,EAAWzd,EAAEqd,aAAerd,EAAI,EAAI0V,EAAUsH,OAC/C7S,EAAWnK,EAAEqd,YAErB,MAAO,CACHL,KAAMQ,sCAOb,IAAApS,EAAA9D,KAGE0V,EAAQ1V,KAAKS,MAAbiV,KACAS,EAAcnW,KAAKJ,MAAnBuW,WAEP,OACI1W,EAAA9B,EAAA+B,cAACD,EAAA9B,EAAMqK,SAAP,KACIvI,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,CAAKO,UAAW,oBAAqBuG,YAAU,wBAC3C3L,EAAA9B,EAAA+B,cAAC6E,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,IACbjF,EAAA9B,EAAA+B,cAACwJ,EAAA,EAAD,KACIzJ,EAAA9B,EAAA+B,cAACwV,EAAA,EAAD,sBAGAzV,EAAA9B,EAAA+B,cAACyJ,EAAA,EAAD,KACI1J,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7ByD,QAAS,kBAAMxE,EAAKmS,aAAa,EAAG,UAD5C,oBAEAxW,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7ByD,QAAS,kBAAMxE,EAAKmS,aAAa,EAAG,UAD5C,oBAEAxW,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7ByD,QAAS,kBAAMxE,EAAKmS,aAAa,EAAG,UAD5C,oBAEAxW,EAAA9B,EAAA+B,cAACkF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7ByD,QAAS,kBAAMxE,EAAKmS,aAAa,EAAG,UAD5C,wBAQhBxW,EAAA9B,EAAA+B,cAAC4E,EAAA,EAAD,KACI7E,EAAA9B,EAAA+B,cAAC+V,GAAD,CAAoBC,KAAMA,EAAMS,WAAYA,aA7D7BnV,IAAMC,WAgF1BmP,uBACXpL,YAXoB,SAACvE,GAAD,MAAY,CAChC0V,WAAY1V,EAAMkC,SAASwT,aAUF,CAACtT,eAC1BuT,YAAgBC,MAFLjG,CAGb4F","file":"static/js/19.d8fda250.chunk.js","sourcesContent":["export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToKB(bytes) {\n    if (bytes === 0) return 0;\n    const kb = bytes / 1024;\n\n    return kb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import axios from \"axios\";\nimport {isLocalRemoteName} from \"../Tools\";\n\n// Global level axios configuration. These settings are automatically used in other places by using an axiosInstance instead of axios directly\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n/**\n * Helper Method for moving a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\n/**\n * Helper Method for copying a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\n/**\n * Perform the actual copying/ moving of a file/directory.\n * @access private\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @param mode      {string}    Determines whether to copy or move. Allowed values: \"copy\", \"move\".\n * @returns         {Promise<AxiosResponse<T>>}\n */\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n\n    if (isLocalRemoteName(srcFs)) {\n        srcFs = \"\";\n    }\n\n    if (isLocalRemoteName(dstFs)) {\n        dstFs = \"\";\n    }\n\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n        console.log(\"DirOp:\", data);\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote,\n            _async: true\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\n\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={4}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName, remotePath: props.remotePath\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    // if (component.props.canCopy) {\n                    let res = await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    console.log(\"Copy\", res);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory copying started in background: ${Name}`);\n                    } else {\n                        toast.info(`File copying started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support copying\");\n                    // }\n\n                } else {\n                    // if (component.props.canMove) {\n                    await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    } else {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support moving\");\n                    // }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item, linkShareHandle}) {\n\n    const {IsDir} = item;\n\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <React.Fragment>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    render() {\n        const {item, clickHandler, downloadHandle, linkShareHandle, deleteHandle, connectDragSource, gridMode, itemIdx/*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n        // console.log(\"item\", item);\n\n        let modTime = new Date(Date.parse(ModTime));\n        // console.log(\"card\", gridMode);\n\n        if (gridMode === \"card\") {\n            return connectDragSource(\n                <div className={\"col-lg-3\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n                            <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                     deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            return connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td className=\"d-none d-md-table-cell\"><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)} id={\"file\" + itemIdx}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n\n                        {/*<UncontrolledTooltip target={\"file\"+itemIdx} placement=\"right\">*/}\n                        {/*    <p><strong>Mime Type: </strong>{MimeType}</p>*/}\n                        {/*    <p><strong>Path: </strong>{Path}</p>*/}\n                        {/*</UncontrolledTooltip>*/}\n                    </td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td className=\"d-none d-md-table-cell\">{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                 deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    linkShareHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n\n};\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);\n","import React from \"react\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass LinkShareModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copySuccess: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    copyToClipboard = () => {\n        let textField = document.createElement('textarea');\n        textField.innerText = this.props.linkUrl;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    };\n\n    handleFocus = (event) => event.target.select();\n\n    render() {\n        const {isVisible, linkUrl} = this.props;\n        const {copySuccess} = this.state;\n        let isCopyAllowed = (document && document.queryCommandSupported) ? document.queryCommandSupported('copy') : true;\n\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Public link generated.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        <Input readOnly value={linkUrl} onFocus={this.handleFocus}/>\n                        {\n\n                            /* Logical shortcut for only displaying the\n                               button if the copy command exists */\n                            isCopyAllowed &&\n                            <div>\n                                <Button color=\"link\" onClick={this.copyToClipboard}><i\n                                    className=\"fa fa-clipboard fa-2x\"/></Button>\n                            </div>\n                        }\n                        {copySuccess}\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLinkShareModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    linkUrl: PropTypes.string.isRequired\n};\nLinkShareModal.defaultProps = {\n    isVisible: true,\n};\n\nexport default LinkShareModal;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Spinner, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport isEmpty, {addColonAtLast, changeListVisibility, changeSearchFilter} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\nimport LinkShareModal from \"../../Base/LinkShareModal/LinkShareModal\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    },\n    canDrop(props, monitor) {\n        const {remoteName, remotePath} = monitor.getItem();\n        console.log(remoteName, props.currentPath.remoteName, remotePath, props.currentPath.remotePath);\n        const destRemoteName = props.currentPath.remoteName;\n        const destRemotePath = props.currentPath.remotePath;\n        if (destRemoteName === remoteName) {\n            return destRemotePath !== remotePath;\n        }\n        return true;\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td colSpan={1}/>\n                <td colSpan={4}><i className={\"fa fa-file-o\"}/> Go Up...</td>\n            </tr>);\n    }\n}\n\n/**\n * FilesView component renders files in the file explorer.\n */\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n            showLinkShareModal: false,\n            generatedLink: \"\",\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n    closeLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: false\n        })\n    };\n\n    showLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: true\n\n        })\n    };\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    linkShareHandle = (item) => {\n        const {fsInfo} = this.props;\n        if (fsInfo.Features.PublicLink) {\n            console.log(\"Sharing link\" + item.Name);\n            const {remoteName} = this.props.currentPath;\n            axiosInstance.post(\"operations/publiclink\", {\n                fs: addColonAtLast(remoteName),\n                remote: item.Path\n            }).then((res) => {\n                // console.log(\"Public Link: \" + res.data.url);\n\n                this.setState({\n                    generatedLink: res.data.url,\n                    showLinkShareModal: true\n                })\n            }, (error) => {\n                toast.error(\"Error Generating link: \" + error)\n            })\n        } else {\n            toast.error(\"This remote does not support public link\");\n        }\n\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo} = this.props;\n        const {remoteName, remotePath} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} remotePath={remotePath} gridMode={gridMode}\n                                           containerID={containerID}\n                                           linkShareHandle={this.linkShareHandle}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move} itemIdx={idx}\n                            />\n                        </React.Fragment>\n                    )\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems, generatedLink, showLinkShareModal} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode, canDrop} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><Spinner color=\"primary\"/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table className=\"table-responsive-sm\">\n                            <thead>\n                            <tr>\n                                <th className=\"d-none d-md-table-cell\">x</th>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th className=\"d-none d-md-table-cell\">Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td colSpan={1} className=\"d-none d-md-block\"/>\n                                            <th colSpan={4}>Directories</th>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td className=\"d-none d-md-table-cell\"/>\n                                            <th>Files</th>\n                                            <td className=\"d-none d-md-table-cell\"/>\n                                            <td/>\n                                            <td/>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td colSpan={1} className=\"d-none d-md-table-cell\"/>\n                                    <th colSpan={4}>Files</th>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && canDrop && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n                    <LinkShareModal closeModal={this.closeLinkShareModal} isVisible={showLinkShareModal}\n                                    linkUrl={generatedLink}/>\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        // Filter according to visibility filters\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n\n        //Filter according to search query, if ny\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`);\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","export const visibilityFilteringOptions = [\"Images\", \"Pdf\", \"Videos\"];","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row,\n    Spinner\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport isEmpty, {addColonAtLast, bytesToGB, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CanHaveEmptyDirectories) {\n            this.setState({newFolderModalIsVisible: true});\n        } else {\n            toast.error(\"This remote cannot have empty directories\");\n        }\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.About) {\n            this.setState((prevState) => {\n                return {\n                    isAboutModalOpen: !prevState.isAboutModalOpen\n                }\n            }, () => {\n                if (this.state.isAboutModalOpen) {\n                    const {containerID} = this.props;\n                    this.props.getAbout(containerID);\n                }\n            });\n        } else {\n            toast.error(\"This remote does not support About\");\n        }\n\n    };\n\n    handleCleanTrash = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n\n            if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n                const {currentPath, containerID} = this.props;\n                let {remoteName} = currentPath;\n\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(\"operations/cleanup\", {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            }\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this remote\");\n        }\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Grid</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData && !isEmpty(doughnutData) ? <Doughnut data={doughnutData}/> :\n                                                <React.Fragment><Spinner color=\"primary\"/>Loading</React.Fragment>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    containerID: PropTypes.string.isRequired,\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    visibilityFilter: PropTypes.string,\n    gridMode: PropTypes.string,\n    setSearchQuery: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string,\n    remoteAbout: PropTypes.object,\n    fsInfo: PropTypes.object.isRequired,\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        if (labels.length > 1 && data.length > 1) {\n            doughnutData = {\n                labels: labels, datasets: [\n                    {\n                        data: data,\n                        backgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                        hoverBackgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                    }\n                ]\n            };\n        }\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>}\n\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n\n            this.setState((prevState) => {\n                for (let i = 0; i < nos; i++) {\n                    if (!backStacks[i.toString()] || i + 1 > prevState.cols)\n                        createPath(i.toString())\n                }\n                return {\n                    cols: nos\n                }\n            });\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}