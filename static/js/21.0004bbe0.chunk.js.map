{"version":3,"sources":["utils/RclonePropTypes.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerStateActions.js","actions/explorerActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/VideoPlayer/VideoPlayer.js","views/Base/ImageLoader/ImageLoader.js","actions/imagesActions.js","views/Base/MediaWidget/MediaWidget.js","views/Explorer/FilesView/FileComponent.js","views/Base/LinkShareModal/LinkShareModal.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Explorer/FilesView/FilesView.js","views/Base/NewFolder/NewFolder.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["prop_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","bytesPerSecond","rate","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","changePath","containerID","dispatch","type","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","getFiles","createPath","CREATE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","data","fs","indexOf","addColonAtLast","remote","path","concat","axiosInstance","post","then","res","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","list","error","REQUEST_ERROR","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","isEmpty","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","setRemoteName","isLocalRemoteName","split","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","VideoPlayer","element","playbackURL","_useState","useState","_useState2","slicedToArray","preview","setPreview","hideFull","e","stopPropagation","data-test","onClick","ReactDOM","Modal","isOpen","toggle","controls","width","src","document","getElementById","MODAL_ROOT_ELEMENT","ErrorBoundary","downloadURL","imageData","imageLoader","downloadImage","url","Error","LOAD_IMAGE","REQUEST_LOADING","get","responseType","console","log","imgFile","Blob","imgUrl","URL","createObjectURL","err","inViewport","_useState3","_useState4","rotateAngle","setRotateAngle","useEffect","isLoading","Spinner","alt","externalCloseBtn","style","position","top","right","external","Container","fluid","Card","CardHeader","CardBody","isMedia","image/jpeg","video/mp4","MediaWidget","getRenderForItem","fsInfo","item","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","BucketBased","ImageLoader_ImageLoader","VideoPlayer_VideoPlayer","_this$props2","loadMedia","loadImages","configs","tempRemoteName","_callee","params","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","regenerator_default","wrap","_context","prev","next","performCopyFile","sent","toast","info","performMoveFile","stop","fileComponentSource","canDrag","beginDrag","_props$item","endDrag","monitor","component","getDropResult","performCopyMoveOperation","response","JSON","stringify","autoClose","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","linkShareHandle","Fragment","UncontrolledButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","header","divider","FileComponent","clickHandler","connectDragSource","gridMode","itemIdx","modTime","Date","parse","Base_MediaWidget_MediaWidget","CardFooter","formatBytes","toLocaleDateString","MyViewPort","handleViewport","rootMargin","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","LinkShareModal","copyToClipboard","textField","innerText","linkUrl","body","appendChild","select","execCommand","remove","handleFocus","target","copySuccess","bind","assertThisInitialized","closeModal","isVisible","isCopyAllowed","queryCommandSupported","ModalHeader","ModalBody","Input","readOnly","onFocus","ModalFooter","ScrollableDiv","height","children","overflow","filesTarget","drop","didDrop","_monitor$getItem","canDrop","_monitor$getItem2","UpButtonComponent","upButtonHandle","colSpan","FilesView","closeLinkShareModal","showLinkShareModal","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","PublicLink","generatedLink","getFileComponents","isDir","files","_this$props$currentPa2","map","idx","ID","undefined","key","FilesView_FileComponent","handleFileClick","isBucketBased","canCopy","Copy","canMove","Move","downloadingItems","shouldUpdate","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","arguments","_this$props$currentPa3","downloadUrl","prevState","method","link","href","setAttribute","click","_context2","t0","connectDropTarget","isOver","dirComponentMap","fileComponentMap","renderElement","ScrollableDiv_ScrollableDiv","FILES_VIEW_HEIGHT","Table","left","zIndex","opacity","backgroundColor","Alert","Base_LinkShareModal_LinkShareModal","PureComponent","compose","visibilityFilter","visibilityFilters","searchQuery","searchQueries","pathKey","changeListVisibility","changeSearchFilter","DropTarget","dropTarget","NewFolder","disableForm","shouldDisable","changeName","name","createNewFolder","handleSubmit","preventDefault","FormGroup","row","Label","for","required","autoFocus","disabled","FileOperations","openNewFolderModal","CanHaveEmptyDirectories","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","About","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","changeLoadImages","setLoadImages","filterOptions","visibilityFilteringOptions","_this$props3","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","caret","checked","Base_NewFolder_NewFolder","react_chartjs_2_es","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","push","bytesToGB","toFixed","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","mode","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","shouldLoad","CHANGE_LOAD_IMAGES","RemoteExplorer","remoteNameTemp","distractionFreeMode","isValidPath","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","i","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","changeNumCols","toggleDistractionFreeMode","changeDistractionFreeMode","numCols","backStacks","CHANGE_LAYOUT_COLS","shouldEnable","CHANGE_DISTRACTION_FREE_MODE","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/21.0004bbe0.chunk.js","sourcesContent":["import * as PropTypes from \"prop-types\";\n\nexport const PROP_FS_INFO = PropTypes.oneOfType([\n    PropTypes.shape({\n        Features: PropTypes.object.isRequired,\n        Hashes: PropTypes.array.isRequired,\n        Name: PropTypes.string.isRequired,\n        Precision: PropTypes.number.isRequired,\n        String: PropTypes.string.isRequired\n    }),\n    PropTypes.object\n]);\n\nexport const PROP_CURRENT_PATH = PropTypes.shape({\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired\n});\n\nexport const PROP_CONTAINER_ID = PropTypes.string;\n\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\n\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\n\nexport const PROP_ITEM = PropTypes.shape({\n\n    Path: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    Size: PropTypes.number,\n    MimeType: PropTypes.string,\n    ModTime: PropTypes.string.isRequired,\n    IsDir: PropTypes.bool.isRequired\n\n});\n\nexport const PROP_BANDWIDTH = PropTypes.shape({\n    bytesPerSecond: PropTypes.number.isRequired,\n    rate: PropTypes.string.isRequired\n\n});","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import {\n    CHANGE_GRID_MODE,\n    CHANGE_LOAD_IMAGES,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\n/**\n * Changes the current path of a container using container ID\n * @param containerID {string}\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\n * @returns {Function}\n */\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Changes the current remote name for a particular container id\n * @param containerID {string}\n * @param remoteName {string}\n * @returns {Function}\n */\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Issues a request to fetch the files in the current path of a container using container id.\n * @param containerID\n * @returns {Function}\n */\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\n/**\n * Changes the current remote path for a container ID without changing the remote name.\n * @param containerID {string}\n * @param remotePath {string}\n * @returns {Function}\n */\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Computes and requests the path for going one level up in the working directory.\n * Eg: /tmp/abc -> navigateUp -> /tmp\n * @param containerID\n * @returns {Function}\n */\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Navigates one stack entry up.\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\n * @param containerID {string}\n * @returns {Function}\n */\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n\n/**\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\n * Also requests for files in the new path\n * @param containerID\n * @returns {Function}\n */\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\n * @param containerID\n * @param filter {string}\n * @returns {Function}\n */\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\n/**\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\n * @param containerID\n * @param mode {string}\n * @returns {Function}\n */\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\n/**\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\n * @param containerID\n * @param searchQuery\n * @returns {Function}\n */\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\nexport const setLoadImages = (containerID, shouldLoad) => dispatch => {\n    dispatch({\n        type: CHANGE_LOAD_IMAGES,\n        id: containerID,\n        payload: shouldLoad\n    })\n};\n\n","import axiosInstance from \"../utils/API/API\";\nimport {\n    CHANGE_DISTRACTION_FREE_MODE,\n    CHANGE_LAYOUT_COLS,\n    GET_CONFIG_FOR_REMOTE,\n    GET_FILES_LIST,\n    GET_REMOTE_LIST,\n    REQUEST_ERROR,\n    REQUEST_SUCCESS\n} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {createPath} from \"./explorerStateActions\";\n\n/**\n * Gets the information regarding features, hashes from the rclone backend.\n * @param remoteName {string} The name of the remote\n * @returns {Function}\n */\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\n/**\n * Get only remote names from the rclone backend.\n * @returns {Function}\n */\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n/**\n * Gets the files for a specified remote path (remoteName + remotePath).\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote\n * @returns {Function}\n */\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n/**\n * Changes the number of columns in current layout view.\n * @param numCols       {number} Number of columns to create\n * @returns {Function}\n */\nexport const changeNumCols = (numCols) => (dispatch) => {\n    if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);\n\n\n    for (let i = 0; i < numCols; i++) {\n        dispatch(createPath(i.toString()))\n    }\n\n    dispatch({\n        type: CHANGE_LAYOUT_COLS,\n        payload: {\n            numCols\n        }\n    })\n};\n\n/**\n * Enter or exit distraction free mode\n * @param shouldEnable  {boolean} Enable or disable distraction free mode.\n * @returns {Function}\n */\nexport const changeDistractionFreeMode = (shouldEnable) => dispatch => {\n    dispatch({\n        type: CHANGE_DISTRACTION_FREE_MODE,\n        payload: shouldEnable\n    })\n};\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\nimport {PROP_CURRENT_PATH} from \"../../../utils/RclonePropTypes\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={4}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PROP_CURRENT_PATH\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React, {useState} from \"react\";\nimport {Button, Modal} from \"reactstrap\";\nimport * as ReactDOM from \"react-dom\";\nimport {MODAL_ROOT_ELEMENT} from \"../../utils/Constants\";\nimport * as PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../ErrorHandling/ErrorBoundary\";\n\nfunction VideoPlayer({playbackURL, MimeType}) {\n\n    const [preview, setPreview] = useState(true);\n\n    function hideFull(e) {\n        e.stopPropagation();\n        setPreview(!preview);\n\n    }\n\n    let element;\n    if (preview) {\n        element = (\n            <div className=\"img-thumbnail w-100 text-center\" data-test=\"videoPlayerWidget\">\n                <Button color=\"link\" onClick={hideFull}>\n                    <i className=\"fa fa-play-circle fa-4x\"/>\n                </Button>\n            </div>\n        )\n    } else {\n\n        // Load the video\n\n\n        element = ReactDOM.createPortal((\n            <Modal className=\"task-modal d-none d-sm-block\" data-test=\"videoPlayerWidget\" isOpen={!preview}\n                   toggle={hideFull}>\n\n                <video controls width=\"600\">\n                    <source src={playbackURL} type={MimeType}/>\n                </video>\n\n            </Modal>\n        ), document.getElementById(MODAL_ROOT_ELEMENT));\n    }\n\n    return (\n        <ErrorBoundary>\n            {element}\n        </ErrorBoundary>\n    )\n\n\n}\n\nVideoPlayer.propTypes = {\n    playbackURL: PropTypes.string.isRequired,\n    MimeType: PropTypes.string.isRequired\n};\n\nexport default VideoPlayer;","import React, {useEffect, useState} from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Container, Modal, Row, Spinner} from \"reactstrap\";\nimport * as ReactDOM from \"react-dom\";\nimport {MODAL_ROOT_ELEMENT} from \"../../../utils/Constants\";\nimport {connect} from \"react-redux\";\nimport {downloadImage} from \"../../../actions/imagesActions\";\n\nfunction ImageLoader({downloadURL, inViewport, imageData, downloadImage, currentPath}) {\n\n    const [preview, setPreview] = useState(true);\n    const [rotateAngle, setRotateAngle] = useState(0);\n\n\n    useEffect(() => {\n        if (inViewport && downloadURL && !imageData) {\n            downloadImage(downloadURL);\n        }\n    });\n\n\n    function hideFull(e) {\n        e.stopPropagation();\n        setPreview(!preview);\n    }\n\n    function rotateLeft() {\n        if (rotateAngle > 0)\n            setRotateAngle((rotateAngle - 90) % 360);\n        else\n            setRotateAngle((360 - rotateAngle - 90) % 360);\n    }\n\n    function rotateRight() {\n        setRotateAngle((rotateAngle + 90) % 360);\n    }\n\n    if (preview) {\n        return (\n            <div onClick={hideFull} data-test=\"toggleModal\">\n\n                {\n                    !imageData || imageData.isLoading ? <Spinner>Loading...</Spinner> :\n                        <img className=\"img-thumbnail pd-0 m-0 -rotate-90\" src={imageData.data} alt=\"\"/>\n                }\n            </div>\n        );\n    } else {\n\n        // Load the Image\n\n        const externalCloseBtn = <button className=\"close\" style={{position: 'absolute', top: '15px', right: '15px'}}\n                                         onClick={hideFull}><i className=\"fa fa-close fa-inverse\"/></button>;\n\n\n        return ReactDOM.createPortal((\n            <Modal className=\"image-modal\" isOpen={!preview} toggle={hideFull} external={externalCloseBtn}>\n\n                <Container fluid={true}>\n                    <Row>\n                        <Col lg={8}>\n                            <img\n                                className={\"rotatableImage img-thumbnail pd-0 m-0 \" + (rotateAngle !== 0 ? \"rotate\" + rotateAngle : \"\")}\n                                src={imageData.data} alt=\"\"/>\n                        </Col>\n                        <Col lg={4}>\n                            <Card>\n                                <CardHeader>\n                                    Operations\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Button color=\"link\" onClick={rotateLeft}>\n                                            <i className=\"fa fa-rotate-left\"/>\n                                        </Button>\n\n                                        <Button color=\"link\" onClick={rotateRight}>\n                                            <i className=\"fa fa-rotate-right\"/>\n                                        </Button>\n                                    </Row>\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n\n                    </Row>\n                </Container>\n\n\n            </Modal>\n        ), document.getElementById(MODAL_ROOT_ELEMENT));\n    }\n\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {downloadURL} = ownProps;\n\n    return {\n        imageData: state.imageLoader[downloadURL]\n    }\n};\n\nexport default connect(mapStateToProps, {downloadImage})(ImageLoader);","import {LOAD_IMAGE, REQUEST_ERROR, REQUEST_LOADING, REQUEST_SUCCESS} from \"./types\";\nimport axiosInstance from \"../utils/API/API\";\n\nexport const downloadImage = (url) => dispatch => {\n    if (!url) throw new Error(\"Cannot have null url\");\n    dispatch({\n        type: LOAD_IMAGE,\n        status: REQUEST_LOADING,\n        payload: {\n            url\n        }\n    });\n\n    axiosInstance.get(url, {\n        responseType: 'arraybuffer'\n    }).then((res) => {\n        console.log(res);\n        const imgFile = new Blob([res.data]);\n        const imgUrl = URL.createObjectURL(imgFile);\n        dispatch({\n            type: LOAD_IMAGE,\n            status: REQUEST_SUCCESS,\n            payload: {\n                url,\n                data: imgUrl\n            }\n        })\n    }, (err) => {\n        dispatch({\n            type: LOAD_IMAGE,\n            status: REQUEST_ERROR,\n            payload: {\n                url,\n                error: err\n            }\n        })\n    });\n};","import React from 'react';\nimport * as PropTypes from \"prop-types\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport VideoPlayer from \"../../VideoPlayer/VideoPlayer\";\nimport {IP_ADDRESS_KEY} from \"../../../utils/Constants\";\nimport {connect} from \"react-redux\";\nimport ImageLoader from \"../ImageLoader/ImageLoader\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\nexport function isMedia(MimeType) {\n    const mimeTypes = {\n        \"image/jpeg\": \"Image\",\n        \"video/mp4\": \"Video\"\n    };\n    return mimeTypes[MimeType];\n}\n\nclass MediaWidget extends React.Component {\n\n\n    getRenderForItem = () => {\n        const {fsInfo, item, inViewport, currentPath} = this.props;\n        const {remoteName, remotePath} = currentPath;\n        const {MimeType} = item;\n\n        let downloadURL = \"\";\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n\n\n        if (fsInfo.Features.BucketBased) {\n            downloadURL = ipAddress + `[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n\n            downloadURL = ipAddress + `[${remoteName}:${remotePath}]/${item.Name}`;\n\n        }\n\n        switch (MimeType) {\n\n\n            case \"image/jpeg\":\n                return (<ImageLoader item={item} downloadURL={downloadURL} inViewport={inViewport}/>);\n            case \"video/mp4\":\n                return (<VideoPlayer playbackURL={downloadURL} MimeType={MimeType} currentPath={currentPath}/>);\n\n            default:\n                return null;\n\n        }\n    };\n\n\n    render() {\n        const {loadMedia, item} = this.props;\n        const {MimeType} = item;\n\n        let element = isMedia(MimeType) && loadMedia ? (\n            this.getRenderForItem()\n        ) : null;\n        return (\n            <ErrorBoundary>\n                {element}\n            </ErrorBoundary>\n        );\n    }\n}\n\nMediaWidget.propTypes = {\n    /**\n     * Load or skip loading any media\n     */\n    loadMedia: PropTypes.bool.isRequired,\n    /**\n     * Item: Contains the referenced item\n     */\n    item: PropTypes.object.isRequired,\n    /**\n     * FS Information\n     */\n    fsInfo: PROP_FS_INFO.isRequired,\n    /**\n     * Current Path\n     */\n    currentPath: PROP_CURRENT_PATH.isRequired,\n    /**\n     * Container ID\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * InViewPort tells whether the component is in the user's view\n     */\n    inViewport: PropTypes.bool.isRequired\n\n\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const loadMedia = state.explorer.loadImages[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        currentPath,\n        fsInfo,\n        loadMedia\n    }\n};\n\nexport default connect(mapStateToProps, {})(MediaWidget);\n\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from \"prop-types\";\nimport handleViewport from 'react-in-viewport';\nimport MediaWidget, {isMedia} from \"../../Base/MediaWidget/MediaWidget\";\nimport {PROP_ITEM} from \"../../../utils/RclonePropTypes\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\nasync function performCopyMoveOperation(params) {\n    const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = params;\n    if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n        // if (component.props.canCopy) {\n        let res = await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n        console.log(\"Copy\", res);\n        updateHandler();\n        if (IsDir) {\n            toast.info(`Directory copying started in background: ${Name}`);\n        } else {\n            toast.info(`File copying started in background: ${Name}`);\n        }\n        // } else {\n        //     toast.error(\"This remote does not support copying\");\n        // }\n\n    } else {\n        // if (component.props.canMove) {\n        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n        updateHandler();\n        if (IsDir) {\n            toast.info(`Directory moving started in background: ${Name}`);\n        } else {\n            toast.info(`Directory moving started in background: ${Name}`);\n        }\n        // } else {\n        //     toast.error(\"This remote does not support moving\");\n        // }\n\n    }\n}\n\n\nconst fileComponentSource = {\n    canDrag(props) {\n\n        // You can disallow drag based on props\n        return true;\n    },\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName, remotePath: props.remotePath\n        }\n    },\n\n    endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n                performCopyMoveOperation(monitor.getDropResult());\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}, ...props) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item, linkShareHandle}) {\n\n    const {IsDir} = item;\n    // let {ID, Name} = item;\n    // // Using fallback as fileName when the ID is not available (for local file system)\n    // if (ID === undefined) {\n    //     ID = Name;\n    // }\n\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\">\n                    <i className=\"fa fa-info-circle\"/>\n                </Button>\n                {/* TODO: Find a way to make this work*/}\n                {/*<UncontrolledTooltip placement=\"right\" target={\"#tooltip\"+ID}>*/}\n                {/*    {item}*/}\n                {/*</UncontrolledTooltip>*/}\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <React.Fragment>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n    render() {\n        const {containerID, inViewport, item, loadImages, clickHandler, downloadHandle, linkShareHandle, deleteHandle, connectDragSource, gridMode, itemIdx /*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n\n        let modTime = new Date(Date.parse(ModTime));\n        let element;\n        if (gridMode === \"card\") {\n            element = connectDragSource(\n                <div className={IsDir ? \"\" : \"col-md-4\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n\n                            {loadImages && isMedia(MimeType) ?\n                                <MediaWidget containerID={containerID} item={item} inViewport={inViewport}/> :\n                                <FileIcon IsDir={IsDir} MimeType={MimeType}/>\n                            }\n\n\n                            {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                     deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            element = connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td className=\"d-none d-md-table-cell\"><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)} id={\"file\" + itemIdx}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n\n\n                    </td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td className=\"d-none d-md-table-cell\">{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                 deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n        return <ErrorBoundary>\n            {element}\n        </ErrorBoundary>;\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PROP_ITEM.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    linkShareHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n    loadImages: PropTypes.bool.isRequired,\n    isBucketBased: PropTypes.bool.isRequired\n\n};\n\nconst MyViewPort = handleViewport(FileComponent, {rootMargin: '-1.0px'});\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(MyViewPort);\n","import React from \"react\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass LinkShareModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copySuccess: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    copyToClipboard = () => {\n        let textField = document.createElement('textarea');\n        textField.innerText = this.props.linkUrl;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    };\n\n    handleFocus = (event) => event.target.select();\n\n    render() {\n        const {isVisible, linkUrl} = this.props;\n        const {copySuccess} = this.state;\n        let isCopyAllowed = (document && document.queryCommandSupported) ? document.queryCommandSupported('copy') : true;\n\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Public link generated.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        <Input readOnly value={linkUrl} onFocus={this.handleFocus}/>\n                        {\n\n                            /* Logical shortcut for only displaying the\n                               button if the copy command exists */\n                            isCopyAllowed &&\n                            <div>\n                                <Button color=\"link\" onClick={this.copyToClipboard}><i\n                                    className=\"fa fa-clipboard fa-2x\"/></Button>\n                            </div>\n                        }\n                        {copySuccess}\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLinkShareModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    linkUrl: PropTypes.string.isRequired\n};\nLinkShareModal.defaultProps = {\n    isVisible: true,\n};\n\nexport default LinkShareModal;","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (\n        <div style={{overflow: \"auto\", height: height}}>\n            {children}\n        </div>)\n}\n\nexport default ScrollableDiv;\n","import React from \"react\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Spinner, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter, isEmpty} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\nimport LinkShareModal from \"../../Base/LinkShareModal/LinkShareModal\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {FILES_VIEW_HEIGHT} from \"../../../utils/Constants\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport * as PropTypes from 'prop-types';\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    },\n    canDrop(props, monitor) {\n        const {remoteName, remotePath} = monitor.getItem();\n        console.log(remoteName, props.currentPath.remoteName, remotePath, props.currentPath.remotePath);\n        const destRemoteName = props.currentPath.remoteName;\n        const destRemotePath = props.currentPath.remotePath;\n        if (destRemoteName === remoteName) {\n            return destRemotePath !== remotePath;\n        }\n        return true;\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td colSpan={1}/>\n                <td colSpan={4}><i className={\"fa fa-file-o\"}/> Go Up...</td>\n            </tr>);\n    }\n}\n\n/**\n * FilesView component renders files in the file explorer.\n */\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n            showLinkShareModal: false,\n            generatedLink: \"\",\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n    closeLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: false\n        })\n    };\n\n    showLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: true\n\n        })\n    };\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    linkShareHandle = (item) => {\n        const {fsInfo} = this.props;\n        if (fsInfo.Features.PublicLink) {\n            console.log(\"Sharing link\" + item.Name);\n            const {remoteName} = this.props.currentPath;\n            axiosInstance.post(\"operations/publiclink\", {\n                fs: addColonAtLast(remoteName),\n                remote: item.Path\n            }).then((res) => {\n                // console.log(\"Public Link: \" + res.data.url);\n\n                this.setState({\n                    generatedLink: res.data.url,\n                    showLinkShareModal: true\n                })\n            }, (error) => {\n                toast.error(\"Error Generating link: \" + error)\n            })\n        } else {\n            toast.error(\"This remote does not support public link\");\n        }\n\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo, loadImages} = this.props;\n        const {remoteName, remotePath} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} remotePath={remotePath} gridMode={gridMode}\n                                           containerID={containerID}\n                                           linkShareHandle={this.linkShareHandle}\n                                           loadImages={loadImages}\n                                           isBucketBased={fsInfo.Features.BucketBased}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move} itemIdx={idx}\n                            >\n\n                            </FileComponent>\n                        </React.Fragment>\n                    );\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems, generatedLink, showLinkShareModal} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode, canDrop} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><Spinner color=\"primary\"/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <Col lg={3}>\n                                <h3>Directories</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    {dirComponentMap}\n                                </ScrollableDiv>\n                            </Col>\n                            <Col lg={9}>\n                                <h3>Files</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    <Row>\n                                        {fileComponentMap}\n                                    </Row>\n                                </ScrollableDiv>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n\n                )\n            } else {\n\n\n                renderElement = (\n\n\n                    <Container fluid={true} className={\"pd-0\"}>\n                        <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n\n                            <Table className=\"table-responsive-sm\">\n                                <thead>\n                                <tr>\n                                    <th className=\"d-none d-md-table-cell\">x</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                    <th className=\"d-none d-md-table-cell\">Modified</th>\n                                    <th>Actions</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                                {files.length > 0 ? (\n                                        <React.Fragment>\n                                            <tr>\n                                                <td colSpan={1} className=\"d-none d-md-block\"/>\n                                                <th colSpan={4}>Directories</th>\n                                            </tr>\n                                            {dirComponentMap}\n                                            <tr>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <th>Files</th>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <td/>\n                                                <td/>\n                                            </tr>\n                                            {fileComponentMap}\n                                        </React.Fragment>\n                                    ) :\n                                    <tr>\n                                        <td colSpan={1} className=\"d-none d-md-table-cell\"/>\n                                        <th colSpan={4}>Files</th>\n                                    </tr>\n                                }\n                                </tbody>\n                            </Table>\n                        </ScrollableDiv>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && canDrop && renderOverlay()}\n                    <ErrorBoundary>\n\n                        <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                               lg={12}>\n                            Downloading {downloadingItems} file(s). Please wait.\n                        </Alert>\n\n                        {renderElement}\n\n                        <LinkShareModal closeModal={this.closeLinkShareModal} isVisible={showLinkShareModal}\n                                        linkUrl={generatedLink}/>\n                    </ErrorBoundary>\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PROP_CURRENT_PATH.isRequired,\n    fsInfo: PROP_FS_INFO,\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string,\n    loadImages: PropTypes.bool.isRequired\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n    const loadImages = state.explorer.loadImages[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        // Filter according to visibility filters\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n\n        //Filter according to search query, if ny\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery,\n        loadImages\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`);\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row,\n    Spinner\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setLoadImages,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isEmpty, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\n\n/**\n * File Operations component which handles user actions for files in the remote.( Visibility, gridmode, back, forward etc)\n */\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CanHaveEmptyDirectories) {\n            this.setState({newFolderModalIsVisible: true});\n        } else {\n            toast.error(\"This remote cannot have empty directories\");\n        }\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.About) {\n            this.setState((prevState) => {\n                return {\n                    isAboutModalOpen: !prevState.isAboutModalOpen\n                }\n            }, () => {\n                if (this.state.isAboutModalOpen) {\n                    const {containerID} = this.props;\n                    this.props.getAbout(containerID);\n                }\n            });\n        } else {\n            toast.error(\"This remote does not support About\");\n        }\n\n    };\n\n    handleCleanTrash = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n\n            if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n                const {currentPath, containerID} = this.props;\n                let {remoteName} = currentPath;\n\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(\"operations/cleanup\", {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            }\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this remote\");\n        }\n    };\n\n    changeLoadImages = (e) => {\n        e.stopPropagation();\n        // console.log(e);\n        const {setLoadImages, containerID, loadImages} = this.props;\n        setLoadImages(containerID, !loadImages);\n    };\n\n\n    render() {\n        const {containerID, loadImages, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Table</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"}\n                                               onClick={(e) => e.stopPropagation()/*Stop propagation is required to prevent parent dropdown from closing.*/}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                    {gridMode !== \"grid\" &&\n                                    <DropdownItem onClick={this.changeLoadImages}>Load Images{' '}\n\n                                        <Input id={\"loadImg\" + containerID} checked={loadImages} type=\"checkbox\"\n                                               onClick={(e) => e.stopPropagation()}\n                                               onChange={this.changeLoadImages/*Stop propagation is required to prevent parent dropdown from closing.*/}\n                                               className=\"ml-1 mr-1\">\n                                        </Input>\n                                    </DropdownItem>\n                                    }\n                                </DropdownMenu>\n\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData && !isEmpty(doughnutData) ? <Doughnut data={doughnutData}/> :\n                                                <React.Fragment><Spinner color=\"primary\"/>Loading</React.Fragment>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    /**\n     * Container ID of the current remote explorer\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * Redux function to change the visibility of images/ pdf etc.\n     */\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    /**\n     * The current visibility filter setting\n     */\n    visibilityFilter: PropTypes.string,\n    /**\n     * Render mode: Grid/Card\n     */\n    gridMode: PropTypes.string,\n    /**\n     * Redux function to set the search query as typed by user.\n     */\n    setSearchQuery: PropTypes.func.isRequired,\n    /**\n     * Currently set search Query from redux\n     */\n    searchQuery: PropTypes.string,\n    /**\n     * A map which gives the information about the remote about.\n     */\n    remoteAbout: PropTypes.object,\n    /**\n     * File system information and features about the current remote\n     */\n    fsInfo: PROP_FS_INFO,\n    /**\n     * Map of data to be passed to the doughnutChart.\n     */\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        if (labels.length > 1 && data.length > 1) {\n            doughnutData = {\n                labels: labels, datasets: [\n                    {\n                        data: data,\n                        backgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                        hoverBackgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                    }\n                ]\n            };\n        }\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        loadImages: state.explorer.loadImages[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout,\n    setLoadImages\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\n/**\n * Gets the information of a provider\n * @param containerID\n * @returns {Function}\n */\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID, distractionFreeMode} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <ErrorBoundary>\n                {/*Render remotes array*/}\n                {(!distractionFreeMode) &&\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n                    </CardBody>\n                </Card>\n                }\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <FilesView containerID={containerID}/>\n                    </CardBody>\n                </Card>}\n\n            </ErrorBoundary>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PROP_CURRENT_PATH,\n    fsInfo: PROP_FS_INFO,\n    hasError: PropTypes.bool,\n    distractionFreeMode: PropTypes.bool.isRequired\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\nimport {changeDistractionFreeMode, changeNumCols} from \"../../../actions/explorerActions\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nfunction RemoteExplorerList({cols, distractionFreeMode}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n\n                <RemoteExplorer containerID={i.toString()} distractionFreeMode={distractionFreeMode}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout = (nos, mode) => {\n        const {changeNumCols} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\" && nos !== changeNumCols) {\n            changeNumCols(nos);\n        }\n    };\n\n    componentDidMount() {\n        //Load one explorer layout\n        const {numCols, changeNumCols} = this.props;\n\n        if (numCols < 1) {\n            changeNumCols(1);\n        }\n    }\n\n    toggleDistractionFreeMode = (e) => {\n        const {distractionFreeMode, changeDistractionFreeMode} = this.props;\n        // this.setState((prevState) => ({\n        //     distractionFreeMode: !prevState.distractionFreeMode\n        // }));\n        changeDistractionFreeMode(!distractionFreeMode);\n\n    };\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {numCols, backStacks, distractionFreeMode} = this.props;\n\n        return (\n            <ErrorBoundary>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n\n                    {distractionFreeMode && <div className=\"clearfix float-right\">\n                        <Button color={\"success\"} className={\"ml-2\"}\n                                onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/></Button>\n                    </div>}\n\n                    {(!distractionFreeMode) &&\n                    <Col sm={12} lg={12}>\n                        <Card>\n\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>\n                                    1 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>\n                                    2 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>\n                                    3 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>\n                                    4 - side by side\n                                </Button>\n                                <Button color={\"success\"} className={\"ml-2\"}\n                                        onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/>\n                                </Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    }\n                </Row>\n\n\n                <Row>\n                    <RemoteExplorerList cols={numCols} backStacks={backStacks}\n                                        distractionFreeMode={distractionFreeMode}/>\n                </Row>\n\n\n            </ErrorBoundary>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n    numCols: state.remote.numCols,\n    distractionFreeMode: state.remote.distractionFreeMode\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired,\n    changeNumCols: PropTypes.func.isRequired,\n    distractionFreeMode: PropTypes.bool.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath, changeNumCols, changeDistractionFreeMode}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}