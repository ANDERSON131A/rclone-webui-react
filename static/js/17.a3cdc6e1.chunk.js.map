{"version":3,"sources":["utils/API/API.js","utils/Tools.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","utils/Constants.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","_async","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","bytesToGB","bytes","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","remoteName","getSuggestions","value","inputValue","trim","inputLength","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFiles","remotePath","dispatch","fs","remote","path","concat","then","res","type","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","REQUEST_ERROR","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_BACK","navigateFwd","NAVIGATE_FWD","navigateBack","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","fileComponentSource","beginDrag","_props$item","Path","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","getDropResult","canCopy","toast","info","canMove","t0","response","autoClose","_x","_x2","_x3","apply","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","onClick","Fragment","FileComponent","clickHandler","connectDragSource","gridMode","ModTime","Size","modTime","Date","parse","Card","CardBody","e","CardFooter","toLocaleDateString","compose","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","filesTarget","drop","didDrop","console","_monitor$getItem","UpButtonComponent","upButtonHandle","FilesView","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","getFileComponents","isDir","files","fsInfo","Features","map","ID","FilesView_FileComponent","handleFileClick","Copy","Move","isLoading","downloadingItems","shouldUpdate","bind","assertThisInitialized","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa2","downloadUrl","BucketBased","prevState","method","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","_context2","_this$props2","connectDropTarget","isOver","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","isOpen","toggle","PureComponent","visibilityFilter","visibilityFilters","searchQueries","configs","pathKey","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","target","createNewFolder","handleSubmit","preventDefault","closeModal","isVisible","Modal","data-test","ModalHeader","ModalBody","FormGroup","row","Label","for","Input","required","autoFocus","disabled","visibilityFilteringOptions","FileOperations","openNewFolderModal","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","err","filterOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","stopPropagation","Base_NewFolder_NewFolder","react_chartjs_2_es","ModalFooter","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","slicedToArray","push","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","RemoteExplorer","remoteNameTemp","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/17.a3cdc6e1.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\n\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName = \"/\";\n\n    if (!isLocalRemoteName(remoteName)) {\n        sentRemoteName = addColonAtLast(remoteName);\n    }\n    // console.log(\"Actual: \", remoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[sentRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n};\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={2}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {Button, Card, CardBody, CardFooter} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {compose} from \"redux\";\nimport PropTypes from \"prop-types\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        // console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult()) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    if (component.props.canCopy) {\n                        await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory copying started in background: ${Name}`);\n                        } else {\n                            toast.info(`File copying started in background: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support copying\");\n                    }\n\n                } else {\n                    if (component.props.canMove) {\n                        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory moving started in background: ${Name}`);\n                        } else {\n                            toast.info(`Directory moving started in background: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support moving\");\n                    }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            // console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item}) {\n\n    const {IsDir} = item;\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                    <i className={\"fa fa-remove fa-lg d-inline\"}/>\n                </Button>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                <i className={\"fa fa-remove fa-lg d-inline\"}/>\n            </Button>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    render() {\n        const {item, clickHandler, downloadHandle, deleteHandle, connectDragSource, gridMode/*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n        let modTime = new Date(Date.parse(ModTime));\n        // console.log(\"card\", gridMode);\n\n        if (gridMode === \"card\") {\n            return connectDragSource(\n                <div className={\"col-lg-3\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n                            <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            return connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)}><FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}</td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td>{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n\n}\n\nexport default compose(\n    // connect(\n    //     null, {}\n    // ),\n    DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)\n)(FileComponent)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td></td>\n                <td><i className={\"fa fa-file-o\"}/> Go Up...</td>\n                <td></td>\n                <td></td>\n                <td></td>\n            </tr>);\n    }\n}\n\n\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        if (fsInfo && fsInfo.Features) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} gridMode={gridMode} containerID={containerID}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move}\n                            />\n                        </React.Fragment>\n                    )\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><i className={\"fa fa-circle-o-notch fa-lg\"}/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table>\n                            <thead>\n                            <tr>\n                                <th></th>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th>Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td></td>\n                                            <th>Directories</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td></td>\n                                            <th>Files</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td></td>\n                                    <td>No files</td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n\n\n\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n    // console.log(\"Query:\", currentPath.remoteName);\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`)\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","export const visibilityFilteringOptions = [\"Images\", \"Pdf\", \"Videos\"];","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: true});\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        this.setState((prevState) => {\n            return {\n                isAboutModalOpen: !prevState.isAboutModalOpen\n            }\n        }, () => {\n            if (this.state.isAboutModalOpen) {\n                const {containerID} = this.props;\n                this.props.getAbout(containerID);\n            }\n        });\n\n    };\n\n    handleCleanTrash = () => {\n\n        const {currentPath, containerID, fsInfo} = this.props;\n        let {remoteName} = currentPath;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            axiosInstance.post(\"operations/cleanup\", {\n                fs: remoteName\n            }).then((res) => {\n                    if (res.status === 200) {\n                        toast('Trash Cleaned');\n                        this.props.getAbout(containerID);\n\n                    }\n                },\n                (err) => {\n                    toast.error(\"Error clearing trash\");\n                }\n            )\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this drive\");\n        }\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        // const pathBreadCrumbs = remotePath.split('/');\n        // pathBreadCrumbs.map((item, idx) => {\n        //     return (<li key={idx}\n        //                 className={[\"breadcrumb-item \", idx === pathBreadCrumbs.length ? \"active\" : \"\"]}>{item}</li>)\n        // });\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Grid</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <p>Space Usage (in GB)</p>\n                                        {doughnutData ? <Doughnut data={doughnutData}/> : <p>Loading</p>}\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    containerID: PropTypes.string.isRequired,\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    visibilityFilter: PropTypes.string,\n    gridMode: PropTypes.string,\n    setSearchQuery: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string,\n    remoteAbout: PropTypes.object,\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        doughnutData = {\n            labels: labels, datasets: [\n                {\n                    data: data,\n                    backgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                    hoverBackgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                }\n            ]\n        };\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>}\n\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n            for (let i = 0; i < nos; i++) {\n                if (!backStacks[i.toString()])\n                    createPath(i.toString())\n            }\n            this.setState({cols: nos});\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}