{"version":3,"sources":["utils/API/API.js","utils/Tools.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","utils/Constants.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","_async","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","bytesToMB","bytes","bytesToGB","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","remoteName","getSuggestions","value","inputValue","trim","inputLength","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFiles","remotePath","dispatch","fs","remote","path","concat","then","res","type","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","REQUEST_ERROR","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_BACK","navigateFwd","NAVIGATE_FWD","navigateBack","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","setRemoteName","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","fileComponentSource","beginDrag","_props$item","Path","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","console","getDropResult","toast","info","t0","response","JSON","stringify","autoClose","_x","_x2","_x3","apply","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","onClick","Fragment","FileComponent","clickHandler","connectDragSource","gridMode","ModTime","Size","modTime","Date","parse","Card","CardBody","e","CardFooter","toLocaleDateString","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","filesTarget","drop","didDrop","_monitor$getItem","UpButtonComponent","upButtonHandle","FilesView","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","getFileComponents","isDir","files","fsInfo","map","ID","FilesView_FileComponent","handleFileClick","canCopy","Features","Copy","canMove","Move","isLoading","downloadingItems","shouldUpdate","bind","assertThisInitialized","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa2","downloadUrl","BucketBased","prevState","method","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","_context2","_this$props2","connectDropTarget","isOver","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","isOpen","toggle","PureComponent","compose","visibilityFilter","visibilityFilters","searchQueries","configs","tempRemoteName","pathKey","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","target","createNewFolder","handleSubmit","preventDefault","closeModal","isVisible","Modal","data-test","ModalHeader","ModalBody","FormGroup","row","Label","for","Input","required","autoFocus","disabled","visibilityFilteringOptions","FileOperations","openNewFolderModal","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","err","filterOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","stopPropagation","Base_NewFolder_NewFolder","react_chartjs_2_es","ModalFooter","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","slicedToArray","push","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","RemoteExplorer","remoteNameTemp","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"mMAGIA,SAAgBC,EAAMC,OAAO,CAC7BC,QAASC,aAAaC,QAAQ,aAC9BC,QAAS,CAACC,eAAgB,oBAC1BC,aAAc,SAaX,SAASC,EAAgBC,EAAOC,EAAWC,EAAOC,EAAWC,EAAMC,GACtE,OAAOC,EAAsBN,EAAOC,EAAWC,EAAOC,EAAWC,EAAMC,EAAO,QAG3E,SAASE,EAAgBP,EAAOC,EAAWC,EAAOC,EAAWC,EAAMC,GAEtE,OAAOC,EAAsBN,EAAOC,EAAWC,EAAOC,EAAWC,EAAMC,EAAO,iBAGnEC,2FAAf,SAAAE,EAAqCR,EAAOC,EAAWC,EAAOC,EAAWC,EAAMC,EAAOI,GAAtF,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACQT,EAAM,GAGFA,EAFK,SAATD,EACIJ,EACM,aAEA,uBAGNA,EACM,aAEA,wBAGVA,EAfR,CAAAY,EAAAE,KAAA,gBAiBcR,EAAWV,EAAUmB,MAAM,KAE3BR,EAAO,CACTZ,MAAOA,EAAQC,EACfC,MAAOA,EAAQC,EAAY,IAAMQ,EAASA,EAASU,OAAS,GAC5DC,QAAQ,GAtBpBL,EAAAE,KAAA,EA2BqB7B,EAAciC,KAAKb,EAAKE,GA3B7C,cAAAK,EAAAO,OAAA,SAAAP,EAAAQ,MAAA,cA8B0B,KAAdtB,EACAA,EAAYC,EAEZD,GAAa,IAAMC,EAGjBQ,EAAO,CACTZ,MAAOA,EACPC,UAAWA,EACXC,MAAOA,EACPC,UAAWA,EACXmB,QAAQ,GAzCpBL,EAAAE,KAAA,GA2CqB7B,EAAciC,KAAKb,EAAKE,GA3C7C,eAAAK,EAAAO,OAAA,SAAAP,EAAAQ,MAAA,yBAAAR,EAAAS,SAAAlB,6BAnBAlB,EAAcqC,aAAaC,QAAQC,IAC/B,SAAAC,GAGI,OAFAA,EAAOlC,QAAQmC,cAAgB,SAAWC,KAAKtC,aAAaC,QAAQ,YAAc,IAAMD,aAAaC,QAAQ,aAEtGmC,GAEX,SAAAG,GAAK,OAAIC,QAAQC,OAAOF,KA6Db3C,wCCjER,SAAS8C,EAAUC,GACtB,OAAc,IAAVA,EAAoB,EACbA,EAAQ,KAAO,KAKvB,SAASC,EAAUD,GACtB,OAAc,IAAVA,EAAoB,EACbA,EAAQ,KAAO,KAAO,KAW9B,SAASE,EAAYF,GAAqB,IAAdG,EAAcC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAH,EAC1C,GAAIJ,EAAQ,EAAG,MAAO,MAEtB,IACMM,EAAKH,EAAW,EAAI,EAAIA,EAGxBI,EAAIC,KAAKC,MAAMD,KAAKE,IAAIV,GAASQ,KAAKE,IAJlC,OAMV,OAAOC,YAAYX,EAAQQ,KAAKI,IANtB,KAM6BL,IAAIM,QAAQP,IAAO,IAJ5C,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIQC,GAenE,SAASO,EAAaC,GAIzB,SAASC,EAAaC,GAClB,OAAQA,EAAS,EAAK,IAAM,GAGhC,IAAIC,EAAQV,KAAKC,MAAMM,EAAU,SACjC,GAAIG,EACA,OAAOA,EAAQ,QAAUF,EAAaE,GAG1C,IAAIC,EAAOX,KAAKC,OAAOM,GAAW,SAAY,OAC9C,GAAII,EACA,OAAOA,EAAO,OAASH,EAAaG,GAExC,IAAIC,EAAQZ,KAAKC,OAAOM,GAAW,OAAS,MAC5C,GAAIK,EACA,OAAOA,EAAQ,QAAUJ,EAAaI,GAE1C,IAAIC,EAAUb,KAAKC,OAAOM,GAAW,MAAQ,IAC7C,OAAIM,EACOA,EAAU,UAAYL,EAAaK,IAE9CN,GAAoB,IAETA,EAAQF,QAAQ,GAAK,UAAYG,EAAaD,GAElD,WAGJ,SAASO,EAAcC,EAAOC,GAEjC,OAAOD,EAAME,KAAKD,GAIf,SAASE,EAAmBF,GAG/B,OAAOF,EAFO,+CAEcE,GAGzB,SAASG,EAAYH,GAExB,OAAOF,EADO,aACcE,GAGzB,SAASI,EAAiBJ,GAE7B,OAAOF,EADO,0CACcE,GASzB,SAASK,EAAepC,EAAQqC,GAInC,OAHsBrC,EAAOsC,KAAK,SAACC,EAAKC,EAAKC,GACzC,OAAQJ,IAASE,EAAIG,SAKtB,SAASC,EAAeN,GAO3B,OAN2B,IAAvBA,EAAKO,QAAQ,MACiB,MAA1BP,EAAKA,EAAK9C,OAAS,KACnB8C,GAAc,KAIfA,EAjIXQ,EAAAC,EAAAC,EAAA,sBAAAzC,IAAAuC,EAAAC,EAAAC,EAAA,sBAAAvC,IAAAqC,EAAAC,EAAAC,EAAA,sBAAAtC,IAAAoC,EAAAC,EAAAC,EAAA,sBAAA1B,IAAAwB,EAAAC,EAAAC,EAAA,sBAAAd,IAAAY,EAAAC,EAAAC,EAAA,sBAAAb,IAAAW,EAAAC,EAAAC,EAAA,sBAAAZ,IAAAU,EAAAC,EAAAC,EAAA,sBAAAX,IAAAS,EAAAC,EAAAC,EAAA,sBAAAJ,IAAAE,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IASeC,IATR,SAAiBC,GACpB,GAAIC,MAAMC,QAAQF,GAAM,OAAsB,IAAfA,EAAI7D,OACnC,IAAK,IAAIgE,KAAOH,EACZ,GAAIA,EAAII,eAAeD,GACnB,OAAO,EAEf,OAAO,GA8HX,IAAME,EAAwB,CAC1BC,OAAQ,aACRC,IAAK,mBAIF,SAASX,EAAqBY,EAAMC,GAA2C,IAC9EC,GAD8EnD,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAvB8C,GAChCI,GAE3B,OAAIC,EACcF,EAAKC,OAAO,SAACE,GACvB,OAAQA,EAAKxF,OAASwF,EAAKC,WAAaF,IAIzCF,EAIJ,SAASX,EAAmBW,GAAwB,IAAlBK,EAAkBtD,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAEnD,OADAsD,EAAcA,EAAYC,eAERN,EAAKC,OAAO,SAACE,GACvB,OAAOA,EAAKzF,KAAK4F,cAAcC,WAAWF,KAI3CL,EAKJ,SAASV,EAAkBkB,GAC9B,OAAQA,GAA6B,KAAfA,GAAuC,MAAlBA,EAAW,6LChKpDC,EAAiB,SAACrE,EAAQsE,GAC5B,IAAMC,EAAaD,EAAME,OAAON,cAC1BO,EAAcF,EAAWhF,OAE/B,OAAoB,IAAhBkF,EACOzE,EAIY,IAAhByE,EAAoB,GAAKzE,EAAO6D,OAAO,SAAAa,GAAI,OAC9CA,EAAKR,cAAcS,MAAM,EAAGF,KAAiBF,KAO/CK,EAAqB,SAAAC,GAAU,OAAIA,GAGnCC,EAAmB,SAAAD,GAAU,OAC/BE,EAAA9F,EAAA+F,cAAA,WACKH,IAmEMI,cA9DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeVQ,4BAA8B,SAAAC,GAAa,IAAXrB,EAAWqB,EAAXrB,MAE5Ba,EAAKS,SAAS,CACVC,YAAaxB,EAAec,EAAKD,MAAMW,YAAavB,MAnBzCa,EAwBnBW,4BAA8B,WAC1BX,EAAKS,SAAS,CACVC,YAAa,MAlBjBV,EAAKY,MAAQ,CACTF,YAAa,IATFV,wEA8BV,IAAAa,EACqBV,KAAKJ,MAIzBe,EAAa,CACfC,YAAa,2CACb5B,MAPC0B,EACE1B,MAOH6B,SARCH,EACSG,UAWd,OACIpB,EAAA9F,EAAA+F,cAACoB,EAAAnH,EAAD,CACI4G,YAAaP,KAAKS,MAAMF,YACxBH,4BAA6BJ,KAAKI,4BAClCI,4BAA6BR,KAAKQ,4BAClClB,mBAAoBA,EACpBE,iBAAkBA,EAClBuB,0BAA0B,EAC1BJ,WAAYA,WAnDQK,IAAMC,qDCuB7BC,EAAW,SAACpC,EAAYqC,GAAb,OAA4B,SAAAC,GAEhD,GAAmB,KAAftC,EAAmB,CAQnB,IAAItF,EAAO,CACP6H,GAR4B,IAA5BvC,EAAWxB,QAAQ,KACHD,YAAeyB,GAEfA,EAMhBwC,OAAQH,GAGNI,EAAI,GAAAC,OAAM1C,EAAN,KAAA0C,OAAoBL,GAC9BjJ,IAAciC,KAAK,kBAAmBX,GAAMiI,KAAK,SAAAC,GAAG,OAAIN,EAAS,CACzDO,KAAMC,IACNC,OAAQC,IACRC,QAAS,CAACR,KAAMA,EAAMS,UAAWN,EAAIlI,KAAK8E,SAE9C,SAAAzD,GAAK,OAAIuG,EAAS,CACdO,KAAMC,IACNC,OAAQI,IACRF,QAAS,CAACR,KAAMA,EAAM1G,gBCjEzBqH,EAAa,SAACC,EAAarD,EAAYqC,GAChD,OAAO,SAACC,GACJA,EAAS,CACLO,KAAMS,IACNtD,WAAYA,EACZuD,GAAIF,EACJhB,WAAYA,IAEhBC,EAASkB,EAAuBH,MAI3BI,EAAmB,SAACJ,EAAarD,GAE1C,OAAO,SAACsC,GACJA,EAAS,CACLO,KAAMa,IACN1D,WAAYA,EACZuD,GAAIF,EACJhB,WAAY,KAGhBC,EAASkB,EAAuBH,MAI3BG,EAAyB,SAACH,GAEnC,OAAO,SAACf,EAAUqB,GACd,IAD2BC,EACbD,IACyBE,SAASC,aAAaT,GAAtDrD,EAFoB4D,EAEpB5D,WAAYqC,EAFQuB,EAERvB,WACfrC,GAA6B,KAAfA,GACdsC,EAASF,EAASpC,EAAYqC,MAgB7B0B,EAAa,SAACV,GAAD,OAAiB,SAAAf,GAEvCA,EAAS,CACLO,KAAMmB,IACNT,GAAIF,MAICY,EAAa,SAACZ,GAAD,OAAiB,SAAAf,GAEvCA,EAAS,CACLO,KAAMqB,IACNX,GAAIF,IAERf,EAASkB,EAAuBH,MAIvBc,EAAc,SAACd,GAAD,OAAiB,SAAAf,GAExCA,EAAS,CACLO,KAAMuB,IACNb,GAAIF,IAERf,EAASkB,EAAuBH,MAIvBgB,EAAe,SAAChB,GAAD,OAAiB,SAAAf,GAEzCA,EAAS,CACLO,KAAMqB,IACNX,GAAIF,IAERf,EAASkB,EAAuBH,eCvF9BiB,cAEF,SAAAA,EAAYxD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IACfvD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KAcVyD,uBAAyB,SAACC,EAADjD,GAAuB,IAAdkD,EAAclD,EAAdkD,SACA,IAA1BA,EAASjG,QAAQ,KACjBuC,EAAKS,SAAS,CACVxB,WAAYyE,EACZC,eAAgB,oBAIpB3D,EAAKS,SAAS,CACVxB,WAAYyE,EACZC,eAAgB,UAzBT3D,EAgCnB4D,WAAa,WAAM,IAAA/C,EACyBb,EAAKD,MAAtC2C,EADQ7B,EACR6B,iBAAkBJ,EADVzB,EACUyB,YAClBrD,EAAce,EAAKY,MAAnB3B,WACPyD,EAAiBJ,EAAarD,GAE9Be,EAAKD,MAAM8D,UAAU5E,IAnCrBe,EAAKY,MAAQ,CACT5C,SAAS,EACTiB,WAAYc,EAAMd,WAClB6E,aAAa,EACbH,eAAgB,QANL3D,mFAYfG,KAAKJ,MAAMgE,kDA8BN,IAAAC,EAAA7D,KAAA8D,EACyB9D,KAAKS,MAA5B5C,EADFiG,EACEjG,QAASiB,EADXgF,EACWhF,WACTiF,EAAW/D,KAAKJ,MAAhBmE,QAIP,OAHmB/D,KAAKJ,MAAjBoE,SAKCvE,EAAA9F,EAAA+F,cAAA,uDAIG7B,EAEH4B,EAAA9F,EAAA+F,cAAA,gDACsCD,EAAA9F,EAAA+F,cAAA,QAAMuE,KAAK,MAAMC,aAAW,SAA5B,gBADtC,KAMAzE,EAAA9F,EAAA+F,cAACyE,EAAA,EAAD,CAAMC,SAAU,kBAAMP,EAAKJ,eACvBhE,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KAEI5E,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACrBhF,EAAA9F,EAAA+F,cAACgF,EAAD,CAAuB1F,MAAOF,EAAY+B,SAAUb,KAAKqD,uBAClC9C,YAAawD,KAExCtE,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAEpBhF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQC,UAAW,SAAUC,MAAM,UAC3BlD,KAAK,UAAU3B,KAAKS,MAAM+C,0BA1EpCxC,IAAMC,WA6GhCmC,EAAY0B,aAHS,GAMNC,kBA3BS,SAACtE,EAAOuE,GAAR,MAAsB,CAC1CjB,QAAStD,EAAMa,OAAOyC,QACtBC,UAAU,EACVnJ,MAAO4F,EAAMa,OAAOzG,MACpBoK,YAAaxE,EAAMkC,SAASC,aAAaoC,EAAS7C,eAuBd,CACpCyB,eFvF0B,WAC1B,OAAO,SAACxC,EAAUqB,GACd,IAAMhC,EAAQgC,MAEThC,EAAMa,OAAOyC,SAAWtD,EAAMa,OAAOyC,QAAQ9J,OAAS,IAEvD/B,IAAciC,KAAK,sBAAsBsH,KAAK,SAAAC,GAAG,OAAIN,EAAS,CAC1DO,KAAMuD,IACNrD,OAAQC,IACRC,QAASL,EAAIlI,KAAKuK,WAClB,SAAAlJ,GAAK,OAAIuG,EAAS,CAClBO,KAAMuD,IACNrD,OAAQI,IACRF,QAASlH,QE2ErB6I,UFtHqB,SAAC5E,GAAD,OAAgB,SAAAsC,GAErC,IAAI+D,EACAC,EAEAxH,YAAkBkB,GAClBqG,EAAiBC,EAAgB,KAGjCA,EAAgBtG,EAAW9E,MAAM,KAAK,GACtCmL,EAAiB9H,YAAe+H,IAGpClN,IAAciC,KAAK,oBAAqB,CAACkH,GAAI8D,IACxC1D,KAAK,SAACC,GACCN,EAAS,CACLO,KAAM0D,IACNxD,OAAQC,IACRC,QAAQjC,OAAAwF,EAAA,EAAAxF,CAAA,GAAGsF,EAAgB1D,EAAIlI,SAIvC,SAAAqB,GAAK,OAAIuG,EAAS,CACdO,KAAM0D,IACNxD,OAAQI,IACRF,QAASlH,QE8FrB0H,oBAHWwC,CAKZ3B,2EC5HUmC,EACM,yBCSbC,EAAsB,CACxBC,UADwB,SACd7F,GAAO,IAAA8F,EAEe9F,EAAMnB,KAClC,MAAO,CACHzF,KAJS0M,EAEN1M,KAES2M,KAJHD,EAEAC,KAEe1M,MAJfyM,EAEMzM,MAEuB6F,WAAYc,EAAMd,aAI1D8G,QATkB,eAAAC,EAAA/F,OAAAgG,EAAA,EAAAhG,CAAAiG,EAAApM,EAAAqM,KAAA,SAAA5M,EASVwG,EAAOqG,EAASC,GATN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvN,EAAAC,EAAAuN,EAAAC,EAAA5L,EAAA,OAAAkL,EAAApM,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAWpB2M,QAAQ/K,IAAIiE,EAAO,aAAcsG,GAXbrM,EAAAC,KAAA,GAaZmM,EAAQU,kBAAmBT,EAbf,CAAArM,EAAAE,KAAA,YAAAoM,EAgBmGF,EAAQU,gBAAhHP,EAhBKD,EAgBLC,cAAeC,EAhBVF,EAgBUE,cAAeC,EAhBzBH,EAgByBG,eAAgBC,EAhBzCJ,EAgByCI,eAAgBvN,EAhBzDmN,EAgByDnN,KAAMC,EAhB/DkN,EAgB+DlN,MAAOuN,EAhBtEL,EAgBsEK,WAAYC,EAhBlFN,EAgBkFM,cAE3E,SAAfD,EAlBQ,CAAA3M,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAoBEZ,YAAgBiN,EAAeC,EAAeC,EAAgBC,EAAgBvN,EAAMC,GApBtF,OAqBJwN,IACIxN,EACA2N,IAAMC,KAAN,4CAAArF,OAAuDxI,IAEvD4N,IAAMC,KAAN,uCAAArF,OAAkDxI,IAzBlDa,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAiCEpB,YAAgByN,EAAeC,EAAeC,EAAgBC,EAAgBvN,EAAMC,GAjCtF,QAkCJwN,IAEIG,IAAMC,KAAN,2CAAArF,OAAsDxI,IApCtD,QAAAa,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiN,GAAAjN,EAAA,SA+CVgB,EAAQhB,EAAAiN,GAAEC,SAAWlN,EAAAiN,GAAEC,SAAflN,EAAAiN,GACdJ,QAAQ/K,IAAIqL,KAAKC,UAAUpM,IAE3B+L,IAAM/L,MAAN,0BAAA2G,OAAsC3G,GAAS,CAC3CqM,WAAW,IAnDC,yBAAArN,EAAAS,SAAAlB,EAAA,kCAAA+N,EAAAC,EAAAC,GAAA,OAAAxB,EAAAyB,MAAAtH,KAAA3E,YAAA,IAkE5B,SAASkM,EAATlH,GAAqC,IAAlBpH,EAAkBoH,EAAlBpH,MAAOyF,EAAW2B,EAAX3B,SAClBkG,EAAY,UAchB,OAbI3L,EACA2L,EAAY,YACQ,oBAAblG,EACPkG,EAAY,gBACQ,eAAblG,EACPkG,EAAY,kBACQ,oBAAblG,GAA+C,iCAAbA,GAA4D,qBAAbA,EACxFkG,EAAY,oBACQ,eAAblG,EACPkG,EAAY,iBACQ,iBAAblG,IACPkG,EAAY,qBAETnF,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAWA,EAAY,cAGrC,SAAS4C,EAAcC,EAAchJ,GAC7BiJ,OAAOC,QAAP,mCAAAnG,OAAkD/C,EAAKzF,QACvDyO,EAAahJ,GAIrB,SAASmJ,EAATC,GAAuD,IAArCC,EAAqCD,EAArCC,eAAgBL,EAAqBI,EAArBJ,aAAchJ,EAAOoJ,EAAPpJ,KAI5C,OAFgBA,EAATxF,MAiBCwG,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,OAAOD,UAAU,cAAcmD,QAAS,kBAAMP,EAAcC,EAAchJ,KACpFgB,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAW,iCAblBnF,EAAA9F,EAAA+F,cAACD,EAAA9F,EAAMqO,SAAP,KACIvI,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,OAAOkD,QAAS,kBAAMD,EAAerJ,KAC/CgB,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAW,yCAElBnF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,OAAOD,UAAU,cAAcmD,QAAS,kBAAMP,EAAcC,EAAchJ,KACpFgB,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAW,sCAe5BqD,mLA4BO,IAAAvH,EAC6GV,KAAKJ,MAAhHnB,EADFiC,EACEjC,KAAMyJ,EADRxH,EACQwH,aAAcJ,EADtBpH,EACsBoH,eAAgBL,EADtC/G,EACsC+G,aAAcU,EADpDzH,EACoDyH,kBAAmBC,EADvE1H,EACuE0H,SAErEnP,EAAwCwF,EAAxCxF,MAAOyF,EAAiCD,EAAjCC,SAAU2J,EAAuB5J,EAAvB4J,QAASrP,EAAcyF,EAAdzF,KAAMsP,EAAQ7J,EAAR6J,KAEnCC,EAAU,IAAIC,KAAKA,KAAKC,MAAMJ,IAGlC,OACWF,EADM,SAAbC,EAEI3I,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAW,YACZnF,EAAA9F,EAAA+F,cAACgJ,EAAA,EAAD,KACIjJ,EAAA9F,EAAA+F,cAACiJ,EAAA,EAAD,CAAUZ,QAAS,SAACa,GAAD,OAAOV,EAAaU,EAAGnK,KACtCgB,EAAA9F,EAAA+F,cAAC6H,EAAD,CAAUtO,MAAOA,EAAOyF,SAAUA,IADtC,IACmD1F,GAEnDyG,EAAA9F,EAAA+F,cAACmJ,EAAA,EAAD,KACIpJ,EAAA9F,EAAA+F,cAACkI,EAAD,CAASE,eAAgBA,EAAgBL,aAAcA,EAAchJ,KAAMA,OAOvFgB,EAAA9F,EAAA+F,cAAA,MAAIkF,UAAW,kBACXnF,EAAA9F,EAAA+F,cAAA,UAAID,EAAA9F,EAAA+F,cAAA,SAAOiC,KAAK,cAChBlC,EAAA9F,EAAA+F,cAAA,MAAIqI,QAAS,SAACa,GAAD,OAAOV,EAAaU,EAAGnK,KAAOgB,EAAA9F,EAAA+F,cAAC6H,EAAD,CAAUtO,MAAOA,EAAOyF,SAAUA,IAA7E,IAA0F1F,GAC1FyG,EAAA9F,EAAA+F,cAAA,WAAe,IAAV4I,EAAc,IAAMnN,YAAYmN,EAAM,IAC3C7I,EAAA9F,EAAA+F,cAAA,UAAK6I,EAAQO,sBACbrJ,EAAA9F,EAAA+F,cAAA,UAAID,EAAA9F,EAAA+F,cAACkI,EAAD,CAASE,eAAgBA,EAAgBL,aAAcA,EAAchJ,KAAMA,cAxDvEuC,IAAMC,WA6EnB8H,eAAWxD,EAAyBC,EAxInD,SAAiBT,EAASkB,GACtB,MAAO,CACHkC,kBAAmBpD,EAAQiE,aAC3BC,mBAAoBlE,EAAQmE,cAC5BC,WAAYlD,EAAQkD,eAoIbJ,CAAkEd,YC1L3EmB,GAAc,CAChBC,KADgB,SACXzJ,EAAOqG,EAASC,GACjB,IAAID,EAAQqD,UAAZ,CAD4B,IAAAC,EAIUtD,EAAQ1N,UAAzCS,EAJuBuQ,EAIvBvQ,KAAM2M,EAJiB4D,EAIjB5D,KAAM1M,EAJWsQ,EAIXtQ,MAAO6F,EAJIyK,EAIJzK,WASxB,MAAO,CACHsH,cARgB/I,YAAeyB,GAS/BuH,cARgBV,EAShBW,eARiBjJ,YAAeuC,EAAMqF,YAAYnG,YASlDyH,eARiB3G,EAAMqF,YAAY9D,WASnCnI,OACAC,QACAwN,cAAeP,EAAUO,kBAmCrC,SAAS+C,GAATnJ,GAAuD,IAA3BoJ,EAA2BpJ,EAA3BoJ,eACxB,MAAiB,SADkCpJ,EAAX+H,SAGhC3I,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKG,GAAI,IACLhF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQoD,QAAS,kBAAM0B,MAAvB,UAKJhK,EAAA9F,EAAA+F,cAAA,MAAIqI,QAAS,kBAAM0B,KAAkB7E,UAAW,kBAC5CnF,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,UAAID,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAW,iBAAlB,aACAnF,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,gBAMVgK,eAGF,SAAAA,EAAY9J,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0J,IACf7J,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4J,GAAAvJ,KAAAH,KAAMJ,KA+HV6G,cAAgB,WAAM,IAAAkD,EAEe9J,EAAKD,MAAMqF,YAArCnG,EAFW6K,EAEX7K,WAAYqC,EAFDwI,EAECxI,WACnBtB,EAAK+J,aAAa9K,EAAYqC,IAnIftB,EAsInBgK,aAAe,SAACjB,GACZ/I,EAAKS,SAAS,CAACwJ,oBAAoB,KAvIpBjK,EA0InBkK,kBAAoB,SAACC,GAAU,IAAAtJ,EACoBb,EAAKD,MAA7CqK,EADoBvJ,EACpBuJ,MAAO9H,EADazB,EACbyB,YAAaiG,EADA1H,EACA0H,SAAU8B,EADVxJ,EACUwJ,OAC9BpL,EAAce,EAAKD,MAAMqF,YAAzBnG,WAEP,GAAIoL,IAAWrM,YAAQqM,GACnB,OAAOD,EAAME,IAAI,SAAC1L,EAAMvB,GAAQ,IACvBkN,EAAY3L,EAAZ2L,GAAIpR,EAAQyF,EAARzF,KAKT,YAHWsC,IAAP8O,IACAA,EAAKpR,GAELyF,EAAKxF,QAAU+Q,EAEXvK,EAAA9F,EAAA+F,cAACD,EAAA9F,EAAMqO,SAAP,CAAgB/J,IAAKmM,GACjB3K,EAAA9F,EAAA+F,cAAC2K,GAAD,CAAe5L,KAAMA,EAAMyJ,aAAcrI,EAAKyK,gBAC/BxC,eAAgBjI,EAAKiI,eAAgBL,aAAc5H,EAAK4H,aACxD3I,WAAYA,EAAYsJ,SAAUA,EAAUjG,YAAaA,EACzDoI,QAASL,EAAOM,SAASC,KAAMC,QAASR,EAAOM,SAASG,QAK5E,QA9Jf9K,EAAKY,MAAQ,CACTmK,WAAW,EACXd,oBAAoB,EACpBe,iBAAkB,EAClBC,cAAc,GAGlBjL,EAAKyK,gBAAkBzK,EAAKyK,gBAAgBS,KAArBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IACvBA,EAAKiI,eAAiBjI,EAAKiI,eAAeiD,KAApBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IACtBA,EAAK4H,aAAe5H,EAAK4H,aAAasD,KAAlBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IAXLA,+EAeH+I,EAAGnK,GAAM,IACdkH,EAAyBlH,EAAzBkH,KAAM1M,EAAmBwF,EAAnBxF,MAAOgS,EAAYxM,EAAZwM,SAChBhS,GAASgS,EACTjL,KAAKkL,iBAAiBvF,EAAM1M,EAAOgS,GAEnCjL,KAAK8H,eAAerJ,4CAKX0M,EAAelS,EAAOgS,GAAU,IACtCnM,EAAckB,KAAKJ,MAAMqF,YAAzBnG,WAEHsM,EAAmB,GACnBF,EAAmB,GAGnBD,GACAG,EAAmB/N,YAAeyB,GAAcqM,EAChDD,EAAmB,IAGZjS,IACPmS,EAAmBtM,EACnBoM,EAAmBC,GAGvBnL,KAAKJ,MAAMsC,WAAWlC,KAAKJ,MAAMuC,YAAaiJ,EAAkBF,4CAInC7P,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,KAAAA,UAAA,OAAAgQ,EACIrL,KAAKJ,MAAMqF,YAArCnG,EADsBuM,EACtBvM,WAAYqC,EADUkK,EACVlK,WAEnBnB,KAAKJ,MAAMsB,SAASpC,EAAYqC,kFAIf1C,uGAEcuB,KAAKJ,MAAMqF,YAArCnG,eAAYqC,eACV+I,EAAUlK,KAAKJ,MAAfsK,OACHoB,EAAc,GAEdA,EADApB,EAAOM,SAASe,YACL,KAAA/J,OAAQ1C,EAAR,MAAA0C,OAAuBL,EAAvB,KAAAK,OAAqC/C,EAAKzF,MAG1C,KAAAwI,OAAQ1C,EAAR,KAAA0C,OAAsBL,EAAtB,MAAAK,OAAqC/C,EAAKzF,MAGzDgH,KAAKM,SAAS,SAACkL,GACX,MAAO,CACHX,iBAAkBW,EAAUX,iBAAmB,EAC/Cf,oBAAoB,cAIP5R,YAAc,CAC/BoB,IAAKgS,EACLG,OAAQ,MACR/S,aAAc,gBAHdqO,SAMEzN,EAAMoO,OAAOgE,IAAIC,gBAAgB,IAAIC,KAAK,CAAC7E,EAASvN,SACpDqS,EAAOC,SAASpM,cAAc,MAC/BqM,KAAOzS,EACZuS,EAAKG,aAAa,WAAYvN,EAAKzF,MACnC8S,SAASG,KAAKC,YAAYL,GAC1BA,EAAKM,QAELnM,KAAKM,SAAS,SAACkL,GACX,MAAO,CACHX,iBAAkBW,EAAUX,iBAAmB,IAEpD,WACqC,IAAhChH,EAAKpD,MAAMoK,kBACXhH,EAAKvD,SAAS,CAACwJ,oBAAoB,uLAK5BrL,8EACVK,EAAckB,KAAKJ,MAAMqF,YAAzBnG,WAECtF,EAAO,CACT6H,GAAIhE,YAAeyB,GACnBwC,OAAQ7C,EAAKkH,gBAGTlH,EAAKxF,uCAECf,IAAciC,KAAK,oBAAqBX,UAE9CwG,KAAKyG,gBACLG,IAAMC,KAAN,GAAArF,OAAc/C,EAAKzF,KAAnB,uDAIMd,IAAciC,KAAK,yBAA0BX,WACnDwG,KAAKyG,gBACLG,IAAMC,KAAN,GAAArF,OAAc/C,EAAKzF,KAAnB,aAAoC,CAChCkO,WAAW,8DAKnBN,IAAM/L,MAAN,wBAAA2G,OAAA4K,EAAAtF,IAAyC,CACrCI,WAAW,kJA4Cd,IAAApD,EACqD9D,KAAKS,MAAxDmK,EADF9G,EACE8G,UAAWd,EADbhG,EACagG,mBAAoBe,EADjC/G,EACiC+G,iBADjCwB,EAEyErM,KAAKJ,MAA5E0M,EAFFD,EAEEC,kBAAmBC,EAFrBF,EAEqBE,OAAQtC,EAF7BoC,EAE6BpC,MAAOlH,EAFpCsJ,EAEoCtJ,WAAYZ,EAFhDkK,EAEgDlK,YAAaiG,EAF7DiE,EAE6DjE,SAC3DtJ,EAAckB,KAAKJ,MAAMqF,YAAzBnG,WAIP,GAAI8L,IAAcX,EACd,OAAQxK,EAAA9F,EAAA+F,cAAA,WAAKD,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAW,+BAAnB,YAIR,GAAmB,KAAf9F,EACA,OAAQW,EAAA9F,EAAA+F,cAAA,+EAIZ,IAAI8M,EAAkBxM,KAAK+J,mBAAkB,GAEzC0C,EAAmBzM,KAAK+J,mBAAkB,GAE1C2C,EAAgB,GAmFpB,OA/EIA,EAFa,SAAbtE,EAGI3I,EAAA9F,EAAA+F,cAACiN,EAAA,EAAD,CAAWC,OAAO,GACdnN,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAAC8J,GAAD,CAAmBC,eAAgB,kBAAM1G,EAAWZ,IAAciG,SAAUA,KAEhF3I,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAAA,0BAEJD,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACKmI,GAIL/M,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAAA,oBAEJD,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACKoI,IAWThN,EAAA9F,EAAA+F,cAACiN,EAAA,EAAD,CAAWC,OAAO,EAAMhI,UAAW,QAE/BnF,EAAA9F,EAAA+F,cAACmN,EAAA,EAAD,KACIpN,EAAA9F,EAAA+F,cAAA,aACAD,EAAA9F,EAAA+F,cAAA,UACID,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,kBACAD,EAAA9F,EAAA+F,cAAA,kBACAD,EAAA9F,EAAA+F,cAAA,sBACAD,EAAA9F,EAAA+F,cAAA,uBAGJD,EAAA9F,EAAA+F,cAAA,aACAD,EAAA9F,EAAA+F,cAAC8J,GAAD,CAAmBC,eAAgB,kBAAM1G,EAAWZ,IAAciG,SAAUA,IAC3E6B,EAAMhQ,OAAS,EACRwF,EAAA9F,EAAA+F,cAACD,EAAA9F,EAAMqO,SAAP,KACIvI,EAAA9F,EAAA+F,cAAA,UACID,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,yBACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,YAEH8M,EACD/M,EAAA9F,EAAA+F,cAAA,UACID,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,mBACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,YAEH+M,GAGThN,EAAA9F,EAAA+F,cAAA,UACID,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,sBACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,WACAD,EAAA9F,EAAA+F,cAAA,eAYjB4M,EACH7M,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAW,OACX2H,GA3Tb9M,EAAA9F,EAAA+F,cAAA,OACIoN,MAAO,CACHC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRC,MAAO,OACPC,OAAQ,EACRC,QAAS,GACTC,gBAAiB,UAsTb7N,EAAA9F,EAAA+F,cAAC6N,EAAA,EAAD,CAAO1I,MAAM,OAAO2I,OAAQ1D,EAAoB2D,OAAQzN,KAAK6J,aAAcrF,GAAI,GACxEC,GAAI,IADX,eAEiBoG,EAFjB,0BAKC6B,WA5RG1L,IAAM0M,eA6T9BhE,GAAU5E,aALW,GAQrB,IAwCe6I,gBACX5I,YAzCoB,SAACtE,EAAOuE,GAC5B,IAAMC,EAAcxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aACnDyL,EAAmBnN,EAAMkC,SAASkL,kBAAkB7I,EAAS7C,aAC7DiG,EAAW3H,EAAMkC,SAASyF,SAASpD,EAAS7C,aAC5CxD,EAAc8B,EAAMkC,SAASmL,cAAc9I,EAAS7C,aAEtD+H,EAAS,GACNpL,EAA0BmG,EAA1BnG,WAAYqC,EAAc8D,EAAd9D,WAEnB,GAAI8D,GAAexE,EAAMa,OAAOyM,QAAS,CAErC,IAAMC,EAAiBlP,EAAW9E,MAAM,KAAK,GACzCyG,EAAMa,OAAOyM,QAAQC,KAErB9D,EAASzJ,EAAMa,OAAOyM,QAAQC,IAGtC,IAAMC,EAAO,GAAAzM,OAAM1C,EAAN,KAAA0C,OAAoBL,GAE7B8I,EAAQxJ,EAAMa,OAAO2I,MAAMgE,GAY/B,OAVIhE,IACAA,EAAQA,EAAMA,MACV2D,IACA3D,EAAQvM,YAAqBuM,EAAO2D,IAEpCjP,IACAsL,EAAQtM,YAAmBsM,EAAOtL,KAInC,CACHsL,QACAhF,cACAiF,SACA9B,WACAzJ,gBAMiB,CAACuC,WAAU6B,aAAYb,eAE5CgM,YAAW3I,EAAyB6D,GA7ZxC,SAAiBrE,EAASkB,GACtB,MAAO,CACHqG,kBAAmBvH,EAAQoJ,aAC3B5B,OAAQtG,EAAQsG,YAsZToB,CAKbjE,ICpca0E,OANf,SAAA/N,GAA2C,IAAnB6M,EAAmB7M,EAAnB6M,OAAQmB,EAAWhO,EAAXgO,SAC5B,OAAQ5O,EAAA9F,EAAA+F,cAAA,OAAKoN,MAAO,CAACwB,SAAU,OAAQpB,OAAQA,IAC1CmB,0JCMHE,eAEF,SAAAA,EAAY3O,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuO,IACf1O,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyO,GAAApO,KAAAH,KAAMJ,KAWV4O,YAAc,SAACC,GACX5O,EAAKS,SAAS,CAACkO,YAAaC,KAbb5O,EAuEnB6O,WAAa,SAAA9F,GACT,IAAM5J,EAAQ4J,EAAE+F,OAAO3P,MACvBa,EAAKS,SACD,CAACvD,KAAMiC,KAxEXa,EAAKY,MAAQ,CACT1D,KAAM,GACNyR,aAAa,GAEjB3O,EAAK+O,gBAAkB/O,EAAK+O,gBAAgB7D,KAArBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IACvBA,EAAKgP,aAAehP,EAAKgP,aAAa9D,KAAlBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IACpBA,EAAK4N,OAAS5N,EAAK4N,OAAO1C,KAAZjL,OAAAkL,EAAA,EAAAlL,CAAAD,IARCA,gNAmBV9C,EAAQiD,KAAKS,MAAb1D,OAC0BiD,KAAKJ,MAAMqF,YAArCnG,eAAYqC,eACV+I,EAAUlK,KAAKJ,MAAfsK,OAEPpL,EAAazB,YAAeyB,YAKpBoL,EAAOM,SAASe,aAA8B,KAAfpK,EAC/BrC,GAAc/B,EAEK,KAAfoE,EACAA,EAAapE,EAEboE,GAAc,IAAMpE,EAGtBvD,EAAO,CACT6H,GAAIvC,EACJwC,OAAQH,GAIZnB,KAAKwO,aAAY,aAGXtW,IAAciC,KAAK,mBAAoBX,WAE7CwG,KAAKwO,aAAY,GAEjBxO,KAAKyN,SACL7G,IAAMC,KAAN,mBAAArF,OAA8BL,IAC9BnB,KAAKJ,MAAM0C,uBAAuBtC,KAAKJ,MAAMuC,+DAE7CnC,KAAKwO,aAAY,GAEb3U,EAAAiN,GAAMC,SACNH,IAAM/L,MAAN,0BAAA2G,OAAsC3H,EAAAiN,GAAMC,SAASvN,KAAKqB,QAE1D+L,IAAM/L,MAAN,0BAAA2G,OAAA3H,EAAAiN,sJAOC8B,GACTA,EAAEkG,iBACF9O,KAAK4O,mDAWL5O,KAAKJ,MAAMmP,8CAGN,IAAAjL,EACuB9D,KAAKS,MAA1B1D,EADF+G,EACE/G,KAAMyR,EADR1K,EACQ0K,YADR9N,EAE4BV,KAAKJ,MAA/BoP,EAFFtO,EAEEsO,UAAW/J,EAFbvE,EAEauE,YAClB,OAEIxF,EAAA9F,EAAA+F,cAACuP,GAAA,EAAD,CAAOzB,OAAQwB,EAAWvB,OAAQzN,KAAKyN,OAAQyB,YAAU,sBACrDzP,EAAA9F,EAAA+F,cAACyE,EAAA,EAAD,CAAMC,SAAUpE,KAAK6O,cACjBpP,EAAA9F,EAAA+F,cAACyP,GAAA,EAAD,CAAa1B,OAAQzN,KAAKyN,QAA1B,wBACQxI,EAAYnG,WADpB,KACkCmG,EAAY9D,YAC9C1B,EAAA9F,EAAA+F,cAAC0P,GAAA,EAAD,KACI3P,EAAA9F,EAAA+F,cAAC2P,GAAA,EAAD,CAAWC,KAAG,GACV7P,EAAA9F,EAAA+F,cAAC6P,GAAA,EAAD,CAAOC,IAAI,aAAahL,GAAI,GAA5B,kBACA/E,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKE,GAAI,GACL/E,EAAA9F,EAAA+F,cAAC+P,GAAA,EAAD,CAAO9N,KAAK,OAAO5E,KAAK,aAAasF,GAAG,aAAarD,MAAOjC,EACrD8D,SAAUb,KAAK0O,WAAYgB,UAAQ,EAACC,WAAS,MAI5DlQ,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAU,YACXnF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQhD,KAAK,SAASkD,MAAM,UAAUD,UAAU,cAAcgL,SAAUpB,GAAa/O,EAAA9F,EAAA+F,cAAA,KACjFkF,UAAU,sBADd,4BAvGJ5D,IAAMC,WA8If8D,eAdS,SAACtE,EAAOuE,GAE5B,IAAMC,EAAcxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aACrD+H,EAAS,GAKb,OAHIjF,GAAexE,EAAMa,OAAOyM,SAAWtN,EAAMa,OAAOyM,QAAQ9I,EAAYnG,cACxEoL,EAASzJ,EAAMa,OAAOyM,QAAQ9I,EAAYnG,aAEvC,CACHmG,cACAiF,WAIgC,CAAC5H,0BAA1ByC,CAAmDwJ,ICxJrDsB,GAA6B,CAAC,SAAU,MAAO,oBCoCtDC,eACF,SAAAA,EAAYlQ,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8P,IACfjQ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgQ,GAAA3P,KAAAH,KAAMJ,KASVmQ,mBAAqB,WACjBlQ,EAAKS,SAAS,CAAC0P,yBAAyB,KAXzBnQ,EAcnBoQ,oBAAsB,WAClBpQ,EAAKS,SAAS,CAAC0P,yBAAyB,KAfzBnQ,EAkBnBqQ,mBAAqB,SAACtH,GAClB,IAAMuH,EAAYvH,EAAE+F,OAAO3P,OAI3BoR,EAFiCvQ,EAAKD,MAA/BwQ,wBAEgBvQ,EAAKD,MAAMuC,YAAagO,GAC/CtQ,EAAKwQ,kBAxBUxQ,EA6BnByQ,qBAAuB,SAAC1H,GAEpB,IAAMR,EAAWQ,EAAE+F,OAAO3P,OAI1BuR,EAFyB1Q,EAAKD,MAAvB2Q,gBAEQ1Q,EAAKD,MAAMuC,YAAaiG,GACvCvI,EAAKwQ,kBApCUxQ,EAwCnB2Q,aAAe,SAAC5H,GACZA,EAAEkG,iBADgB,IAEX3M,EAAetC,EAAKD,MAApBuC,YACPtC,EAAKD,MAAM6Q,eAAetO,EAAayG,EAAE+F,OAAO3P,QA3CjCa,EA+CnBwQ,eAAiB,WACbxQ,EAAKS,SAAS,SAACkL,GACX,MAAO,CACHkF,cAAelF,EAAUkF,iBAlDlB7Q,EAuDnB8Q,iBAAmB,WACf9Q,EAAKS,SAAS,SAACkL,GACX,MAAO,CACHoF,kBAAmBpF,EAAUoF,mBAElC,WACC,GAAI/Q,EAAKY,MAAMmQ,iBAAkB,KACtBzO,EAAetC,EAAKD,MAApBuC,YACPtC,EAAKD,MAAMiR,SAAS1O,OA/DbtC,EAqEnBiR,iBAAmB,WAEf,GAAIpJ,OAAOC,QAAQ,6EAA8E,KAAAjH,EAElDb,EAAKD,MAAzCqF,EAFsFvE,EAEtFuE,YAAa9C,EAFyEzB,EAEzEyB,YAAa+H,EAF4DxJ,EAE5DwJ,OAC5BpL,EAAcmG,EAAdnG,WACDoL,GAAUA,EAAOM,UAAYN,EAAOM,SAASuG,SACxCnT,YAAkBkB,KACnBA,EAAazB,YAAeyB,IAGhC5G,IAAciC,KAAK,qBAAsB,CACrCkH,GAAIvC,IACL2C,KAAK,SAACC,GACkB,MAAfA,EAAIG,SACJ+E,YAAM,iBACN/G,EAAKD,MAAMiR,SAAS1O,KAI5B,SAAC6O,GACGpK,IAAM/L,MAAM,2BAKpB+L,IAAM/L,MAAM,iDA7FpBgF,EAAKY,MAAQ,CACTuP,yBAAyB,EACzBY,kBAAkB,EAClBF,cAAc,GAElB7Q,EAAKoR,cAAgBpB,GAPNhQ,wEAqGV,IAAAwM,EACwIrM,KAAKJ,MAA3IuC,EADFkK,EACElK,YAAaG,EADf+J,EACe/J,uBAAwBsL,EADvCvB,EACuCuB,iBAAkBxF,EADzDiE,EACyDjE,SAAUnF,EADnEoJ,EACmEpJ,YAAaE,EADhFkJ,EACgFlJ,aAAcxE,EAD9F0N,EAC8F1N,YAAasG,EAD3GoH,EAC2GpH,YAAaiM,EADxH7E,EACwH6E,aADxHpN,EAE6D9D,KAAKS,MAAhEuP,EAFFlM,EAEEkM,wBAAyBU,EAF3B5M,EAE2B4M,aAAcE,EAFzC9M,EAEyC8M,iBAEvC9R,EAA0BmG,EAA1BnG,WAAYqC,EAAc8D,EAAd9D,WAEnB,OACI1B,EAAA9F,EAAA+F,cAAA,OAAKwE,aAAW,cACZzE,EAAA9F,EAAA+F,cAAA,MAAIkF,UAAU,cACVnF,EAAA9F,EAAA+F,cAAA,MAAIkF,UAAU,0BAA0B9F,EAAxC,MAECqC,EACD1B,EAAA9F,EAAA+F,cAAA,MAAIkF,UAAU,mBACVnF,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAU,YAAYX,KAAK,QAC3BC,aAAW,qCAGZzE,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQoD,QAAS/H,KAAK2Q,iBAAkB/L,UAAU,OAAMnF,EAAA9F,EAAA+F,cAAA,KACpDkF,UAAU,iBADd,gBAKZnF,EAAA9F,EAAA+F,cAAA,WACID,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,QAAQD,UAAW,wBACzBmD,QAAS,kBAAM5E,EAAahB,KAAc1C,EAAA9F,EAAA+F,cAAA,KAC9CkF,UAAW,4BACfnF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,QAAQD,UAAW,wBACzBmD,QAAS,kBAAM9E,EAAYd,KAAc1C,EAAA9F,EAAA+F,cAAA,KAC7CkF,UAAW,6BAGfnF,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAU,qCAEXnF,EAAA9F,EAAA+F,cAACyR,GAAA,EAAD,KACI1R,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQC,UAAU,wBAAwBmD,QAAS/H,KAAK+P,oBAAoBtQ,EAAA9F,EAAA+F,cAAA,KACxEkF,UAAW,qBADf,KAEAnF,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQC,UAAU,wBACVmD,QAAS,kBAAMzF,EAAuBH,KAAc1C,EAAA9F,EAAA+F,cAAA,KACxDkF,UAAW,wBACfnF,EAAA9F,EAAA+F,cAAC0R,GAAA,EAAD,KACI3R,EAAA9F,EAAA+F,cAAC2R,GAAA,EAAD,CAAiBC,UAAU,WACvB7R,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQhD,KAAK,SAASkD,MAAM,WAAUpF,EAAA9F,EAAA+F,cAAA,KAAGkF,UAAU,iBAAnD,YAEJnF,EAAA9F,EAAA+F,cAAC+P,GAAA,EAAD,CAAO9N,KAAK,OAAOU,GAAG,gBAAgBzB,YAAY,SAAS5B,MAAOL,EAC3DkC,SAAUb,KAAKwQ,gBAE1B/Q,EAAA9F,EAAA+F,cAAC6R,GAAA,EAAD,CAAgB/D,OAAQkD,EAAcjD,OAAQzN,KAAKqQ,gBAC/C5Q,EAAA9F,EAAA+F,cAAC8R,GAAA,EAAD,CAAgBC,OAAK,GAArB,QAGAhS,EAAA9F,EAAA+F,cAACgS,GAAA,EAAD,KACIjS,EAAA9F,EAAA+F,cAACiS,GAAA,EAAD,iBAAwB,IACpBlS,EAAA9F,EAAA+F,cAAC+P,GAAA,EAAD,CAAO9N,KAAM,SAAUoG,QAAS,SAACa,GAAD,OAAOA,EAAEgJ,mBAClC/Q,SAAUb,KAAKsQ,qBAAsBtR,MAAOoJ,GAC/C3I,EAAA9F,EAAA+F,cAAA,UAAQV,MAAO,QAAf,QACAS,EAAA9F,EAAA+F,cAAA,UAAQV,MAAO,QAAf,UAIRS,EAAA9F,EAAA+F,cAACiS,GAAA,EAAD,mBAA0B,IACtBlS,EAAA9F,EAAA+F,cAAC+P,GAAA,EAAD,CAAO9N,KAAM,SAAUoG,QAAS,SAACa,GAAD,OAAOA,EAAEgJ,mBAClC/Q,SAAUb,KAAKkQ,mBAAoBlR,MAAO4O,EAC1ChJ,UAAU,aACbnF,EAAA9F,EAAA+F,cAAA,UAAQzB,IAAK,GAAb,QAEI+B,KAAKiR,cAAc9G,IAAI,SAAC1L,EAAMvB,GAC1B,OAAQuC,EAAA9F,EAAA+F,cAAA,UAAQzB,IAAKQ,EAAMO,MAAOP,GAAOA,UAUrEgB,EAAA9F,EAAA+F,cAACmS,GAAD,CAAW1P,YAAaA,EAAa6M,UAAWgB,EACrCjB,WAAY/O,KAAKiQ,sBAE5BxQ,EAAA9F,EAAA+F,cAACuP,GAAA,EAAD,CAAOzB,OAAQoD,EAAkBnD,OAAQzN,KAAK2Q,kBAC1ClR,EAAA9F,EAAA+F,cAACyP,GAAA,EAAD,mBACgBrQ,GAEhBW,EAAA9F,EAAA+F,cAAC0P,GAAA,EAAD,KACI3P,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKE,GAAI,IACL/E,EAAA9F,EAAA+F,cAAA,OAAKkF,UAAU,iBACXnF,EAAA9F,EAAA+F,cAAA,gCACCwR,EAAezR,EAAA9F,EAAA+F,cAACoS,GAAA,EAAD,CAAUtY,KAAM0X,IAAkBzR,EAAA9F,EAAA+F,cAAA,uBAI9DD,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKE,GAAI,IACL/E,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAM,SAASkD,QAAS/H,KAAK8Q,kBAArC,eAAmErR,EAAA9F,EAAA+F,cAAA,KAC/DkF,UAAU,0BAK1BnF,EAAA9F,EAAA+F,cAACqS,GAAA,EAAD,iBA1MC/Q,IAAMC,WA0RpB8D,eAtDS,SAACtE,EAAOuE,GAC5B,IAAMgN,EAAcvR,EAAMwR,eAAeC,MAAMlN,EAAS7C,aACpD+O,EAAe,GACbjM,EAAcxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aACrD+H,EAAS,GAMb,GAJIjF,GAAexE,EAAMa,OAAOyM,SAAWtN,EAAMa,OAAOyM,QAAQ9I,EAAYnG,cACxEoL,EAASzJ,EAAMa,OAAOyM,QAAQ9I,EAAYnG,aAG1CkT,EAAa,CAKb,IAHA,IAAIG,EAAS,GACT3Y,EAAO,GAEX4Y,EAAA,EAAAC,EAA2BvS,OAAOwS,QAAQN,GAA1CI,EAAAC,EAAApY,OAAAmY,IAAwD,KAAAG,EAAAF,EAAAD,GAAAvK,EAAA/H,OAAA0S,GAAA,EAAA1S,CAAAyS,EAAA,GAA5CtU,EAA4C4J,EAAA,GAAvC7I,EAAuC6I,EAAA,GACxC,UAAR5J,IACAkU,EAAOM,KAAKxU,GACZzE,EAAKiZ,KAAKvX,YAAU8D,GAAOlD,QAAQ,KAG3CoV,EAAe,CACXiB,OAAQA,EAAQO,SAAU,CACtB,CACIlZ,KAAMA,EACN8T,gBAAiB,CACb,UACA,UACA,UACA,WAEJqF,qBAAsB,CAClB,UACA,UACA,UACA,cAOpB,MAAO,CACH/E,iBAAkBnN,EAAMkC,SAASkL,kBAAkB7I,EAAS7C,aAC5D8C,YAAaxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aAClDiG,SAAU3H,EAAMkC,SAASyF,SAASpD,EAAS7C,aAC3CxD,YAAa8B,EAAMkC,SAASmL,cAAc9I,EAAS7C,aACnD+H,SACAgH,iBAMgC,CACpCd,uBR5NkC,SAACjO,EAAa5D,GAAd,OAAyB,SAAA6C,GAC3DA,EAAS,CACLO,KAAMiR,IACNvQ,GAAIF,EACJ5D,aQyNJgS,eRrN0B,SAACpO,EAAa9I,GAAd,OAAuB,SAAA+H,GACjDA,EAAS,CACLO,KAAMkR,IACNxQ,GAAIF,EACJ9I,WQkNJ8J,eACAF,cACAX,yBACAmO,eRjN0B,SAACtO,EAAaxD,GAAd,OAA8B,SAAAyC,GACxDA,EAAS,CACLO,KAAMmR,IACNzQ,GAAIF,EACJxD,kBQ8MJkS,SCjUoB,SAAC1O,GACrB,OAAO,SAACf,EAAUqB,GAEd,IAGK3D,EAHS2D,IACYE,SAASC,aAAaT,GAE3CrD,WAEDA,IACKlB,YAAkBkB,KACnBA,EAAazB,YAAeyB,IAIhCsC,EAAS,CACLO,KAAMoR,IACNlR,OAAQC,IACRO,GAAIF,EACJJ,QAAS,KAGb7J,IAAciC,KAAK,mBAAoB,CAACkH,GAAIvC,IACvC2C,KAAK,SAACC,GACHN,EAAS,CACLO,KAAMoR,IACNlR,OAAQC,IACRO,GAAIF,EACJJ,QAASL,EAAIlI,QAElB,SAACkI,GACAN,EAAS,CACLO,KAAMoR,IACNlR,OAAQI,IACRI,GAAIF,EACJtH,MAAO6G,UDwRhBqD,CAQZ+K,IElTGkD,eACF,SAAAA,EAAYpT,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgT,IACfnT,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkT,GAAA7S,KAAAH,KAAMJ,KACDa,MAAQ,CACTwS,eAAgB,IAGpBpT,EAAKuL,iBAAmBvL,EAAKuL,iBAAiBL,KAAtBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IACxBA,EAAKqL,iBAAmBrL,EAAKqL,iBAAiBH,KAAtBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IAPTA,gFAWFf,GACbkB,KAAKM,SAAS,CAAC2S,eAAgBnU,6CAGlBqM,EAAelS,EAAOgS,GAAU,IACtCnM,EAAckB,KAAKJ,MAAMqF,YAAzBnG,WAEHsM,EAAmB,GACnBF,EAAmB,GAEnBD,GACAG,EAAmB/N,YAAeyB,GAAcqM,EAChDD,EAAmB,IAEZjS,IACPmS,EAAmBtM,EACnBoM,EAAmBC,GAEvBnL,KAAKJ,MAAMsC,WAAWlC,KAAKJ,MAAMuC,YAAaiJ,EAAkBF,oCAG3D,IAGEpM,EAAckB,KAAKJ,MAAMqF,YAAzBnG,WACAqD,EAAenC,KAAKJ,MAApBuC,YAED+Q,EAAcpU,GAA6B,KAAfA,EAElC,OACIW,EAAA9F,EAAA+F,cAACD,EAAA9F,EAAMqO,SAAP,KAGIvI,EAAA9F,EAAA+F,cAACgJ,EAAA,EAAD,KACIjJ,EAAA9F,EAAA+F,cAACyT,EAAA,EAAD,gBACA1T,EAAA9F,EAAA+F,cAACiJ,EAAA,EAAD,KAGIlJ,EAAA9F,EAAA+F,cAAC0T,EAAD,CACItU,WAAYA,EACZqD,YAAaA,MAOxB+Q,GAAezT,EAAA9F,EAAA+F,cAACgJ,EAAA,EAAD,KACZjJ,EAAA9F,EAAA+F,cAACyT,EAAA,EAAD,KACI1T,EAAA9F,EAAA+F,cAAC2T,GAAD,CAAgBlR,YAAaA,KAEjC1C,EAAA9F,EAAA+F,cAACiJ,EAAA,EAAD,KACIlJ,EAAA9F,EAAA+F,cAAC4T,GAAD,CAAepG,OAAQ,SACnBzN,EAAA9F,EAAA+F,cAAC6T,GAAD,CAAWpR,YAAaA,eAjEvBnB,IAAMC,WA8HnC+R,GAAelO,aA1BM,GA4BNC,mBA1BS,SAACtE,EAAOuE,GAE5B,IAAMC,EAAcxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aACrD+H,EAAS,GAENpL,EAAcmG,EAAdnG,WAEP,GAAImG,GAAexE,EAAMa,OAAOyM,QAAS,CAErC,IAAMC,EAAiBlP,EAAW9E,MAAM,KAAK,GACzCyG,EAAMa,OAAOyM,QAAQC,KAErB9D,EAASzJ,EAAMa,OAAOyM,QAAQC,IAEtC,MAAO,CACHD,QAAStN,EAAMa,OAAOyM,QACtB/J,SAAUvD,EAAMa,OAAO0C,SACvBnJ,MAAO4F,EAAMa,OAAOzG,MACpBoK,YAAaxE,EAAMkC,SAASC,aAAaoC,EAAS7C,aAClD+H,WASJ,CACIrH,aAAYX,aACZK,mBAAkBiR,iBVvGM,SAACrR,EAAahB,GAC1C,OAAO,SAACC,GACJA,EAAS,CACLO,KAAM8R,IACNpR,GAAIF,EACJhB,WAAYA,IAEhBC,EAASkB,EAAuBH,MUgGIY,aACpCI,eAAcF,eALP8B,CAObiO,cC/IF,SAASU,GAATrT,GAGI,IAHgC,IAAPsT,EAAOtT,EAAPsT,KACrBC,EAAkB,GAChBC,EAAS,GAAKF,EACXnY,EAAI,EAAGA,EAAImY,EAAMnY,IAEtBoY,EAAgBnB,KACZhT,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIsP,GAAID,EAAQpP,GAAIoP,EAAQ5V,IAAKzC,GAC9CiE,EAAA9F,EAAA+F,cAACqU,GAAD,CAAgB5R,YAAa3G,EAAEwY,eAI3C,OAAOJ,MAGLK,eAGF,SAAAA,EAAYrU,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiU,IACfpU,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmU,GAAA9T,KAAAH,KAAMJ,KACDa,MAAQ,CACTkT,KAAM,GAGV9T,EAAKD,MAAMiD,WAAW,KACtBhD,EAAKqU,aAAerU,EAAKqU,aAAanJ,KAAlBjL,OAAAkL,EAAA,EAAAlL,CAAAD,IAPLA,4EAUNsU,EAAK9a,GAAM,IAAAqH,EACaV,KAAKJ,MAA/BwU,EADa1T,EACb0T,WAAYvR,EADCnC,EACDmC,WAEN,SAATxJ,GAEA2G,KAAKM,SAAS,SAACkL,GACX,IAAK,IAAIhQ,EAAI,EAAGA,EAAI2Y,EAAK3Y,MAChB4Y,EAAW5Y,EAAEwY,aAAexY,EAAI,EAAIgQ,EAAUmI,OAC/C9Q,EAAWrH,EAAEwY,YAErB,MAAO,CACHL,KAAMQ,sCAOb,IAAAtQ,EAAA7D,KAGE2T,EAAQ3T,KAAKS,MAAbkT,KACAS,EAAcpU,KAAKJ,MAAnBwU,WAEP,OACI3U,EAAA9F,EAAA+F,cAACD,EAAA9F,EAAMqO,SAAP,KACIvI,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,CAAKO,UAAW,oBAAqBsK,YAAU,wBAC3CzP,EAAA9F,EAAA+F,cAAC4E,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,IACbhF,EAAA9F,EAAA+F,cAACgJ,EAAA,EAAD,KACIjJ,EAAA9F,EAAA+F,cAACyT,EAAA,EAAD,sBAGA1T,EAAA9F,EAAA+F,cAACiJ,EAAA,EAAD,KACIlJ,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7BmD,QAAS,kBAAMlE,EAAKqQ,aAAa,EAAG,UAD5C,oBAEAzU,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7BmD,QAAS,kBAAMlE,EAAKqQ,aAAa,EAAG,UAD5C,oBAEAzU,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7BmD,QAAS,kBAAMlE,EAAKqQ,aAAa,EAAG,UAD5C,oBAEAzU,EAAA9F,EAAA+F,cAACiF,EAAA,EAAD,CAAQE,MAAO,UAAWD,UAAW,OAC7BmD,QAAS,kBAAMlE,EAAKqQ,aAAa,EAAG,UAD5C,wBAQhBzU,EAAA9F,EAAA+F,cAAC2E,EAAA,EAAD,KACI5E,EAAA9F,EAAA+F,cAACgU,GAAD,CAAoBC,KAAMA,EAAMS,WAAYA,aA7D7BpT,IAAMC,WAgF1B0M,uBACX5I,YAXoB,SAACtE,GAAD,MAAY,CAChC2T,WAAY3T,EAAMkC,SAASyR,aAUF,CAACvR,eAC1BwR,YAAgBC,MAFL3G,CAGbsG","file":"static/js/18.32f96457.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote,\n            _async: true\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\n\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={2}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {Button, Card, CardBody, CardFooter} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    // if (component.props.canCopy) {\n                        await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory copying started in background: ${Name}`);\n                        } else {\n                            toast.info(`File copying started in background: ${Name}`);\n                        }\n                    // } else {\n                    //     toast.error(\"This remote does not support copying\");\n                    // }\n\n                } else {\n                    // if (component.props.canMove) {\n                        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory moving started in background: ${Name}`);\n                        } else {\n                            toast.info(`Directory moving started in background: ${Name}`);\n                        }\n                    // } else {\n                    //     toast.error(\"This remote does not support moving\");\n                    // }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item}) {\n\n    const {IsDir} = item;\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                    <i className={\"fa fa-remove fa-lg d-inline\"}/>\n                </Button>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                <i className={\"fa fa-remove fa-lg d-inline\"}/>\n            </Button>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    render() {\n        const {item, clickHandler, downloadHandle, deleteHandle, connectDragSource, gridMode/*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n        let modTime = new Date(Date.parse(ModTime));\n        // console.log(\"card\", gridMode);\n\n        if (gridMode === \"card\") {\n            return connectDragSource(\n                <div className={\"col-lg-3\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n                            <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            return connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)}><FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}</td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td>{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n\n}\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport isEmpty, {addColonAtLast, changeListVisibility, changeSearchFilter} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td></td>\n                <td><i className={\"fa fa-file-o\"}/> Go Up...</td>\n                <td></td>\n                <td></td>\n                <td></td>\n            </tr>);\n    }\n}\n\n\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo} = this.props;\n        const {remoteName} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} gridMode={gridMode} containerID={containerID}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move}\n                            />\n                        </React.Fragment>\n                    )\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><i className={\"fa fa-circle-o-notch fa-lg\"}/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table>\n                            <thead>\n                            <tr>\n                                <th/>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th>Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td/>\n                                            <th>Directories</th>\n                                            <td/>\n                                            <td/>\n                                            <td/>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td/>\n                                            <th>Files</th>\n                                            <td/>\n                                            <td/>\n                                            <td/>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td/>\n                                    <td>No files</td>\n                                    <td/>\n                                    <td/>\n                                    <td/>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`)\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","export const visibilityFilteringOptions = [\"Images\", \"Pdf\", \"Videos\"];","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: true});\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        this.setState((prevState) => {\n            return {\n                isAboutModalOpen: !prevState.isAboutModalOpen\n            }\n        }, () => {\n            if (this.state.isAboutModalOpen) {\n                const {containerID} = this.props;\n                this.props.getAbout(containerID);\n            }\n        });\n\n    };\n\n    handleCleanTrash = () => {\n\n        if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n            const {currentPath, containerID, fsInfo} = this.props;\n            let {remoteName} = currentPath;\n            if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(\"operations/cleanup\", {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            } else {\n                // Cleanup is not allowed\n                toast.error(\"Clearing trash is not allowed on this drive\");\n            }\n        }\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Grid</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData ? <Doughnut data={doughnutData}/> : <p>Loading</p>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    containerID: PropTypes.string.isRequired,\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    visibilityFilter: PropTypes.string,\n    gridMode: PropTypes.string,\n    setSearchQuery: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string,\n    remoteAbout: PropTypes.object,\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        doughnutData = {\n            labels: labels, datasets: [\n                {\n                    data: data,\n                    backgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                    hoverBackgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                }\n            ]\n        };\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>}\n\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n\n            this.setState((prevState) => {\n                for (let i = 0; i < nos; i++) {\n                    if (!backStacks[i.toString()] || i + 1 > prevState.cols)\n                        createPath(i.toString())\n                }\n                return {\n                    cols: nos\n                }\n            });\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}