{"version":3,"sources":["utils/RclonePropTypes.js","views/Base/RunningJobs/RunningJobs.js","actions/statusActions.js","views/Base/BackendStatusCard/BackendStatusCard.js","views/Base/Widgets/BandwidthWidget.js","views/Base/BandwidthStatusCard/BandwidthStatusCard.js","views/Home/Home.js"],"names":["prop_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","bytesPerSecond","rate","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","_ref","job","name","eta","percentage","speed","speedAvg","size","bytes","isNaN","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","value","className","formatBytes","secondsToStr","JobCardRow","_ref2","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","lg","GlobalStatus","_ref3","stats","checks","elapsedTime","deletes","errors","transfers","TransferringJobs","_ref4","transferring","undefined","map","item","idx","key","TransferringJobsRow","_ref5","RunningJobs","props","context","_this","Object","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","toggleShowing","setState","prevState","isShowing","state","_this2","_this$props","jobs","isConnected","lineChartData","mode","sm","react_chartjs_2__WEBPACK_IMPORTED_MODULE_15__","data","length","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_12__","color","React","Component","connect","ownProps","speedData","status","labels","data1","data2","dataLength","slice","forEach","push","Math","ceil","bytesToKB","toFixed","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","error","getStatus","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","dispatch","getState","_getState","wrap","_context","prev","next","checkStatus","axiosInstance","post","then","res","type","FETCH_STATUS","REQUEST_SUCCESS","payload","REQUEST_ERROR","stop","_x","_x2","apply","arguments","enableCheckStatus","shouldEnable","_callee2","_context2","ENABLE_STATUS_CHECK","_x3","getBandwidth","_callee3","_context3","GET_BANDWIDTH","_x4","setBandwidth","newRate","_callee4","_context4","SET_BANDWIDTH","_x5","TaskModal","ReactDOM","createPortal","_RunningJobs__WEBPACK_IMPORTED_MODULE_11__","document","getElementById","MODAL_ROOT_ELEMENT","BackendStatusCard","toggleCheckStatus","console","log","refreshInterval","setInterval","STATUS_REFRESH_TIMEOUT","clearInterval","_this$props2","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","username","USER_NAME_KEY","StatusText","connectivityStatus","userName","defaultProps","isDisabled","BandwidthWidget","cssModule","header","icon","children","invert","attributes","objectWithoutProperties","progress","style","card","bgColor","classes","mapToCssModules","classNames","react_default","Card","assign","CardBody","Progress","BandwidthStatusCard","classCallCheck","possibleConstructorReturn","getPrototypeOf","_this$state","bandwidthText","hasError","toast","changeBandwidthInput","e","inputValue","target","validateInput","validateSizeSuffix","toggleShowChangeBandwidth","showChangeBandwidth","_this$state2","bandwidth","Row","Col","Widgets_BandwidthWidget","Button","CardHeader","Form","onSubmit","FormGroup","row","Label","for","Input","valid","invalid","id","onChange","FormFeedback","Home","data-test","Base_BandwidthStatusCard_BandwidthStatusCard"],"mappings":"2FAAA,IAAAA,EAAAC,EAAA,GAE4BC,YAAoB,CAC5CA,QAAgB,CACZC,SAAUD,SAAiBE,WAC3BC,OAAQH,QAAgBE,WACxBE,KAAMJ,SAAiBE,WACvBG,UAAWL,SAAiBE,WAC5BI,OAAQN,SAAiBE,aAE7BF,WAG6BA,QAAgB,CAC7CO,WAAYP,SAAiBE,WAC7BM,WAAYR,SAAiBE,aAGAF,SAEIA,OAELA,OAEPA,QAAgB,CAErCS,KAAMT,SAAiBE,WACvBE,KAAMJ,SAAiBE,WACvBQ,KAAMV,SACNW,SAAUX,SACVY,QAASZ,SAAiBE,WAC1BW,MAAOb,OAAeE,aAIIF,QAAgB,CAC1Cc,eAAgBd,SAAiBE,WACjCa,KAAMf,SAAiBE,6MC7BrBc,EAAU,CACZC,SAAU,CACNC,SAAS,EACTC,OAAQC,kBAEZC,qBAAqB,EACrBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,KAGrBC,MAAO,CAAC,CACJF,MAAO,CACHG,SAAS,OAKzB,SAASC,EAATC,GAAwB,IAANC,EAAMD,EAANC,IACPC,EAAuDD,EAAvDC,KAAMC,EAAiDF,EAAjDE,IAAKC,EAA4CH,EAA5CG,WAAYC,EAAgCJ,EAAhCI,MAAOC,EAAyBL,EAAzBK,SAAUC,EAAeN,EAAfM,KAAMC,EAASP,EAATO,MACrD,OAAIN,IAASO,MAAMJ,GAEPK,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACJH,EAAAC,EAAAC,cAACE,EAAA,EAAD,qBACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAAA,SAAIV,GADR,IAEIQ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUC,MAAOb,EAAYc,UAAW,QAASd,EAAjD,MAFJ,IAGIM,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yBAAyBO,YAAYd,GAAxC,MAHJ,IAIIK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAAiCO,YAAYb,GAAhD,MAJJ,IAKII,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qCAAqCO,YAAYX,IALxD,IAMIE,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAwBO,YAAYZ,IACvCG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAuBQ,YAAajB,GAAvC,cAKL,KAGX,SAASkB,EAATC,GAA2B,IAANrB,EAAMqB,EAANrB,IACVC,EAAiCD,EAAjCC,KAAME,EAA2BH,EAA3BG,WAAYC,EAAeJ,EAAfI,MAAOE,EAAQN,EAARM,KAChC,OACIG,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACMjB,GAAQF,EAAUK,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAI,IAAKxB,EAAd,IAAqBiB,YAAYZ,GAAjC,OAA4CY,YAAYd,GAAxD,OAChBK,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAI,IAAT,gBAGRhB,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAI,IAAIhB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUC,MAAOb,EAAYc,UAAW,QAASd,EAAjD,SAS7B,SAASuB,EAATC,GAA+B,IAARC,EAAQD,EAARC,MACZxB,EAAiEwB,EAAjExB,MAAOG,EAA0DqB,EAA1DrB,MAAOsB,EAAmDD,EAAnDC,OAAQC,EAA2CF,EAA3CE,YAAaC,EAA8BH,EAA9BG,QAASC,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,UAC3D,OACIxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAYJ,EAAAC,EAAAC,cAAA,+BACZF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qCAAqCO,YAAYX,IACpDE,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAAiCO,YAAYd,GAAhD,MACAK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAA0BkB,GAC7BpB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,2BAA2BoB,GAC9BtB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAAiCQ,YAAaW,IACjDrB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAA0BqB,GAC7BvB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAA6BsB,KAShD,SAASC,EAATC,GAA0C,IAAfC,EAAeD,EAAfC,aACvB,YAAqBC,IAAjBD,EACOA,EAAaE,IAAI,SAACC,EAAMC,GAC3B,OAAQ/B,EAAAC,EAAAC,cAACb,EAAD,CAAS2C,IAAKD,EAAKxC,IAAKuC,MAGjC,KAGX,SAASG,EAATC,GAA6C,IAAfP,EAAeO,EAAfP,aAC1B,YAAqBC,IAAjBD,EACOA,EAAaE,IAAI,SAACC,EAAMC,GAC3B,OAAQ/B,EAAAC,EAAAC,cAACS,EAAD,CAAYqB,IAAKD,EAAKxC,IAAKuC,MAGpC,SAILK,cAEF,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAMjBQ,cAAgB,WACZP,EAAKQ,SAAS,SAACC,GACX,MAAO,CACHC,WAAYD,EAAUC,cAR9BV,EAAKW,MAAQ,CACTD,WAAW,GAHSV,wEAiBnB,IAAAY,EAAAT,KAAAU,EACsCV,KAAKL,MAAzCgB,EADFD,EACEC,KAAMC,EADRF,EACQE,YAAaC,EADrBH,EACqBG,cACnB3B,EAAgByB,EAAhBzB,aACA4B,EAAQd,KAAKL,MAAbmB,KACP,MAAa,gBAATA,EACIF,EAEIrD,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKyC,GAAI,GAAIxC,GAAI,GACbhB,EAAAC,EAAAC,cAACe,EAAD,CAAcE,MAAOiC,KAGzBpD,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKyC,GAAI,GAAIxC,GAAI,GACbhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,cAGAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACXR,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAMC,KAAMJ,EAAe7E,QAASA,QAKpDuB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKyC,GAAI,GAAIxC,GAAI,GACbhB,EAAAC,EAAAC,cAACuB,EAAD,CAAkBE,aAAcA,MAKpC3B,EAAAC,EAAAC,cAAA,uCAGI,SAATqD,EACHF,EAGIrD,EAAAC,EAAAC,cAAC+B,EAAD,CAAqBN,aAAcA,IAG/B3B,EAAAC,EAAAC,cAAA,uCAGI,UAATqD,EACH5B,GAAgBA,EAAagC,OAAS,EAElC3D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,UAAU,oCACZR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYwD,QAAS,kBAAMV,EAAKL,kBAAhC,WACI7C,EAAAC,EAAAC,cAAA,OAAKM,UAAU,uBACXR,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAQC,MAAM,QACV9D,EAAAC,EAAAC,cAAA,KAAGM,UAAU,yBAIzBR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUG,UAAYiC,KAAKQ,MAAMD,UAAuB,GAAX,UACzChD,EAAAC,EAAAC,cAAC+B,EAAD,CAAqBN,aAAcA,MAK5C,UAjBJ,SA9DWoC,IAAMC,WAyKjBC,gBA9ES,SAAChB,EAAOiB,GAE5B,IAAMC,EAAYlB,EAAMmB,OAAOzE,MAC3B2D,EAAgB,GACpB,GAAIa,EAAW,CACX,IAAIE,EAAS,GACTC,EAAQ,GACRC,EAAQ,GAENC,EAAaL,EAAUR,OAETQ,EAAUM,MAAMD,EAAa,GAAIA,EAAa,GAEtDE,QAAQ,SAAC5C,EAAMC,GACvBsC,EAAOM,KAAKC,KAAKC,KAAK/C,EAAKT,cAC3BiD,EAAMK,KAAKG,YAAUhD,EAAKnC,OAAOoF,QAAQ,IACzCR,EAAMI,KAAKG,YAAUhD,EAAKlC,UAAUmF,QAAQ,MAIhDzB,EAAgB,CACZe,OAAQA,EACRW,SAAU,CACN,CACIC,MAAO,eACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBxC,KAAMY,GAEV,CACIW,MAAO,uBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,sBACjBC,YAAa,iBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,iBAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBxC,KAAMa,KAOtB,MAAO,CACHnB,KAAMH,EAAMmB,OAAOhB,KACnBC,YAAaJ,EAAMmB,OAAOf,YAC1B8C,MAAOlD,EAAMmB,OAAO+B,MACpB7C,kBAIgC,GAAzBW,CAA6B9B,oNC5Q/BiE,EAAY,iCAAA9G,EAAAiD,OAAA8D,EAAA,EAAA9D,CAAA+D,EAAArG,EAAAsG,KAAM,SAAAC,EAAOC,EAAUC,GAAjB,IAAAC,EAAA,OAAAL,EAAArG,EAAA2G,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAJ,EAEVD,IAFUC,EAEpBvC,OACI4C,aACPC,IAAcC,KAAK,cAAcC,KAAK,SAAAC,GAAG,OAAIX,EAAS,CAClDY,KAAMC,IACNlD,OAAQmD,IACRC,QAASJ,EAAI1D,QACb,SAAAyC,GAAK,OAAIM,EAAS,CAClBY,KAAMC,IACNlD,OAAQqD,IACRD,QAASrB,MAXU,wBAAAU,EAAAa,SAAAlB,MAAN,gBAAAmB,EAAAC,GAAA,OAAAtI,EAAAuI,MAAApF,KAAAqF,YAAA,IAsBZC,EAAoB,SAACC,GAAD,sBAAApH,EAAA2B,OAAA8D,EAAA,EAAA9D,CAAA+D,EAAArG,EAAAsG,KAAkB,SAAA0B,EAAMxB,GAAN,OAAAH,EAAArG,EAAA2G,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OAC/CN,EAAS,CACLY,KAAMc,IACNX,QAASQ,IAHkC,wBAAAE,EAAAR,SAAAO,MAAlB,gBAAAG,GAAA,OAAAxH,EAAAiH,MAAApF,KAAAqF,YAAA,IAYpBO,EAAe,iCAAAnH,EAAAqB,OAAA8D,EAAA,EAAA9D,CAAA+D,EAAArG,EAAAsG,KAAM,SAAA+B,EAAM7B,GAAN,OAAAH,EAAArG,EAAA2G,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAE9BE,IAAcC,KAAK,gBAAgBC,KAAK,SAAAC,GAAG,OAAIX,EAAS,CACpDY,KAAMmB,IACNpE,OAAQmD,IACRC,QAASJ,EAAI1D,QACb,SAAAyC,GAAK,OAAIM,EAAS,CAClBY,KAAMmB,IACNpE,OAAQqD,IACRD,QAASrB,MATiB,wBAAAoC,EAAAb,SAAAY,MAAN,gBAAAG,GAAA,OAAAvH,EAAA2G,MAAApF,KAAAqF,YAAA,IAkBfY,EAAe,SAACC,GAAD,sBAAAjH,EAAAa,OAAA8D,EAAA,EAAA9D,CAAA+D,EAAArG,EAAAsG,KAAa,SAAAqC,EAAMnC,GAAN,OAAAH,EAAArG,EAAA2G,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OAErCE,IAAcC,KAAK,eAAgB,CAAC1I,KAAMmK,IAAUxB,KAAK,SAAAC,GAAG,OAAIX,EAAS,CACrEY,KAAMyB,IACN1E,OAAQmD,IACRC,QAASJ,EAAI1D,QACb,SAAAyC,GAAK,OAAIM,EAAS,CAClBY,KAAMyB,IACN1E,OAAQqD,IACRD,QAASrB,MATwB,wBAAA0C,EAAAnB,SAAAkB,MAAb,gBAAAG,GAAA,OAAArH,EAAAmG,MAAApF,KAAAqF,YAAA,0LC9C5B,SAASkB,IACL,OAAOC,IAASC,aACZlJ,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,CAAa5F,KAAM,UAEpB6F,SAASC,eAAeC,UAMzBC,6MAmBFC,kBAAoB,WAAM,IAAArG,EACmBb,EAAKF,MAAvC4E,EADe7D,EACf6D,YAAae,EADE5E,EACF4E,kBACpB0B,QAAQC,IAAI1C,EAAae,GACzBA,GAAmBf,wFAnBF,IAAA9D,EAAAT,KAGjBA,KAAKL,MAAMgE,YACX3D,KAAKkH,gBAAkBC,YAAY,kBAAM1G,EAAKd,MAAMgE,aAAayD,oDAMjEC,cAAcrH,KAAKkH,kDAkBd,IAAAI,EACoCtH,KAAKL,MAAvCiB,EADF0G,EACE1G,YAAaE,EADfwG,EACexG,KAAMyD,EADrB+C,EACqB/C,YAEpBgD,EAAYC,aAAaC,QAAQC,KACjCC,EAAWH,aAAaC,QAAQG,KAGtC,MAAa,SAAT9G,EAGIvD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIK,UAAW,gBAAkB6C,EAAc,mBAAqB,wBAChErD,EAAAC,EAAAC,cAACE,EAAA,EAAD,sBAGAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACoK,EAAD,CAAYtD,YAAaA,EAAauD,mBAAoBlH,EAAa2G,UAAWA,EACtEQ,SAAUJ,MAO9BpK,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,KACIb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQ+G,KAAK,UAAUzD,QAASnB,KAAK+G,kBAC7BhJ,UAAW6C,EAAc,6BAA+B,gCADhE,IACkG2D,EAAc3D,EAAc,YAAc,eAAiB,YAE7JrD,EAAAC,EAAAC,cAAC8I,EAAD,cA3DYjF,IAAMC,WA0EtC,SAASsG,EAAThL,GAA4E,IAAvDiL,EAAuDjL,EAAvDiL,mBAAoBvD,EAAmC1H,EAAnC0H,YAAagD,EAAsB1K,EAAtB0K,UAAWQ,EAAWlL,EAAXkL,SAC7D,OAAKxD,EAGDuD,EAEIvK,EAAAC,EAAAC,cAAA,oEAA2DF,EAAAC,EAAAC,cAAA,WAA3D,yBAAuF8J,EACnFhK,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,6BAA6BsK,GAItCxK,EAAAC,EAAAC,cAAA,oFAA4E8J,EAA5E,KATGhK,EAAAC,EAAAC,cAAA,iFA8CfqJ,EAAkBkB,aANG,CACjBlH,KAAM,QAaKU,gBANS,SAAAhB,GAAK,MAAK,CAC9BI,YAAaJ,EAAMmB,OAAOf,YAC1BqH,WAAYzH,EAAMmB,OAAOsG,WACzB1D,YAAa/D,EAAMmB,OAAO4C,cAGU,CAACZ,cAAW2B,uBAArC9D,CAAyDsF,yMChIlEoB,mLACO,IAAAxH,EACuFV,KAAKL,MAA1F5B,EADF2C,EACE3C,UAAWoK,EADbzH,EACayH,UAAWC,EADxB1H,EACwB0H,OAAQC,EADhC3H,EACgC2H,KAAMhH,EADtCX,EACsCW,MAAOvD,EAD7C4C,EAC6C5C,MAAOwK,EADpD5H,EACoD4H,SAAUC,EAD9D7H,EAC8D6H,OAAWC,EADzE1I,OAAA2I,EAAA,EAAA3I,CAAAY,EAAA,+EAICgI,EAAW,CAACC,MAAO,GAAItH,MAAOA,EAAOvD,MAAOA,GAC5C8K,EAAO,CAACD,MAAO,GAAIE,QAAS,GAAIR,KAAMA,GAExCE,IACAG,EAASC,MAAQ,iBACjBD,EAASrH,MAAQ,GACjBuH,EAAKD,MAAQ,aACbC,EAAKC,QAAU,MAAQxH,GAG3B,IAAMyH,EAAUC,0BAAgBC,IAAWjL,EAAW6K,EAAKD,MAAOC,EAAKC,SAAUV,GAGjF,OAFAO,EAASC,MAAQK,IAAW,wBAAyBN,EAASC,OAG1DM,EAAAzL,EAAAC,cAACyL,EAAA,EAADpJ,OAAAqJ,OAAA,CAAMpL,UAAW+K,GAAaN,GAC1BS,EAAAzL,EAAAC,cAAC2L,EAAA,EAAD,KACIH,EAAAzL,EAAAC,cAAA,OAAKM,UAAU,iCACXkL,EAAAzL,EAAAC,cAAA,KAAGM,UAAW6K,EAAKP,QAEvBY,EAAAzL,EAAAC,cAAA,OAAKM,UAAU,WAAWqK,GAC1Ba,EAAAzL,EAAAC,cAAA,SAAOM,UAAU,8CAA8CuK,GAC/DW,EAAAzL,EAAAC,cAAC4L,EAAA,EAAD,CAAUtL,UAAW2K,EAASC,MAAOtH,MAAOqH,EAASrH,MAAOvD,MAAO4K,EAAS5K,iBA1BlEyD,aAkC9B2G,EAAgBF,aA3CK,CACjBI,OAAQ,SACRC,KAAM,cACNhH,MAAO,OACPvD,MAAO,KACPwK,SAAU,WACVC,QAAQ,GAuCGL,2GCnDToB,sBAEF,SAAAA,EAAY3J,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAyJ,EAAA,EAAAzJ,CAAAE,KAAAsJ,IACxBzJ,EAAAC,OAAA0J,EAAA,EAAA1J,CAAAE,KAAAF,OAAA2J,EAAA,EAAA3J,CAAAwJ,GAAAnJ,KAAAH,KAAML,EAAOC,KAWjBgG,aAAe,YAEXA,EADuB/F,EAAKF,MAArBiG,iBAbiB/F,EAqB5BoG,aAAe,WAAM,IAAAyD,EACiB7J,EAAKW,MAAhCmJ,EADUD,EACVC,cAAeC,EADLF,EACKE,SAElBD,IAAkBC,GAElB3D,EADuBpG,EAAKF,MAArBsG,cACM0D,GAEbE,IAAMnG,MAAM,kBA5BQ7D,EAqC5BiK,qBAAuB,SAACC,GACpB,IAAMC,EAAaD,EAAEE,OAAOnM,MACtBoM,EAAgBC,YAAmBH,GACzCnK,EAAKQ,SAAS,CACVsJ,cAAeK,EACfJ,UAAWM,KA1CSrK,EAwD5BuK,0BAA4B,WACxBvK,EAAKQ,SAAS,SAACC,GAAD,MAAgB,CAE1B+J,qBAAsB/J,EAAU+J,wBAzDpCxK,EAAKW,MAAQ,CACTmJ,cAAe,GACfC,UAAU,EACVS,qBAAqB,GALDxK,mFAkDxBG,KAAK4F,gDAaA,IAAA0E,EACkDtK,KAAKQ,MAArDmJ,EADFW,EACEX,cAAeC,EADjBU,EACiBV,SAAUS,EAD3BC,EAC2BD,oBACzBE,EAAavK,KAAKL,MAAlB4K,UAEP,OAEItB,EAAAzL,EAAAC,cAAC+M,EAAA,EAAD,KACIvB,EAAAzL,EAAAC,cAACgN,EAAA,EAAD,CAAKlM,GAAI8L,EAAsB,EAAI,GAAItJ,GAAI,IACvCkI,EAAAzL,EAAAC,cAACiN,EAAD,CAAiBrC,KAAK,mBAAmBhH,MAAM,SAAS+G,OAAQmC,EAAUxO,KAAMwC,GAAI,EAAGwC,GAAI,IAA3F,qBACsBkI,EAAAzL,EAAAC,cAACkN,EAAA,EAAD,CAAQtJ,MAAM,OAAOF,QAASnB,KAAKoK,2BAA2BnB,EAAAzL,EAAAC,cAAA,KAChFM,UAAU,+BAGlBkL,EAAAzL,EAAAC,cAACgN,EAAA,EAAD,CAAKlM,GAAI,EAAGwC,GAAI,GAAIhD,UAAWsM,EAAsB,GAAK,UACtDpB,EAAAzL,EAAAC,cAACyL,EAAA,EAAD,KACID,EAAAzL,EAAAC,cAACmN,EAAA,EAAD,yBACA3B,EAAAzL,EAAAC,cAAC2L,EAAA,EAAD,KACIH,EAAAzL,EAAAC,cAACoN,EAAA,EAAD,CAAMC,SAAU9K,KAAKiG,cACjBgD,EAAAzL,EAAAC,cAACsN,EAAA,EAAD,CAAWC,KAAG,GAGV/B,EAAAzL,EAAAC,cAACwN,EAAA,EAAD,CAAOC,IAAI,iBAAiBnK,GAAI,GAAhC,iBACAkI,EAAAzL,EAAAC,cAACgN,EAAA,EAAD,CAAK1J,GAAI,GACLkI,EAAAzL,EAAAC,cAAC0N,EAAA,EAAD,CAAOvG,KAAK,OAAO9G,MAAO6L,EACnByB,OAAQxB,EAAUyB,QAASzB,EAC3B0B,GAAG,iBAAiBC,SAAUvL,KAAK8J,uBAE1Cb,EAAAzL,EAAAC,cAAC+N,EAAA,EAAD,CAAcJ,OAAK,GAAnB,wBACAnC,EAAAzL,EAAAC,cAAC+N,EAAA,EAAD,mEAORvC,EAAAzL,EAAAC,cAACkN,EAAA,EAAD,CAAQ5M,UAAU,cAAcsD,MAAM,UAAUuD,KAAK,UAArD,mBApGEtD,IAAMC,YA4IzBC,cA5BS,SAAAhB,GAAK,MAAK,CAI9BI,YAAaJ,EAAMmB,OAAOf,YAI1B2J,UAAW/J,EAAMmB,OAAO4I,YAoBY,CAAC3E,iBAAcK,kBAAxCzE,CAAuD8H,WC9IhEmC,mLAGO,IACElH,EAAevE,KAAKL,MAApB4E,YACDgD,EAAYC,aAAaC,QAAQC,KACvC,OACIuB,EAAAzL,EAAAC,cAAA,OAAKiO,YAAU,iBACXzC,EAAAzL,EAAAC,cAAA,2CACAwL,EAAAzL,EAAAC,cAAA,yEAGAwL,EAAAzL,EAAAC,cAAC+M,EAAA,EAAD,KACIvB,EAAAzL,EAAAC,cAACgN,EAAA,EAAD,CAAKlM,GAAI,EAAGwC,GAAI,IACZkI,EAAAzL,EAAAC,cAACqJ,EAAA,EAAD,CAAmBS,UAAWA,EAAWzG,KAAM,UAEnDmI,EAAAzL,EAAAC,cAACgN,EAAA,EAAD,CAAKlM,GAAI,EAAGwC,GAAI,IACZkI,EAAAzL,EAAAC,cAACkO,EAAD,QAGR1C,EAAAzL,EAAAC,cAAA,kBACC8G,EAAc0E,EAAAzL,EAAAC,cAACiC,EAAA,EAAD,CAAaoB,KAAM,gBAAmBmI,EAAAzL,EAAAC,cAAA,mCArBlD6D,IAAMC,WAmCVC,sBARS,SAAAhB,GAAK,MAAK,CAC9B+D,YAAa/D,EAAMmB,OAAO4C,cAOU,GAAzB/C,CAA6BiK","file":"static/js/19.a22da4f5.chunk.js","sourcesContent":["import * as PropTypes from \"prop-types\";\n\nexport const PROP_FS_INFO = PropTypes.oneOfType([\n    PropTypes.shape({\n        Features: PropTypes.object.isRequired,\n        Hashes: PropTypes.array.isRequired,\n        Name: PropTypes.string.isRequired,\n        Precision: PropTypes.number.isRequired,\n        String: PropTypes.string.isRequired\n    }),\n    PropTypes.object\n]);\n\nexport const PROP_CURRENT_PATH = PropTypes.shape({\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired\n});\n\nexport const PROP_CONTAINER_ID = PropTypes.string;\n\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\n\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\n\nexport const PROP_ITEM = PropTypes.shape({\n\n    Path: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    Size: PropTypes.number,\n    MimeType: PropTypes.string,\n    ModTime: PropTypes.string.isRequired,\n    IsDir: PropTypes.bool.isRequired\n\n});\n\nexport const PROP_BANDWIDTH = PropTypes.shape({\n    bytesPerSecond: PropTypes.number.isRequired,\n    rate: PropTypes.string.isRequired\n\n});","import React from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Progress, Row} from \"reactstrap\";\nimport {bytesToKB, formatBytes, secondsToStr} from \"../../../utils/Tools\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {Line} from \"react-chartjs-2\";\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\n\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }],\n        xAxes: [{\n            ticks: {\n                display: false\n            }\n        }]\n    }\n};\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    if (name && !isNaN(speed)) {\n\n        return (<Card>\n            <CardHeader>Running Jobs</CardHeader>\n            <CardBody>\n                <p>{name}</p> {/*Name of the file*/}\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\n                <p><strong>ETA: </strong>{secondsToStr(eta)} seconds</p>\n            </CardBody>\n\n        </Card>);\n    }\n    return null;\n}\n\nfunction JobCardRow({job}) {\n    const {name, percentage, speed, size} = job;\n    return (\n        <React.Fragment>\n            <Row>\n                {(size && speed) ? (<Col lg={12}>{name}({formatBytes(size)}) - {formatBytes(speed)}PS </Col>) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <p><strong>Bytes Transferred: </strong>{formatBytes(bytes)}</p>\n                <p><strong>Average Speed: </strong>{formatBytes(speed)}PS</p>\n                <p><strong>Checks: </strong>{checks}</p>\n                <p><strong>Deletes: </strong>{deletes}</p>\n                <p><strong>Running since: </strong>{secondsToStr(elapsedTime)}</p>\n                <p><strong>Errors: </strong>{errors}</p>\n                <p><strong>Transfers: </strong>{transfers}</p>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n\n}\n\nfunction TransferringJobs({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCardRow key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isShowing: true\n        }\n    }\n\n    toggleShowing = () => {\n        this.setState((prevState) => {\n            return {\n                isShowing: !prevState.isShowing\n            }\n        })\n    };\n\n\n\n    render() {\n        const {jobs, isConnected, lineChartData} = this.props;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={4}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n\n                        <Col sm={12} lg={4}>\n                            <Card>\n                                <CardHeader>\n                                    Speed\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-wrapper\">\n                                        <Line data={lineChartData} options={options}/>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className=\"progress-modal d-none d-sm-block\">\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\n                            <div className=\"card-header-actions\">\n                                <Button color=\"link\">\n                                    <i className=\"fa fa-close fa-lg\"/>\n                                </Button>\n                            </div>\n                        </CardHeader>\n                        <CardBody className={!this.state.isShowing ? \"d-none\" : \"\"}>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n    }\n}\n\nRunningJobs.propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    jobs: PropTypes.object.isRequired,\n    error: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const speedData = state.status.speed;\n    let lineChartData = {};\n    if (speedData) {\n        let labels = [];\n        let data1 = [];\n        let data2 = [];\n\n        const dataLength = speedData.length;\n        //\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\n        // console.log(limitedData.length);\n        limitedData.forEach((item, idx) => {\n            labels.push(Math.ceil(item.elapsedTime));\n            data1.push(bytesToKB(item.speed).toFixed(2));\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\n        });\n\n        // console.log(data1, data2);\n        lineChartData = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Speed (kbps)',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data1,\n                },\n                {\n                    label: 'Average Speed (kbps)',\n                    fill: true,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(187,69,14,0.4)',\n                    borderColor: 'rgb(192,76,58)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgb(187,69,14)',\n                    pointBackgroundColor: '#ff7459',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data2,\n                }\n            ],\n        };\n    }\n\n\n    return {\n        jobs: state.status.jobs,\n        isConnected: state.status.isConnected,\n        error: state.status.error,\n        lineChartData\n    }\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n","import axiosInstance from \"../utils/API/API\";\nimport {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\n\n/**\n * Gets the current status of the rclone backend.\n * Depends upon state.status.checkStatus to execute the http request, if set to false, does not send any http request\n * @returns {Function}\n */\nexport const getStatus = () => async (dispatch, getState) => {\n    // console.log(\"get Status\");\n    const {status} = getState();\n    if (status.checkStatus) {\n        axiosInstance.post('core/stats').then(res => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_SUCCESS,\n            payload: res.data\n        }), error => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n    }\n};\n\n/**\n * Enables or disables the check status functionality to improve network performance.\n * Modifies state.status.checkStatus according to the passed value.\n * @param shouldEnable {boolean} It specifies whether to check for status updates from the backend or skip checking it\n * @returns {Function}\n */\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\n    dispatch({\n        type: ENABLE_STATUS_CHECK,\n        payload: shouldEnable\n    })\n};\n\n\n/**\n * Gets the current bandwidth set in the rclone backend.\n * @returns {Function}\n */\nexport const getBandwidth = () => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post('core/bwlimit').then(res => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n/**\n * Changes the current bandwidth limit of the rclone backend.\n * @param newRate {string} Human readable format of size eg: 1M|2M|1.2G specifying 1MB, 2MB, 1.2GB respectively.\n * @returns {Function}\n */\nexport const setBandwidth = (newRate) => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post('core/bwlimit', {rate: newRate}).then(res => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\nimport {IP_ADDRESS_KEY, MODAL_ROOT_ELEMENT, STATUS_REFRESH_TIMEOUT, USER_NAME_KEY} from \"../../../utils/Constants\";\n\n/**\n * Functional component Modal which is placed in the element with id \"modal-root\" in index.html using React.createPortal\n * @returns {{children, implementation, containerInfo, $$typeof, key}}\n * @constructor\n */\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(MODAL_ROOT_ELEMENT));\n}\n\n/**\n * Component for display and monitoring of backend rclone status. Auto refresh status in redux store every 5 seconds.\n */\nclass BackendStatusCard extends React.Component {\n\n\n    componentWillMount() {\n\n        // Check if the connection to the backend is active\n        this.props.getStatus();\n        this.refreshInterval = setInterval(() => this.props.getStatus(), STATUS_REFRESH_TIMEOUT);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    /**\n     * Enable or disable checking of status request by http request to the backend.\n     */\n    toggleCheckStatus = () => {\n        const {checkStatus, enableCheckStatus} = this.props;\n        console.log(checkStatus, enableCheckStatus);\n        enableCheckStatus(!checkStatus);\n    };\n\n    /**\n     * Renders the component with mode.\n     * Card: Enables the card mode.\n     * Default: Table mode (Grid)\n     * @returns {*}\n     */\n    render() {\n        const {isConnected, mode, checkStatus} = this.props;\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        const username = localStorage.getItem(USER_NAME_KEY);\n\n\n        if (mode === \"card\")\n            return (\n\n                <Card\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        rclone status\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\n                                    userName={username}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            );\n    }\n}\n\n/**\n *\n * @param connectivityStatus    {boolean} Current connectivity status to the backend.\n * @param checkStatus           {boolean} Specify whether to check the status or skip.\n * @param ipAddress             {string} IP Address of the backend\n * @param userName              {string} User name of the currently logged in user.\n * @returns {*}\n * @constructor\n */\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\n    if (!checkStatus) {\n        return <p>Not monitoring connectivity status. Tap the icon in navbar to start.</p>\n    }\n    if (connectivityStatus) {\n        return (\n            <p>The rclone backend is connected and working as expected.<br/>Current IP address is {ipAddress}\n                <br/><strong> Username: </strong>{userName}</p>\n        );\n    } else {\n        return (\n            <p>Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.</p>\n\n        )\n    }\n}\n\nconst propTypes = {\n    /**\n     * Used to specify mode of render : card/ grid.\n     */\n    mode: PropTypes.string.isRequired,\n    /**\n     * Boolean to represent internet connectivity\n     */\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Boolean to represent whether checking for status at interval is allowed\n     */\n    checkStatus: PropTypes.bool.isRequired,\n\n\n    /**\n     * Function to enable or disable status check\n     */\n    enableCheckStatus: PropTypes.func.isRequired,\n    /**\n     * Get the current status\n     */\n    getStatus: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    isDisabled: state.status.isDisabled,\n    checkStatus: state.status.checkStatus\n});\n\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, CardBody, Progress} from 'reactstrap';\nimport classNames from 'classnames';\nimport {mapToCssModules} from 'reactstrap/lib/utils';\n\nconst propTypes = {\n    header: PropTypes.string,\n    icon: PropTypes.string,\n    color: PropTypes.string,\n    value: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    invert: PropTypes.bool,\n};\n\nconst defaultProps = {\n    header: '87.500',\n    icon: 'icon-people',\n    color: 'info',\n    value: '25',\n    children: 'Visitors',\n    invert: false,\n};\n\nclass BandwidthWidget extends Component {\n    render() {\n        const {className, cssModule, header, icon, color, value, children, invert, ...attributes} = this.props;\n\n        // demo purposes only\n        const progress = {style: '', color: color, value: value};\n        const card = {style: '', bgColor: '', icon: icon};\n\n        if (invert) {\n            progress.style = 'progress-white';\n            progress.color = '';\n            card.style = 'text-white';\n            card.bgColor = 'bg-' + color;\n        }\n\n        const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\n        progress.style = classNames('progress-xs mt-3 mb-0', progress.style);\n\n        return (\n            <Card className={classes} {...attributes}>\n                <CardBody>\n                    <div className=\"h1 text-muted text-right mb-2\">\n                        <i className={card.icon}></i>\n                    </div>\n                    <div className=\"h4 mb-0\">{header}</div>\n                    <small className=\"text-muted text-uppercase font-weight-bold\">{children}</small>\n                    <Progress className={progress.style} color={progress.color} value={progress.value}/>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nBandwidthWidget.propTypes = propTypes;\nBandwidthWidget.defaultProps = defaultProps;\n\nexport default BandwidthWidget;","import React from \"react\";\nimport BandwidthWidget from \"../Widgets/BandwidthWidget\";\nimport {validateSizeSuffix} from \"../../../utils/Tools\";\nimport {toast} from \"react-toastify\";\nimport {Button, Card, CardBody, CardHeader, Col, Form, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\nimport {connect} from \"react-redux\";\nimport {getBandwidth, setBandwidth} from \"../../../actions/statusActions\";\nimport * as PropTypes from \"prop-types\";\nimport {PROP_BANDWIDTH} from \"../../../utils/RclonePropTypes\";\n\n\nclass BandwidthStatusCard extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            bandwidthText: \"\",\n            hasError: false,\n            showChangeBandwidth: false\n        };\n    }\n\n    /**\n     * Get the current bandwidth from the backend\n     */\n    getBandwidth = () => {\n        const {getBandwidth} = this.props;\n        getBandwidth();\n    };\n\n    /**\n     * Set the new bandwidth specified in state.bandwidthText\n     * Check if text is valid, before sending.\n     */\n    setBandwidth = () => {\n        const {bandwidthText, hasError} = this.state;\n        // console.log(bandwidthText, hasError);\n        if (bandwidthText && !hasError) {\n            const {setBandwidth} = this.props;\n            setBandwidth(bandwidthText);\n        } else {\n            toast.error(\"Error in form\");\n        }\n    };\n\n    /**\n     * Change the state.bandwidthText\n     * Validate input before setting, if the input text is invalid, set the hasError in the state.\n     * @param e\n     */\n    changeBandwidthInput = (e) => {\n        const inputValue = e.target.value;\n        const validateInput = validateSizeSuffix(inputValue);\n        this.setState({\n            bandwidthText: inputValue,\n            hasError: !validateInput\n        })\n    };\n\n    /**\n     * Upon first shallow, get the current bandwidth\n     */\n    componentDidMount() {\n        this.getBandwidth();\n    }\n\n    /**\n     * Show or hide the right side modal with the form to change the current bandwidth.\n     */\n    toggleShowChangeBandwidth = () => {\n        this.setState((prevState) => ({\n\n            showChangeBandwidth: !prevState.showChangeBandwidth\n        }))\n    };\n\n    render() {\n        const {bandwidthText, hasError, showChangeBandwidth} = this.state;\n        const {bandwidth} = this.props;\n\n        return (\n\n            <Row>\n                <Col lg={showChangeBandwidth ? 6 : 12} sm={12}>\n                    <BandwidthWidget icon=\"icon-speedometer\" color=\"danger\" header={bandwidth.rate} lg={6} sm={12}>\n                        Current bandwidth <Button color=\"link\" onClick={this.toggleShowChangeBandwidth}><i\n                        className=\"fa fa-lg fa-angle-right\"/></Button>\n                    </BandwidthWidget>\n                </Col>\n                <Col lg={6} sm={12} className={showChangeBandwidth ? \"\" : \"d-none\"}>\n                    <Card>\n                        <CardHeader>Change bandwidth</CardHeader>\n                        <CardBody>\n                            <Form onSubmit={this.setBandwidth}>\n                                <FormGroup row>\n\n\n                                    <Label for=\"bandwidthValue\" sm={5}>New Bandwidth</Label>\n                                    <Col sm={7}>\n                                        <Input type=\"text\" value={bandwidthText}\n                                               valid={!hasError} invalid={hasError}\n                                               id=\"bandwidthValue\" onChange={this.changeBandwidthInput}>\n                                        </Input>\n                                        <FormFeedback valid>Keep empty to reset.</FormFeedback>\n                                        <FormFeedback>The bandwidth should be of the form 1M|2M|1G|1K|1.1K\n                                            etc</FormFeedback>\n\n                                    </Col>\n\n\n                                </FormGroup>\n                                <Button className=\"float-right\" color=\"success\" type=\"submit\">Set</Button>\n\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n\n            </Row>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * Connectivity status with backend\n     */\n    isConnected: state.status.isConnected,\n    /**\n     * Map with {bytesPerSecond, rate}\n     */\n    bandwidth: state.status.bandwidth\n});\n\nBandwidthStatusCard.propTypes = {\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Determines currently set bandwidth\n     */\n    bandwidth: PROP_BANDWIDTH,\n    /**\n     * Redux function to get the current bandwidth.\n     */\n    getBandwidth: PropTypes.func.isRequired,\n    /**\n     * Redux function to set the new bandwidth in rclone backend.\n     */\n    setBandwidth: PropTypes.func.isRequired,\n\n};\n\nexport default connect(mapStateToProps, {getBandwidth, setBandwidth})(BandwidthStatusCard)\n","import React from 'react';\nimport {Col, Row} from \"reactstrap\";\nimport BackendStatusCard from \"../Base/BackendStatusCard/BackendStatusCard\";\nimport RunningJobs from \"../Base/RunningJobs\";\nimport BandwidthStatusCard from \"../Base/BandwidthStatusCard/BandwidthStatusCard\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from 'prop-types';\nimport {IP_ADDRESS_KEY} from \"../../utils/Constants\";\n\nclass Home extends React.Component {\n\n\n    render() {\n        const {checkStatus} = this.props;\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        return (\n            <div data-test=\"homeComponent\">\n                <h2>Welcome to Rclone dashboard. </h2>\n                <p>Begin by creating a new remote config from the left sidebar.</p>\n\n\n                <Row>\n                    <Col lg={4} sm={12}>\n                        <BackendStatusCard ipAddress={ipAddress} mode={\"card\"}/>\n                    </Col>\n                    <Col lg={4} sm={12}>\n                        <BandwidthStatusCard/>\n                    </Col>\n                </Row>\n                <h2>Jobs</h2>\n                {checkStatus ? <RunningJobs mode={\"full-status\"}/> : <p>Not Monitoring</p>}\n\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    checkStatus: state.status.checkStatus\n});\n\nHome.propTypes = {\n    checkStatus: PropTypes.bool.isRequired\n};\n\nexport default connect(mapStateToProps, {})(Home);\n"],"sourceRoot":""}