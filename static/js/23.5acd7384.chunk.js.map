{"version":3,"sources":["views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Base/LinkShareModal/LinkShareModal.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Explorer/FilesView/FilesView.js","views/Base/NewFolder/NewFolder.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFiles","remoteName","remotePath","dispatch","data","fs","indexOf","addColonAtLast","remote","path","concat","axiosInstance","post","then","res","type","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","list","error","REQUEST_ERROR","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","isEmpty","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","setRemoteName","isLocalRemoteName","split","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","fileComponentSource","beginDrag","_props$item","item","Name","Path","IsDir","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","_callee","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","wrap","_context","prev","next","console","log","getDropResult","performCopyFile","sent","toast","info","performMoveFile","t0","response","JSON","stringify","autoClose","stop","_x","_x2","_x3","apply","arguments","FileIcon","MimeType","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","linkShareHandle","ID","undefined","Fragment","UncontrolledButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","header","onClick","divider","FileComponent","isLoading","imgUrl","loadImage","bind","assertThisInitialized","url","get","responseType","imgFile","Blob","URL","createObjectURL","isBucketBased","isImage","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","_this$props2","_this$props3","loadImages","clickHandler","connectDragSource","gridMode","itemIdx","ModTime","Size","modTime","Date","parse","Card","CardBody","e","Spinner","src","alt","CardFooter","formatBytes","toLocaleDateString","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","LinkShareModal","copyToClipboard","textField","document","innerText","linkUrl","body","appendChild","select","execCommand","remove","handleFocus","target","copySuccess","toggle","closeModal","isVisible","isCopyAllowed","queryCommandSupported","Modal","isOpen","ModalHeader","data-test","ModalBody","Input","readOnly","onFocus","ModalFooter","ScrollableDiv","height","children","style","overflow","filesTarget","drop","didDrop","_monitor$getItem","canDrop","_monitor$getItem2","UpButtonComponent","upButtonHandle","colSpan","FilesView","closeLinkShareModal","showLinkShareModal","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","fsInfo","Features","PublicLink","generatedLink","getFileComponents","isDir","files","_this$props$currentPa2","map","idx","key","FilesView_FileComponent","handleFileClick","BucketBased","canCopy","Copy","canMove","Move","downloadingItems","shouldUpdate","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa3","downloadUrl","prevState","method","link","href","setAttribute","click","_context2","connectDropTarget","isOver","dirComponentMap","fileComponentMap","renderElement","Container","fluid","ScrollableDiv_ScrollableDiv","FILES_VIEW_HEIGHT","Table","position","top","left","width","zIndex","opacity","backgroundColor","Alert","Base_LinkShareModal_LinkShareModal","PureComponent","compose","visibilityFilter","visibilityFilters","searchQuery","searchQueries","configs","tempRemoteName","pathKey","changeListVisibility","changeSearchFilter","DropTarget","dropTarget","NewFolder","disableForm","shouldDisable","changeName","name","createNewFolder","handleSubmit","preventDefault","FormGroup","row","Label","for","required","autoFocus","disabled","FileOperations","openNewFolderModal","CanHaveEmptyDirectories","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","About","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","err","changeLoadImages","stopPropagation","setLoadImages","filterOptions","visibilityFilteringOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","caret","checked","Base_NewFolder_NewFolder","react_chartjs_2_es","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","slicedToArray","push","bytesToGB","toFixed","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","mode","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","shouldLoad","CHANGE_LOAD_IMAGES","RemoteExplorer","remoteNameTemp","distractionFreeMode","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","i","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","toggleDistractionFreeMode","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/23.5acd7384.chunk.js","sourcesContent":["import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\n\n/**\n * Gets the information regarding features, hashes from the rclone backend.\n * @param remoteName {string} The name of the remote\n * @returns {Function}\n */\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\n/**\n * Get only remote names from the rclone backend.\n * @returns {Function}\n */\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n/**\n * Gets the files for a specified remote path (remoteName + remotePath).\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote\n * @returns {Function}\n */\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_LOAD_IMAGES,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\n/**\n * Changes the current path of a container using container ID\n * @param containerID {string}\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\n * @returns {Function}\n */\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Changes the current remote name for a particular container id\n * @param containerID {string}\n * @param remoteName {string}\n * @returns {Function}\n */\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Issues a request to fetch the files in the current path of a container using container id.\n * @param containerID\n * @returns {Function}\n */\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\n/**\n * Changes the current remote path for a container ID without changing the remote name.\n * @param containerID {string}\n * @param remotePath {string}\n * @returns {Function}\n */\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Computes and requests the path for going one level up in the working directory.\n * Eg: /tmp/abc -> navigateUp -> /tmp\n * @param containerID\n * @returns {Function}\n */\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Navigates one stack entry up.\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\n * @param containerID {string}\n * @returns {Function}\n */\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n\n/**\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\n * Also requests for files in the new path\n * @param containerID\n * @returns {Function}\n */\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\n * @param containerID\n * @param filter {string}\n * @returns {Function}\n */\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\n/**\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\n * @param containerID\n * @param mode {string}\n * @returns {Function}\n */\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        loadImages: true,\n        mode\n    })\n};\n\n/**\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\n * @param containerID\n * @param searchQuery\n * @returns {Function}\n */\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\nexport const setLoadImages = (containerID, shouldLoad) => dispatch => {\n    dispatch({\n        type: CHANGE_LOAD_IMAGES,\n        id: containerID,\n        payload: shouldLoad\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={4}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Spinner,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport axiosInstance, {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from \"prop-types\";\nimport {IP_ADDRESS_KEY} from \"../../../utils/Constants\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName, remotePath: props.remotePath\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    // if (component.props.canCopy) {\n                    let res = await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    console.log(\"Copy\", res);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory copying started in background: ${Name}`);\n                    } else {\n                        toast.info(`File copying started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support copying\");\n                    // }\n\n                } else {\n                    // if (component.props.canMove) {\n                    await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    } else {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support moving\");\n                    // }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}, ...props) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item, linkShareHandle}) {\n\n    const {IsDir} = item;\n    let {ID, Name} = item;\n    // Using fallback as fileName when the ID is not available (for local file system)\n    if (ID === undefined) {\n        ID = Name;\n    }\n\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\">\n                    <i className=\"fa fa-info-circle\"/>\n                </Button>\n                {/* TODO: Find a way to make this work*/}\n                {/*<UncontrolledTooltip placement=\"right\" target={\"#tooltip\"+ID}>*/}\n                {/*    {item}*/}\n                {/*</UncontrolledTooltip>*/}\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <React.Fragment>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    async loadImage(url) {\n        this.setState({isLoading: true});\n\n        const res = await axiosInstance.get(url, {\n            responseType: 'arraybuffer'\n        });\n        const imgFile = new Blob([res.data]);\n        const imgUrl = URL.createObjectURL(imgFile);\n        this.setState({imgUrl: imgUrl, isLoading: false});\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            imgUrl: \"\"\n        };\n        this.loadImage = this.loadImage.bind(this);\n    }\n\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    componentDidMount() {\n        const {item, isBucketBased, /*isDragging, remoteName*/} = this.props;\n\n        const {MimeType} = item;\n        let isImage = MimeType === \"image/jpeg\";\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        let url;\n        if (isImage) {\n            const {remoteName, remotePath} = this.props;\n            if (isBucketBased) {\n                url = ipAddress + `[${remoteName}]/${remotePath}/${item.Name}`;\n\n            } else {\n                url = ipAddress + `[${remoteName}:${remotePath}]/${item.Name}`;\n            }\n        }\n        this.loadImage(url);\n    }\n\n    render() {\n        const {item, loadImages, clickHandler, downloadHandle, linkShareHandle, deleteHandle, connectDragSource, gridMode, itemIdx/*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n        const {isLoading, imgUrl} = this.state;\n\n        // console.log(\"item\", item);\n\n        let modTime = new Date(Date.parse(ModTime));\n        // console.log(\"card\", gridMode);\n\n\n        let isImage = MimeType === \"image/jpeg\";\n\n\n\n        if (gridMode === \"card\") {\n            return connectDragSource(\n                <div className={IsDir ? \"\" : \"col-md-4\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n\n                            {loadImages && isImage ?\n                                isLoading ? <Spinner>Loading...</Spinner> :\n                                    <img className=\"img-thumbnail pd-0 m-0\" src={imgUrl} alt=\"\"/>\n                                : <FileIcon IsDir={IsDir} MimeType={MimeType}/>} {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                     deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            return connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td className=\"d-none d-md-table-cell\"><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)} id={\"file\" + itemIdx}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n\n                        {/*<UncontrolledTooltip target={\"file\"+itemIdx} placement=\"right\">*/}\n                        {/*    <p><strong>Mime Type: </strong>{MimeType}</p>*/}\n                        {/*    <p><strong>Path: </strong>{Path}</p>*/}\n                        {/*</UncontrolledTooltip>*/}\n                    </td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td className=\"d-none d-md-table-cell\">{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                 deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    linkShareHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n    loadImages: PropTypes.bool.isRequired,\n    isBucketBased: PropTypes.bool.isRequired\n\n};\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);\n","import React from \"react\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass LinkShareModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copySuccess: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    copyToClipboard = () => {\n        let textField = document.createElement('textarea');\n        textField.innerText = this.props.linkUrl;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    };\n\n    handleFocus = (event) => event.target.select();\n\n    render() {\n        const {isVisible, linkUrl} = this.props;\n        const {copySuccess} = this.state;\n        let isCopyAllowed = (document && document.queryCommandSupported) ? document.queryCommandSupported('copy') : true;\n\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Public link generated.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        <Input readOnly value={linkUrl} onFocus={this.handleFocus}/>\n                        {\n\n                            /* Logical shortcut for only displaying the\n                               button if the copy command exists */\n                            isCopyAllowed &&\n                            <div>\n                                <Button color=\"link\" onClick={this.copyToClipboard}><i\n                                    className=\"fa fa-clipboard fa-2x\"/></Button>\n                            </div>\n                        }\n                        {copySuccess}\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLinkShareModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    linkUrl: PropTypes.string.isRequired\n};\nLinkShareModal.defaultProps = {\n    isVisible: true,\n};\n\nexport default LinkShareModal;","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Spinner, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter, isEmpty} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\nimport LinkShareModal from \"../../Base/LinkShareModal/LinkShareModal\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {FILES_VIEW_HEIGHT} from \"../../../utils/Constants\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    },\n    canDrop(props, monitor) {\n        const {remoteName, remotePath} = monitor.getItem();\n        console.log(remoteName, props.currentPath.remoteName, remotePath, props.currentPath.remotePath);\n        const destRemoteName = props.currentPath.remoteName;\n        const destRemotePath = props.currentPath.remotePath;\n        if (destRemoteName === remoteName) {\n            return destRemotePath !== remotePath;\n        }\n        return true;\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td colSpan={1}/>\n                <td colSpan={4}><i className={\"fa fa-file-o\"}/> Go Up...</td>\n            </tr>);\n    }\n}\n\n/**\n * FilesView component renders files in the file explorer.\n */\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n            showLinkShareModal: false,\n            generatedLink: \"\",\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n    closeLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: false\n        })\n    };\n\n    showLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: true\n\n        })\n    };\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    linkShareHandle = (item) => {\n        const {fsInfo} = this.props;\n        if (fsInfo.Features.PublicLink) {\n            console.log(\"Sharing link\" + item.Name);\n            const {remoteName} = this.props.currentPath;\n            axiosInstance.post(\"operations/publiclink\", {\n                fs: addColonAtLast(remoteName),\n                remote: item.Path\n            }).then((res) => {\n                // console.log(\"Public Link: \" + res.data.url);\n\n                this.setState({\n                    generatedLink: res.data.url,\n                    showLinkShareModal: true\n                })\n            }, (error) => {\n                toast.error(\"Error Generating link: \" + error)\n            })\n        } else {\n            toast.error(\"This remote does not support public link\");\n        }\n\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo, loadImages} = this.props;\n        const {remoteName, remotePath} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} remotePath={remotePath} gridMode={gridMode}\n                                           containerID={containerID}\n                                           linkShareHandle={this.linkShareHandle}\n                                           loadImages={loadImages}\n                                           isBucketBased={fsInfo.Features.BucketBased}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move} itemIdx={idx}\n                            />\n                        </React.Fragment>\n                    )\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems, generatedLink, showLinkShareModal} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode, canDrop} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><Spinner color=\"primary\"/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <Col lg={3}>\n                                <h3>Directories</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    {dirComponentMap}\n                                </ScrollableDiv>\n                            </Col>\n                            <Col lg={9}>\n                                <h3>Files</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    <Row>\n                                        {fileComponentMap}\n                                    </Row>\n                                </ScrollableDiv>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n\n                )\n            } else {\n\n\n                renderElement = (\n\n\n                    <Container fluid={true} className={\"pd-0\"}>\n                        <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n\n                            <Table className=\"table-responsive-sm\">\n                                <thead>\n                                <tr>\n                                    <th className=\"d-none d-md-table-cell\">x</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                    <th className=\"d-none d-md-table-cell\">Modified</th>\n                                    <th>Actions</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                                {files.length > 0 ? (\n                                        <React.Fragment>\n                                            <tr>\n                                                <td colSpan={1} className=\"d-none d-md-block\"/>\n                                                <th colSpan={4}>Directories</th>\n                                            </tr>\n                                            {dirComponentMap}\n                                            <tr>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <th>Files</th>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <td/>\n                                                <td/>\n                                            </tr>\n                                            {fileComponentMap}\n                                        </React.Fragment>\n                                    ) :\n                                    <tr>\n                                        <td colSpan={1} className=\"d-none d-md-table-cell\"/>\n                                        <th colSpan={4}>Files</th>\n                                    </tr>\n                                }\n                                </tbody>\n                            </Table>\n                        </ScrollableDiv>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && canDrop && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n                    <LinkShareModal closeModal={this.closeLinkShareModal} isVisible={showLinkShareModal}\n                                    linkUrl={generatedLink}/>\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n    const loadImages = state.explorer.loadImages[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        // Filter according to visibility filters\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n\n        //Filter according to search query, if ny\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery,\n        loadImages\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`);\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row,\n    Spinner\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setLoadImages,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isEmpty, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\n\n/**\n * File Operations component which handles user actions for files in the remote.( Visibility, gridmode, back, forward etc)\n */\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CanHaveEmptyDirectories) {\n            this.setState({newFolderModalIsVisible: true});\n        } else {\n            toast.error(\"This remote cannot have empty directories\");\n        }\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.About) {\n            this.setState((prevState) => {\n                return {\n                    isAboutModalOpen: !prevState.isAboutModalOpen\n                }\n            }, () => {\n                if (this.state.isAboutModalOpen) {\n                    const {containerID} = this.props;\n                    this.props.getAbout(containerID);\n                }\n            });\n        } else {\n            toast.error(\"This remote does not support About\");\n        }\n\n    };\n\n    handleCleanTrash = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n\n            if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n                const {currentPath, containerID} = this.props;\n                let {remoteName} = currentPath;\n\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(\"operations/cleanup\", {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            }\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this remote\");\n        }\n    };\n\n    changeLoadImages = (e) => {\n        e.stopPropagation();\n        // console.log(e);\n        const {setLoadImages, containerID, loadImages} = this.props;\n        setLoadImages(containerID, !loadImages);\n    };\n\n\n    render() {\n        const {containerID, loadImages, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Table</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"}\n                                               onClick={(e) => e.stopPropagation()/*Stop propagation is required to prevent parent dropdown from closing.*/}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                    {gridMode !== \"grid\" &&\n                                    <DropdownItem onClick={this.changeLoadImages}>Load Images{' '}\n\n                                        <Input id={\"loadImg\" + containerID} checked={loadImages} type=\"checkbox\"\n                                               onClick={this.changeLoadImages}\n                                               onChange={this.changeLoadImages/*Stop propagation is required to prevent parent dropdown from closing.*/}\n                                               className=\"ml-1 mr-1\">\n                                        </Input>\n                                    </DropdownItem>\n                                    }\n                                </DropdownMenu>\n\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData && !isEmpty(doughnutData) ? <Doughnut data={doughnutData}/> :\n                                                <React.Fragment><Spinner color=\"primary\"/>Loading</React.Fragment>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    /**\n     * Container ID of the current remote explorer\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * Redux function to change the visibility of images/ pdf etc.\n     */\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    /**\n     * The current visibility filter setting\n     */\n    visibilityFilter: PropTypes.string,\n    /**\n     * Render mode: Grid/Card\n     */\n    gridMode: PropTypes.string,\n    /**\n     * Redux function to set the search query as typed by user.\n     */\n    setSearchQuery: PropTypes.func.isRequired,\n    /**\n     * Currently set search Query from redux\n     */\n    searchQuery: PropTypes.string,\n    /**\n     * A map which gives the information about the remote about.\n     */\n    remoteAbout: PropTypes.object,\n    /**\n     * File system information and features about the current remote\n     */\n    fsInfo: PropTypes.object.isRequired,\n    /**\n     * Map of data to be passed to the doughnutChart.\n     */\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        if (labels.length > 1 && data.length > 1) {\n            doughnutData = {\n                labels: labels, datasets: [\n                    {\n                        data: data,\n                        backgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                        hoverBackgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                    }\n                ]\n            };\n        }\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        loadImages: state.explorer.loadImages[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout,\n    setLoadImages\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\n/**\n * Gets the information of a provider\n * @param containerID\n * @returns {Function}\n */\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID, distractionFreeMode} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n                {(!distractionFreeMode) &&\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n                    </CardBody>\n                </Card>\n                }\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <FilesView containerID={containerID}/>\n                    </CardBody>\n                </Card>}\n\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n    distractionFreeMode: PropTypes.bool.isRequired\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols, distractionFreeMode}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n\n                <RemoteExplorer containerID={i.toString()} distractionFreeMode={distractionFreeMode}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1,\n            distractionFreeMode: false\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n\n            this.setState((prevState) => {\n                for (let i = 0; i < nos; i++) {\n                    if (!backStacks[i.toString()] || i + 1 > prevState.cols)\n                        createPath(i.toString())\n                }\n                return {\n                    cols: nos\n                }\n            });\n        }\n\n    }\n\n    toggleDistractionFreeMode = (e) => {\n        this.setState((prevState) => ({\n            distractionFreeMode: !prevState.distractionFreeMode\n        }));\n    };\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols, distractionFreeMode} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n\n                    {distractionFreeMode && <div className=\"clearfix float-right\">\n                        <Button color={\"success\"} className={\"ml-2\"}\n                                onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/></Button>\n                    </div>}\n\n                    {(!distractionFreeMode) &&\n                    <Col sm={12} lg={12}>\n                        <Card>\n\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                <Button color={\"success\"} className={\"ml-2\"}\n                                        onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/></Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    }\n                </Row>\n\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks} distractionFreeMode={distractionFreeMode}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}