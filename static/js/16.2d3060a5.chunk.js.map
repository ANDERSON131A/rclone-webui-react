{"version":3,"sources":["utils/API/API.js","utils/Tools.js","actions/configActions.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","_async","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","bytesToGB","bytes","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","remoteName","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","dispatch","then","res","type","GET_PROVIDERS","payload","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","REQUEST_ERROR","propTypes","children","prop_types_default","node","tag","utils","className","string","cssModule","object","valid","bool","tooltip","defaultProps","FormFeedback_FormFeedback","props","Tag","attributes","Object","objectWithoutPropertiesLoose","validMode","classes","classnames_default","react_default","createElement","esm_extends","_transitionStatusToCl","es_FormFeedback","Collapse_propTypes","esm_objectSpread","react_transition_group","isOpen","oneOfType","arrayOf","navbar","innerRef","func","Collapse_defaultProps","appear","enter","exit","timeout","Collapse","transitionStatusToClassHash","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","Collapse_Collapse","_Component","_this","call","this","state","height","forEach","bind","esm_assertThisInitialized","inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","childProps","in","collapseClass","getTransitionClass","style","ref","react","es_Collapse","NewDriveAuthModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","assertThisInitialized","closeModal","isVisible","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","color","onClick","React","Component","getSuggestions","value","inputValue","trim","inputLength","lang","Description","slice","getSuggestionValue","suggestion","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","inputProps","placeholder","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","Examples","examplesMap","inputType","IsPassword","Type","FormGroup","row","Label","for","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","e","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","DefaultStr","openSetupDrive","preventDefault","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsValid","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","console","validateForm","defaults","finalParameterValues","_i2","_Object$entries2","_loop","parameters","info","_context2","stopAuthentication","warn","_this$state3","Form","onSubmit","Card","CardHeader","marginBottom","CardBody","NewDrive_ProviderAutoSuggest","href","CardFooter","el","Base_NewDriveAuthModal_NewDriveAuthModal","connect"],"mappings":"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","file":"static/js/16.2d3060a5.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(\"/config/providers\").then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(\"/config/dump\").then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread({}, childProps.style, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        A page will open for you with the authentication for your drive. This modal will automatically\n                        dismiss upon successful creation\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                        {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport isEmpty, {findFromConfig, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\n\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(\"/config/get\", {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n\n    };\n\n    // Update the driveType and then load the equivalent input parameters for that drive\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        if (Required && (!DefaultStr || DefaultStr === \"\"))\n                            isValid[Name] = false;\n                        else\n                            isValid[Name] = true;\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n\n\n\n\n    };\n\n    // Open second step of setting up the drive\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    // Decide whether to use advanced options\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, 1000);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            return (key === ele.Name);\n                        });\n\n                        const {DefaultStr} = defaultValueObj;\n                        if (value !== DefaultStr) {\n                            // console.log(`${value} !== ${DefaultStr}`);\n                            finalParameterValues[key] = value;\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        await axiosInstance.post('/config/create', data);\n                        toast.info(\"Config created\");\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n\n    changeName = e => {\n        const value = e.target.value;\n\n        this.setState({driveName: value}, () => {\n\n            if (value === undefined || value === \"\") {\n                this.setState({driveNameIsValid: false});\n            } else {\n\n                axiosInstance.post('/config/get', {name: value}).then((response) => {\n                    let errors = this.state.formErrors;\n                    let isValid = isEmpty(response.data);\n                    if (isValid) {\n                        errors[\"driveName\"] = \"\";\n                    } else {\n                        errors[\"driveName\"] = \"Duplicate\";\n\n                    }\n                    this.setState({formErrors: errors, driveNameIsValid: isValid});\n                });\n            }\n\n        });\n    };\n\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n\n    componentDidMount() {\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                    parameters as is.</p>\n                <Form onSubmit={this.handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote Config</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colRconfig}>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                            </CardBody>\n\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                        className=\"fa fa-check fa-lg \"/></Button>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        {/*div for Scrolling to here*/}\n                        <div ref={(el) => this.setupDriveDiv = el}/>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colSetup}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n\n                                    </div>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                    (optional)</Button>\n\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colAdvanced}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                    <div className=\"clearfix\" ref={(el) => {\n                        this.configEndDiv = el\n                    }}>\n                        <div className=\"float-right mb-3\">\n                            <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                            <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                        </div>\n                    </div>\n                </Form>\n                <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}