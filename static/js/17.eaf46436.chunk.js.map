{"version":3,"sources":["utils/API/API.js","utils/Tools.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","utils/Constants.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","bytesToGB","bytes","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","remoteName","getSuggestions","value","inputValue","trim","inputLength","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFsInfo","dispatch","fs","then","res","type","GET_CONFIG_FOR_REMOTE","status","REQUEST_SUCCESS","payload","defineProperty","REQUEST_ERROR","getFiles","remotePath","remote","path","concat","GET_FILES_LIST","filesList","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_BACK","navigateFwd","NAVIGATE_FWD","navigateBack","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","ItemTypes","fileComponentSource","beginDrag","console","_props$item","Path","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","getDropResult","fsInfo","Features","Copy","toast","info","Move","t0","response","JSON","stringify","autoClose","_x","_x2","_x3","apply","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","onClick","Fragment","compose","configs","DragSource","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","_ref3","clickHandler","gridMode","ModTime","Size","modTime","Date","parse","Card","CardBody","e","CardFooter","toLocaleDateString","filesTarget","drop","didDrop","_monitor$getItem","UpButtonComponent","upButtonHandle","FilesView","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","getFileComponents","isDir","map","ID","FilesView_FileComponent","handleFileClick","isLoading","downloadingItems","shouldUpdate","bind","assertThisInitialized","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa2","downloadUrl","BucketBased","prevState","method","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","_context2","connectDropTarget","isOver","files","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","isOpen","toggle","PureComponent","visibilityFilter","visibilityFilters","searchQueries","pathKey","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","target","createNewFolder","handleSubmit","preventDefault","closeModal","isVisible","Modal","data-test","ModalHeader","ModalBody","FormGroup","row","Label","for","Input","required","autoFocus","disabled","visibilityFilteringOptions","FileOperations","openNewFolderModal","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","isAboutModalOpen","getAbout","filterOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","stopPropagation","Base_NewFolder_NewFolder","react_chartjs_2_es","ModalFooter","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","slicedToArray","push","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","RemoteExplorer","remoteNameTemp","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/17.eaf46436.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1]\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast} from \"../utils/Tools\";\n\nexport const getFsInfo = (remoteName) => dispatch => {\n    axiosInstance.post(\"operations/fsinfo\", {fs: addColonAtLast(remoteName)})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[remoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n};\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={2}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {Button, Card, CardBody, CardFooter} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        try {\n            if (monitor.getDropResult()) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    if (component.fsInfo.Features.Copy) {\n                        await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory copied: ${Name}`);\n                        } else {\n                            toast.info(`File copied: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support copying\");\n                    }\n\n                } else {\n                    if (component.fsInfo.Features.Move) {\n                        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory moved: ${Name}`);\n                        } else {\n                            toast.info(`File moved: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support moving\");\n                    }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item}) {\n\n    const {IsDir} = item;\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                    <i className={\"fa fa-remove fa-lg d-inline\"}/>\n                </Button>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                <i className={\"fa fa-remove fa-lg d-inline\"}/>\n            </Button>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nfunction FileComponent({item, clickHandler, downloadHandle, deleteHandle, connectDragSource, gridMode/*isDragging, remoteName*/}, ...props) {\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n    const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n    let modTime = new Date(Date.parse(ModTime));\n    // console.log(\"card\", gridMode);\n\n    if (gridMode === \"card\") {\n        return connectDragSource(\n            <div className={\"col-lg-3\"}>\n                <Card>\n                    <CardBody onClick={(e) => clickHandler(e, item)}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                    </CardBody>\n                    <CardFooter>\n                        <Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/>\n                    </CardFooter>\n                </Card>\n            </div>\n        )\n    } else {\n        return connectDragSource(\n            <tr className={\"pointer-cursor\"}>\n                <td><input type=\"checkbox\"/></td>\n                <td onClick={(e) => clickHandler(e, item)}><FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}</td>\n                <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                <td>{modTime.toLocaleDateString()}</td>\n                <td><Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/></td>\n            </tr>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n\n    return {\n        // files,\n        // currentPath,\n        fsInfo,\n        // gridMode\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {}\n    ),\n    DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)\n)(FileComponent)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td></td>\n                <td><i className={\"fa fa-file-o\"}/> Go Up...</td>\n                <td></td>\n                <td></td>\n                <td></td>\n            </tr>);\n    }\n}\n\n\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    getFileComponents = (filesList, remoteName, isDir, gridMode, containerID) => {\n        return filesList.map((item, idx) => {\n            let {ID, Name} = item;\n            // Using fallback as fileName when the ID is not available (for local file system)\n            if (ID === undefined) {\n                ID = Name;\n            }\n            if (item.IsDir === isDir) {\n                return (\n                    <React.Fragment key={ID}>\n                        <FileComponent item={item} clickHandler={this.handleFileClick}\n                                       downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                       remoteName={remoteName} gridMode={gridMode} containerID={containerID}\n                        />\n                    </React.Fragment>\n                )\n            }\n            return null;\n        });\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems,} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><i className={\"fa fa-circle-o-notch fa-lg\"}/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(files, remoteName, true, gridMode);\n\n            let fileComponentMap = this.getFileComponents(files, remoteName, false, gridMode);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table>\n                            <thead>\n                            <tr>\n                                <th></th>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th>Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td></td>\n                                            <th>Directories</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td></td>\n                                            <th>Files</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td></td>\n                                    <td>No files</td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n\n\n\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`)\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","export const visibilityFilteringOptions = [\"Images\", \"Pdf\", \"Videos\"];","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {bytesToGB} from \"../../../utils/Tools\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: true});\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        this.setState((prevState) => {\n            return {\n                isAboutModalOpen: !prevState.isAboutModalOpen\n            }\n        }, () => {\n            if (this.state.isAboutModalOpen) {\n                const {containerID} = this.props;\n                this.props.getAbout(containerID);\n            }\n        });\n\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        // const pathBreadCrumbs = remotePath.split('/');\n        // pathBreadCrumbs.map((item, idx) => {\n        //     return (<li key={idx}\n        //                 className={[\"breadcrumb-item \", idx === pathBreadCrumbs.length ? \"active\" : \"\"]}>{item}</li>)\n        // });\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"></i> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Grid</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <p>Space Usage (in GB)</p>\n                                        {doughnutData ? <Doughnut data={doughnutData}/> : <p>Loading</p>}\n                                    </Col>\n                                </Row>\n                                <Row>\n\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    containerID: PropTypes.string.isRequired,\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    visibilityFilter: PropTypes.string,\n    gridMode: PropTypes.string,\n    setSearchQuery: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string,\n    remoteAbout: PropTypes.object,\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        doughnutData = {\n            labels: labels, datasets: [\n                {\n                    data: data,\n                    backgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                    hoverBackgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        '#ff7459',\n                    ],\n                }\n            ]\n        };\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n    getFsInfo() {\n        const {remoteName} = this.props.currentPath;\n        if (!this.props.configs[remoteName])\n            this.props.getFsInfo(remoteName);\n    }\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                <Card className={isValidPath ? \"\" : \"d-none\"}>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        getFsInfo, createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n            for (let i = 0; i < nos; i++) {\n                if (!backStacks[i.toString()])\n                    createPath(i.toString())\n            }\n            this.setState({cols: nos});\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}