{"version":3,"sources":["views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Base/LinkShareModal/LinkShareModal.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFiles","remoteName","remotePath","dispatch","data","fs","indexOf","addColonAtLast","remote","path","concat","axiosInstance","post","then","res","type","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","list","error","REQUEST_ERROR","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","getFsInfo","isEmpty","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","sentRemoteName","setRemoteName","isLocalRemoteName","split","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","fileComponentSource","beginDrag","_props$item","item","Name","Path","IsDir","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","_callee","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","wrap","_context","prev","next","console","log","getDropResult","performCopyFile","sent","toast","info","performMoveFile","t0","response","JSON","stringify","autoClose","stop","_x","_x2","_x3","apply","arguments","FileIcon","MimeType","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","linkShareHandle","Fragment","UncontrolledButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","header","onClick","divider","FileComponent","clickHandler","connectDragSource","gridMode","itemIdx","ModTime","Size","modTime","Date","parse","Card","CardBody","e","CardFooter","formatBytes","toLocaleDateString","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","LinkShareModal","copyToClipboard","textField","document","innerText","linkUrl","body","appendChild","select","execCommand","remove","handleFocus","target","copySuccess","toggle","bind","assertThisInitialized","closeModal","isVisible","isCopyAllowed","queryCommandSupported","Modal","isOpen","ModalHeader","data-test","ModalBody","Input","readOnly","onFocus","ModalFooter","filesTarget","drop","didDrop","_monitor$getItem","getItem","canDrop","_monitor$getItem2","UpButtonComponent","upButtonHandle","colSpan","FilesView","closeLinkShareModal","showLinkShareModal","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","fsInfo","Features","PublicLink","generatedLink","url","getFileComponents","isDir","files","_this$props$currentPa2","map","idx","ID","undefined","key","FilesView_FileComponent","handleFileClick","canCopy","Copy","canMove","Move","isLoading","downloadingItems","shouldUpdate","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa3","downloadUrl","BucketBased","prevState","method","responseType","URL","createObjectURL","Blob","link","href","setAttribute","click","_context2","_this$props2","connectDropTarget","isOver","Spinner","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","Base_LinkShareModal_LinkShareModal","PureComponent","compose","visibilityFilter","visibilityFilters","searchQuery","searchQueries","configs","tempRemoteName","pathKey","changeListVisibility","changeSearchFilter","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","name","createNewFolder","handleSubmit","preventDefault","FormGroup","row","Label","for","required","autoFocus","disabled","FileOperations","openNewFolderModal","CanHaveEmptyDirectories","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","About","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","err","filterOptions","visibilityFilteringOptions","doughnutData","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","caret","stopPropagation","Base_NewFolder_NewFolder","react_chartjs_2_es","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","slicedToArray","push","bytesToGB","toFixed","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","mode","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","RemoteExplorer","remoteNameTemp","isValidPath","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","i","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/23.a9be0038.chunk.js","sourcesContent":["import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\n\n/**\n * Gets the information regarding features, hashes from the rclone backend.\n * @param remoteName {string} The name of the remote\n * @returns {Function}\n */\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(\"operations/fsinfo\", {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\n/**\n * Get only remote names from the rclone backend.\n * @returns {Function}\n */\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n/**\n * Gets the files for a specified remote path (remoteName + remotePath).\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote\n * @returns {Function}\n */\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\n/**\n * Changes the current path of a container using container ID\n * @param containerID {string}\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\n * @returns {Function}\n */\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Changes the current remote name for a particular container id\n * @param containerID {string}\n * @param remoteName {string}\n * @returns {Function}\n */\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Issues a request to fetch the files in the current path of a container using container id.\n * @param containerID\n * @returns {Function}\n */\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\n/**\n * Changes the current remote path for a container ID without changing the remote name.\n * @param containerID {string}\n * @param remotePath {string}\n * @returns {Function}\n */\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Computes and requests the path for going one level up in the working directory.\n * Eg: /tmp/abc -> navigateUp -> /tmp\n * @param containerID\n * @returns {Function}\n */\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Navigates one stack entry up.\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\n * @param containerID {string}\n * @returns {Function}\n */\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n\n/**\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\n * Also requests for files in the new path\n * @param containerID\n * @returns {Function}\n */\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\n * @param containerID\n * @param filter {string}\n * @returns {Function}\n */\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\n/**\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\n * @param containerID\n * @param mode {string}\n * @returns {Function}\n */\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\n/**\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\n * @param containerID\n * @param searchQuery\n * @returns {Function}\n */\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={4}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName, remotePath: props.remotePath\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    // if (component.props.canCopy) {\n                    let res = await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    console.log(\"Copy\", res);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory copying started in background: ${Name}`);\n                    } else {\n                        toast.info(`File copying started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support copying\");\n                    // }\n\n                } else {\n                    // if (component.props.canMove) {\n                    await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    } else {\n                        toast.info(`Directory moving started in background: ${Name}`);\n                    }\n                    // } else {\n                    //     toast.error(\"This remote does not support moving\");\n                    // }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item, linkShareHandle}) {\n\n    const {IsDir} = item;\n\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <React.Fragment>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    render() {\n        const {item, clickHandler, downloadHandle, linkShareHandle, deleteHandle, connectDragSource, gridMode, itemIdx/*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n        // console.log(\"item\", item);\n\n        let modTime = new Date(Date.parse(ModTime));\n        // console.log(\"card\", gridMode);\n\n        if (gridMode === \"card\") {\n            return connectDragSource(\n                <div className={\"col-lg-3\"}>\n                    <Card>\n                        <CardBody onClick={(e) => clickHandler(e, item)}>\n                            <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                     deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            return connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td className=\"d-none d-md-table-cell\"><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)} id={\"file\" + itemIdx}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n\n                        {/*<UncontrolledTooltip target={\"file\"+itemIdx} placement=\"right\">*/}\n                        {/*    <p><strong>Mime Type: </strong>{MimeType}</p>*/}\n                        {/*    <p><strong>Path: </strong>{Path}</p>*/}\n                        {/*</UncontrolledTooltip>*/}\n                    </td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td className=\"d-none d-md-table-cell\">{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                 deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n    }\n}\n\n\nFileComponent.propTypes = {\n    item: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func.isRequired,\n    downloadHandle: PropTypes.func.isRequired,\n    deleteHandle: PropTypes.func.isRequired,\n    linkShareHandle: PropTypes.func.isRequired,\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired,\n    gridMode: PropTypes.string,\n    containerID: PropTypes.string.isRequired,\n    canMove: PropTypes.bool.isRequired,\n    canCopy: PropTypes.bool.isRequired,\n\n};\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);\n","import React from \"react\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass LinkShareModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copySuccess: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    copyToClipboard = () => {\n        let textField = document.createElement('textarea');\n        textField.innerText = this.props.linkUrl;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    };\n\n    handleFocus = (event) => event.target.select();\n\n    render() {\n        const {isVisible, linkUrl} = this.props;\n        const {copySuccess} = this.state;\n        let isCopyAllowed = (document && document.queryCommandSupported) ? document.queryCommandSupported('copy') : true;\n\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Public link generated.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        <Input readOnly value={linkUrl} onFocus={this.handleFocus}/>\n                        {\n\n                            /* Logical shortcut for only displaying the\n                               button if the copy command exists */\n                            isCopyAllowed &&\n                            <div>\n                                <Button color=\"link\" onClick={this.copyToClipboard}><i\n                                    className=\"fa fa-clipboard fa-2x\"/></Button>\n                            </div>\n                        }\n                        {copySuccess}\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLinkShareModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    linkUrl: PropTypes.string.isRequired\n};\nLinkShareModal.defaultProps = {\n    isVisible: true,\n};\n\nexport default LinkShareModal;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Spinner, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter, isEmpty} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\nimport LinkShareModal from \"../../Base/LinkShareModal/LinkShareModal\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    },\n    canDrop(props, monitor) {\n        const {remoteName, remotePath} = monitor.getItem();\n        console.log(remoteName, props.currentPath.remoteName, remotePath, props.currentPath.remotePath);\n        const destRemoteName = props.currentPath.remoteName;\n        const destRemotePath = props.currentPath.remotePath;\n        if (destRemoteName === remoteName) {\n            return destRemotePath !== remotePath;\n        }\n        return true;\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td colSpan={1}/>\n                <td colSpan={4}><i className={\"fa fa-file-o\"}/> Go Up...</td>\n            </tr>);\n    }\n}\n\n/**\n * FilesView component renders files in the file explorer.\n */\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n            showLinkShareModal: false,\n            generatedLink: \"\",\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n    closeLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: false\n        })\n    };\n\n    showLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: true\n\n        })\n    };\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    linkShareHandle = (item) => {\n        const {fsInfo} = this.props;\n        if (fsInfo.Features.PublicLink) {\n            console.log(\"Sharing link\" + item.Name);\n            const {remoteName} = this.props.currentPath;\n            axiosInstance.post(\"operations/publiclink\", {\n                fs: addColonAtLast(remoteName),\n                remote: item.Path\n            }).then((res) => {\n                // console.log(\"Public Link: \" + res.data.url);\n\n                this.setState({\n                    generatedLink: res.data.url,\n                    showLinkShareModal: true\n                })\n            }, (error) => {\n                toast.error(\"Error Generating link: \" + error)\n            })\n        } else {\n            toast.error(\"This remote does not support public link\");\n        }\n\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo} = this.props;\n        const {remoteName, remotePath} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} remotePath={remotePath} gridMode={gridMode}\n                                           containerID={containerID}\n                                           linkShareHandle={this.linkShareHandle}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move} itemIdx={idx}\n                            />\n                        </React.Fragment>\n                    )\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems, generatedLink, showLinkShareModal} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode, canDrop} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><Spinner color=\"primary\"/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table className=\"table-responsive-sm\">\n                            <thead>\n                            <tr>\n                                <th className=\"d-none d-md-table-cell\">x</th>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th className=\"d-none d-md-table-cell\">Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td colSpan={1} className=\"d-none d-md-block\"/>\n                                            <th colSpan={4}>Directories</th>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td className=\"d-none d-md-table-cell\"/>\n                                            <th>Files</th>\n                                            <td className=\"d-none d-md-table-cell\"/>\n                                            <td/>\n                                            <td/>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td colSpan={1} className=\"d-none d-md-table-cell\"/>\n                                    <th colSpan={4}>Files</th>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && canDrop && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n                    <LinkShareModal closeModal={this.closeLinkShareModal} isVisible={showLinkShareModal}\n                                    linkUrl={generatedLink}/>\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        // Filter according to visibility filters\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n\n        //Filter according to search query, if ny\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`);\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row,\n    Spinner\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isEmpty, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CanHaveEmptyDirectories) {\n            this.setState({newFolderModalIsVisible: true});\n        } else {\n            toast.error(\"This remote cannot have empty directories\");\n        }\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.About) {\n            this.setState((prevState) => {\n                return {\n                    isAboutModalOpen: !prevState.isAboutModalOpen\n                }\n            }, () => {\n                if (this.state.isAboutModalOpen) {\n                    const {containerID} = this.props;\n                    this.props.getAbout(containerID);\n                }\n            });\n        } else {\n            toast.error(\"This remote does not support About\");\n        }\n\n    };\n\n    handleCleanTrash = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n\n            if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n                const {currentPath, containerID} = this.props;\n                let {remoteName} = currentPath;\n\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(\"operations/cleanup\", {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            }\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this remote\");\n        }\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Grid</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData && !isEmpty(doughnutData) ? <Doughnut data={doughnutData}/> :\n                                                <React.Fragment><Spinner color=\"primary\"/>Loading</React.Fragment>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    /**\n     * Container ID of the current remote explorer\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * Redux function to change the visibility of images/ pdf etc.\n     */\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    /**\n     * The current visibility filter setting\n     */\n    visibilityFilter: PropTypes.string,\n    /**\n     * Render mode: Grid/Card\n     */\n    gridMode: PropTypes.string,\n    /**\n     * Redux function to set the search query as typed by user.\n     */\n    setSearchQuery: PropTypes.func.isRequired,\n    /**\n     * Currently set search Query from redux\n     */\n    searchQuery: PropTypes.string,\n    /**\n     * A map which gives the information about the remote about.\n     */\n    remoteAbout: PropTypes.object,\n    /**\n     * File system information and features about the current remote\n     */\n    fsInfo: PropTypes.object.isRequired,\n    /**\n     * Map of data to be passed to the doughnutChart.\n     */\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        if (labels.length > 1 && data.length > 1) {\n            doughnutData = {\n                labels: labels, datasets: [\n                    {\n                        data: data,\n                        backgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                        hoverBackgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                    }\n                ]\n            };\n        }\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\n/**\n * Gets the information of a provider\n * @param containerID\n * @returns {Function}\n */\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(\"operations/about\", {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>}\n\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n\n            this.setState((prevState) => {\n                for (let i = 0; i < nos; i++) {\n                    if (!backStacks[i.toString()] || i + 1 > prevState.cols)\n                        createPath(i.toString())\n                }\n                return {\n                    cols: nos\n                }\n            });\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n\n\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}