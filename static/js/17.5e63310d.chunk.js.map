{"version":3,"sources":["utils/API/API.js","utils/Tools.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerActions.js","actions/explorerStateActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Explorer/FilesView/FileComponent.js","views/Explorer/FilesView/FilesView.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Base/NewFolder/NewFolder.js","utils/Constants.js","views/Base/FileOperations/FileOperations.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","formatBytes","bytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","getSuggestions","value","inputValue","trim","inputLength","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","getFsInfo","remoteName","dispatch","fs","then","res","type","GET_CONFIG_FOR_REMOTE","status","REQUEST_SUCCESS","payload","defineProperty","REQUEST_ERROR","getFiles","remotePath","remote","path","concat","GET_FILES_LIST","filesList","changePath","containerID","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","createPath","CREATE_PATH","navigateUp","NAVIGATE_BACK","navigateFwd","NAVIGATE_FWD","navigateBack","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","openEnabled","getRemoteNames","_this2","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","GET_REMOTE_LIST","ItemTypes","fileComponentSource","beginDrag","console","_props$item","Path","endDrag","_endDrag","asyncToGenerator","regenerator_default","mark","monitor","component","_monitor$getDropResul","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","getDropResult","fsInfo","Features","Copy","toast","info","Move","t0","response","JSON","stringify","autoClose","_x","_x2","_x3","apply","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","onClick","Fragment","compose","configs","DragSource","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","_ref3","clickHandler","gridMode","ModTime","Size","modTime","Date","parse","Card","CardBody","CardFooter","e","toLocaleDateString","filesTarget","drop","didDrop","_monitor$getItem","UpButtonComponent","upButtonHandle","FilesView","_this$props$currentPa","getFilesList","dismissAlert","isDownloadProgress","getFileComponents","isDir","map","ID","FilesView_FileComponent","handleFileClick","isLoading","downloadingItems","shouldUpdate","bind","assertThisInitialized","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","_this$props$currentPa2","downloadUrl","BucketBased","prevState","method","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","_context2","connectDropTarget","isOver","files","dirComponentMap","fileComponentMap","renderElement","Container","fluid","Table","style","position","top","left","height","width","zIndex","opacity","backgroundColor","Alert","isOpen","toggle","PureComponent","visibilityFilter","visibilityFilters","searchQueries","pathKey","DropTarget","dropTarget","ScrollableDiv","children","overflow","NewFolder","disableForm","shouldDisable","changeName","target","createNewFolder","handleSubmit","preventDefault","closeModal","isVisible","Modal","data-test","ModalHeader","ModalBody","FormGroup","row","Label","for","Input","required","autoFocus","disabled","visibilityFilteringOptions","FileOperations","openNewFolderModal","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","toggleDropDown","dropdownOpen","filterOptions","ButtonGroup","InputGroup","InputGroupAddon","addonType","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","Base_NewFolder_NewFolder","CHANGE_VISIBILITY_FILTER","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","RemoteExplorer","remoteNameTemp","pathBreadCrumbs","CardHeader","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","ScrollableDiv_ScrollableDiv","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","push","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","backStacks","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/17.5e63310d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1]\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_FOR_REMOTE, GET_FILES_LIST, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {addColonAtLast} from \"../utils/Tools\";\n\nexport const getFsInfo = (remoteName) => dispatch => {\n    axiosInstance.post(\"operations/fsinfo\", {fs: addColonAtLast(remoteName)})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[remoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n};\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(\"config/listremotes\").then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(\"operations/list\", data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = () => {\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={() => this.openRemote()}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={2}>\n\n                            <Button className={\"btn-lg\"} color=\"success\"\n                                    type=\"submit\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    })\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React from \"react\";\nimport {Button, Card, CardBody, CardFooter} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\n\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        try {\n            if (monitor.getDropResult()) {\n\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    if (component.fsInfo.Features.Copy) {\n                        await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory copied: ${Name}`);\n                        } else {\n                            toast.info(`File copied: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support copying\");\n                    }\n\n                } else {\n                    if (component.fsInfo.Features.Move) {\n                        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                        updateHandler();\n                        if (IsDir) {\n                            toast.info(`Directory moved: ${Name}`);\n                        } else {\n                            toast.info(`File moved: ${Name}`);\n                        }\n                    } else {\n                        toast.error(\"This remote does not support moving\");\n                    }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item}) {\n\n    const {IsDir} = item;\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                    <i className={\"fa fa-remove fa-lg d-inline\"}/>\n                </Button>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                <i className={\"fa fa-remove fa-lg d-inline\"}/>\n            </Button>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nfunction FileComponent({item, clickHandler, downloadHandle, deleteHandle, connectDragSource, gridMode/*isDragging, remoteName*/}, ...props) {\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n    const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n    let modTime = new Date(Date.parse(ModTime));\n    // console.log(\"card\", gridMode);\n\n    if (gridMode === \"card\") {\n        return connectDragSource(\n            <div className={\"col-lg-3\"}>\n                <Card>\n                    <CardBody>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n                    </CardBody>\n                    <CardFooter>\n                        <Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/>\n                    </CardFooter>\n                </Card>\n            </div>\n        )\n    } else {\n        return connectDragSource(\n            <tr className={\"pointer-cursor\"}>\n                <td><input type=\"checkbox\"/></td>\n                <td onClick={(e) => clickHandler(e, item)}><FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}</td>\n                <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                <td>{modTime.toLocaleDateString()}</td>\n                <td><Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/></td>\n            </tr>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n\n    return {\n        // files,\n        // currentPath,\n        fsInfo,\n        // gridMode\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {}\n    ),\n    DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)\n)(FileComponent)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td></td>\n                <td><i className={\"fa fa-file-o\"}/> Go Up...</td>\n                <td></td>\n                <td></td>\n                <td></td>\n            </tr>);\n    }\n}\n\n\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(\"/operations/purge\", data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(\"/operations/deletefile\", data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    getFileComponents = (filesList, remoteName, isDir, gridMode, containerID) => {\n        return filesList.map((item, idx) => {\n            let {ID, Name} = item;\n            // Using fallback as fileName when the ID is not available (for local file system)\n            if (ID === undefined) {\n                ID = Name;\n            }\n            if (item.IsDir === isDir) {\n                return (\n                    <React.Fragment key={ID}>\n                        <FileComponent item={item} clickHandler={this.handleFileClick}\n                                       downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                       remoteName={remoteName} gridMode={gridMode} containerID={containerID}\n                        />\n                    </React.Fragment>\n                )\n            }\n            return null;\n        });\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems,} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><i className={\"fa fa-circle-o-notch fa-lg\"}/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(files, remoteName, true, gridMode);\n\n            let fileComponentMap = this.getFileComponents(files, remoteName, false, gridMode);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n\n\n                        <Row>\n                            <h3>Directories</h3>\n                        </Row>\n                        <Row>\n                            {dirComponentMap}\n                        </Row>\n\n\n                        <Row>\n                            <h3>Files</h3>\n                        </Row>\n                        <Row>\n                            {fileComponentMap}\n                        </Row>\n\n\n                    </Container>\n                )\n            } else {\n\n\n                renderElement = (\n\n                    <Container fluid={true} className={\"pd-0\"}>\n\n                        <Table>\n                            <thead>\n                            <tr>\n                                <th></th>\n                                <th>Name</th>\n                                <th>Size</th>\n                                <th>Modified</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                            {files.length > 0 ? (\n                                    <React.Fragment>\n                                        <tr>\n                                            <td></td>\n                                            <th>Directories</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {dirComponentMap}\n                                        <tr>\n                                            <td></td>\n                                            <th>Files</th>\n                                            <td></td>\n                                            <td></td>\n                                            <td></td>\n                                        </tr>\n                                        {fileComponentMap}\n                                    </React.Fragment>\n                                ) :\n                                <tr>\n                                    <td></td>\n                                    <td>No files</td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                </tr>\n                            }\n                            </tbody>\n                        </Table>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && renderOverlay()}\n                    {/*<Col sm={12}>*/}\n                    {/*</Col>*/}\n\n                    <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                           lg={12}>\n                        Downloading {downloadingItems} file(s). Please wait.\n                    </Alert>\n\n                    {renderElement}\n\n\n\n\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }).isRequired,\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (<div style={{overflow: \"auto\", height: height}}>\n        {children}\n    </div>)\n}\n\nexport default ScrollableDiv;\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(\"operations/mkdir\", data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`)\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","export const visibilityFilteringOptions = [\"Images\", \"Pdf\", \"Videos\"];","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\n\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: true});\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n    // updateSearchQuery = (e) => {\n    //     e.preventDefault();\n    //     const {searchQuery} = this.state;\n    //     const {containerID} = this.props;\n    //     this.props.setSearchQuery(containerID, searchQuery);\n    // };\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n\n    render() {\n        const {containerID, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen} = this.state;\n\n        return (\n            <div>\n                <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                        onClick={() => navigateBack(containerID)}><i\n                    className={\"fa fa-lg fa-angle-left\"}/></Button>\n                <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                        onClick={() => navigateFwd(containerID)}><i\n                    className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                    <ButtonGroup>\n                        <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                            className={\"fa fa-lg fa-plus\"}/> </Button>\n                        <Button className=\"mr-1 btn-outline-dark\"\n                                onClick={() => getFilesForContainerID(containerID)}><i\n                            className={\"fa fa-lg fa-repeat\"}/></Button>\n                        <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">\n                                <Button type=\"button\" color=\"primary\"><i className=\"fa fa-search\"/> Search</Button>\n                            </InputGroupAddon>\n                            <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                   onChange={this.changeSearch}/>\n                        </InputGroup>\n                        <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                            <DropdownToggle caret>\n                                More\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem>\n                                    <Input type={\"select\"} onChange={this.handleChangeGridMode} value={gridMode}>\n                                        <option value={\"grid\"}>Grid</option>\n                                        <option value={\"card\"}>Card</option>\n                                    </Input>\n\n                                </DropdownItem>\n                                <DropdownItem>\n                                    <Input type={\"select\"} onChange={this.handleChangeFilter} value={visibilityFilter}\n                                           className=\"ml-1 mr-1\">\n                                        <option key={0}>None</option>\n                                        {\n                                            this.filterOptions.map((item, idx) => {\n                                                return (<option key={item} value={item}>{item}</option>)\n                                            })\n                                        }\n                                    </Input>\n                                </DropdownItem>\n                            </DropdownMenu>\n                        </ButtonDropdown>\n                    </ButtonGroup>\n\n\n                    <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                               closeModal={this.closeNewFolderModal}/>\n\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    containerID: PropTypes.string.isRequired,\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    visibilityFilter: PropTypes.string,\n    gridMode: PropTypes.string,\n    setSearchQuery: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n    gridMode: state.explorer.gridMode[ownProps.containerID],\n    searchQuery: state.explorer.searchQueries[ownProps.containerID]\n});\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery\n})(FileOperations);","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n\n    }\n\n    getFsInfo() {\n\n        const {remoteName} = this.props.currentPath;\n        if (!this.props.configs[remoteName])\n            this.props.getFsInfo(remoteName);\n\n    }\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n\n\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n\n    render() {\n\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        const {containerID} = this.props;\n\n        const pathBreadCrumbs = remotePath.split('/');\n\n        // console.log(pathBreadCrumbs);\n\n\n        pathBreadCrumbs.map((item, idx) => {\n            return (<li key={idx}\n                        className={[\"breadcrumb-item \", idx === pathBreadCrumbs.length ? \"active\" : \"\"]}>{item}</li>)\n        });\n\n        return (\n            <React.Fragment>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n\n\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                <Card>\n                    <CardHeader>\n                        <nav aria-label=\"breadcrumb\">\n                            <ol className=\"breadcrumb\">\n                                <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                                {pathBreadCrumbs}\n                                <li className=\"breadcrumb-menu\">\n                                    <div className=\"btn-group\" role=\"group\"\n                                         aria-label=\"Button group with nested dropdown\">\n                                        {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                                        {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                                        <span className=\"btn\"><i className=\"cui-settings\"></i> Settings</span>\n                                    </div>\n                                </li>\n                            </ol>\n                            <FileOperations containerID={containerID}/>\n\n                        </nav>\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            <FilesView containerID={containerID}/>\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PropTypes.shape({\n        remoteName: PropTypes.string.isRequired,\n        remotePath: PropTypes.string.isRequired\n    }),\n    fsInfo: PropTypes.oneOfType([\n        PropTypes.shape({\n            Features: PropTypes.object.isRequired,\n            Hashes: PropTypes.array.isRequired,\n            Name: PropTypes.string.isRequired,\n            Precision: PropTypes.number.isRequired,\n            String: PropTypes.string.isRequired\n        }),\n        PropTypes.object\n    ]),\n    hasError: PropTypes.bool,\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        getFsInfo, createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport PropTypes from 'prop-types';\n\n\nfunction RemoteExplorerList({cols}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n                <RemoteExplorer containerID={i.toString()}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 1\n        };\n\n        this.props.createPath(\"0\");\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout(nos, mode) {\n        const {backStacks, createPath} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\") {\n            for (let i = 0; i < nos; i++) {\n                if (!backStacks[i.toString()])\n                    createPath(i.toString())\n            }\n            this.setState({cols: nos});\n\n        }\n\n    }\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {cols} = this.state;\n        const {backStacks} = this.props;\n\n        return (\n            <React.Fragment>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n                    <Col sm={12} lg={12}>\n                        <Card>\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>1 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>2 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>3 - side by side</Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>4 - side by side</Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <RemoteExplorerList cols={cols} backStacks={backStacks}/>\n                </Row>\n            </React.Fragment>\n        );\n    }\n\n\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}