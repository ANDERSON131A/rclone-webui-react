{"version":3,"sources":["actions/configActions.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["__webpack_require__","d","__webpack_exports__","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","dispatch","axiosInstance","post","then","res","type","GET_PROVIDERS","payload","data","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","className","a","string","cssModule","object","CardHeader","props","Tag","attributes","Object","classes","createElement","defaultProps","children","node","valid","bool","tooltip","undefined","FormFeedback","validMode","_transitionStatusToCl","esm_objectSpread","react_transition_group","isOpen","prop_types_default","oneOfType","arrayOf","utils","navbar","innerRef","func","appear","enter","exit","timeout","Collapse","transitionStatusToClassHash","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","Collapse_Collapse","_Component","_this","call","this","state","height","forEach","name","bind","esm_assertThisInitialized","inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","objectWithoutPropertiesLoose","transitionProps","childProps","react_default","esm_extends","in","collapseClass","getTransitionClass","classnames_default","style","ref","react","es_Collapse","NewDriveAuthModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","assertThisInitialized","closeModal","isVisible","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","color","onClick","React","Component","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","inputProps","placeholder","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","key","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","e","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","preventDefault","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsEditable","console","log","driveNameIsValid","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","_context","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","info","_context2","stopAuthentication","warn","_this3","_this$state3","Form","onSubmit","Card","marginBottom","CardBody","NewDrive_ProviderAutoSuggest","href","CardFooter","el","Base_NewDriveAuthModal_NewDriveAuthModal","isEdit","connect"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAA,IAAAC,EAAAL,EAAA,IAAAM,EAAAN,EAAA,GAQaG,EAAe,kBAAM,SAAAI,GAC9BC,IAAcC,KAAK,qBAAqBC,KAAK,SAAAC,GAAG,OAAIJ,EAAS,CACzDK,KAAMC,IACNC,QAASH,EAAII,KAAKC,gBAObZ,EAAgB,kBAAM,SAAAG,GAC/BC,IAAcC,KAAK,gBAAgBC,KAAK,SAAAC,GAAG,OAAIJ,EAAS,CACpDK,KAAMK,IACNC,OAAQC,IACRL,QAASH,EAAII,QACb,SAAAK,GAAK,OAAIb,EAAS,CAClBK,KAAMK,IACNC,OAAQG,IACRP,QAASM,0CC1BjB,IAAAE,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,IAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA0B,EAAAF,GAAAG,EAAA3B,EAAA,GAAA4B,EAAA5B,EAAA0B,EAAAC,GAAAE,EAAA7B,EAAA,IAAA8B,EAAA9B,EAAA0B,EAAAG,GAAAE,EAAA/B,EAAA,KAMAgC,EAAA,CACAC,IAAOF,EAAA,EACPG,UAAaN,EAAAO,EAASC,OACtBC,UAAaT,EAAAO,EAASG,QAMtBC,EAAA,SAAAC,GACA,IAAAN,EAAAM,EAAAN,UACAG,EAAAG,EAAAH,UACAI,EAAAD,EAAAP,IACAS,EAAmBC,OAAApB,EAAA,EAAAoB,CAA6BH,EAAA,iCAEhDI,EAAgBD,OAAAZ,EAAA,EAAAY,CAAgBb,IAAUI,EAAA,eAAAG,GAC1C,OAASZ,EAAAU,EAAKU,cAAAJ,EAAoBE,OAAArB,EAAA,EAAAqB,CAAQ,GAAGD,EAAA,CAC7CR,UAAAU,MAIAL,EAAAP,YACAO,EAAAO,aAjBA,CACAb,IAAA,OAiBe/B,EAAA,sCC7Bf,IAAAoB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,IAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA0B,EAAAF,GAAAG,EAAA3B,EAAA,GAAA4B,EAAA5B,EAAA0B,EAAAC,GAAAE,EAAA7B,EAAA,IAAA8B,EAAA9B,EAAA0B,EAAAG,GAAAE,EAAA/B,EAAA,KAMAgC,EAAA,CACAe,SAAYnB,EAAAO,EAASa,KACrBf,IAAOF,EAAA,EACPG,UAAaN,EAAAO,EAASC,OACtBC,UAAaT,EAAAO,EAASG,OACtBW,MAASrB,EAAAO,EAASe,KAClBC,QAAWvB,EAAAO,EAASe,MAEpBJ,EAAA,CACAb,IAAA,MACAgB,WAAAG,GAGAC,EAAA,SAAAb,GACA,IAAAN,EAAAM,EAAAN,UACAG,EAAAG,EAAAH,UACAY,EAAAT,EAAAS,MACAE,EAAAX,EAAAW,QACAV,EAAAD,EAAAP,IACAS,EAAmBC,OAAApB,EAAA,EAAAoB,CAA6BH,EAAA,mDAEhDc,EAAAH,EAAA,qBACAP,EAAgBD,OAAAZ,EAAA,EAAAY,CAAgBb,IAAUI,EAAAe,EAAA,SAAAK,EAAA,WAAAA,GAAAjB,GAC1C,OAASZ,EAAAU,EAAKU,cAAAJ,EAAoBE,OAAArB,EAAA,EAAAqB,CAAQ,GAAGD,EAAA,CAC7CR,UAAAU,MAIAS,EAAArB,YACAqB,EAAAP,eACe5C,EAAA,iDC9BfqD,sSAQAvB,EAAgBW,OAAAa,EAAA,EAAAb,CAAa,GAAKc,EAAA,WAAUzB,UAAA,CAC5C0B,OAAUC,EAAAxB,EAASe,KACnBH,SAAYY,EAAAxB,EAASyB,UAAA,CAAYD,EAAAxB,EAAS0B,QAASF,EAAAxB,EAASa,MAAQW,EAAAxB,EAASa,OAC7Ef,IAAO6B,EAAA,EACP5B,UAAayB,EAAAxB,EAASa,KACtBe,OAAUJ,EAAAxB,EAASe,KACnBb,UAAasB,EAAAxB,EAASG,OACtB0B,SAAYL,EAAAxB,EAASyB,UAAA,CAAYD,EAAAxB,EAAS8B,KAAON,EAAAxB,EAASC,OAASuB,EAAAxB,EAASG,WAG5EQ,EAAmBH,OAAAa,EAAA,EAAAb,CAAa,GAAKc,EAAA,WAAUX,aAAA,CAC/CY,QAAA,EACAQ,QAAA,EACAC,OAAA,EACAC,MAAA,EACAnC,IAAA,MACAoC,QAAWP,EAAA,EAAkBQ,WAG7BC,IAAAhB,EAAA,IAAqFO,EAAA,EAAkBU,UAAA,aAAAjB,EAAiDO,EAAA,EAAkBW,SAAA,gBAAAlB,EAAmDO,EAAA,EAAkBY,SAAA,aAAAnB,EAAgDO,EAAA,EAAkBa,QAAA,WAAApB,GAMjT,SAAAqB,EAAA5B,GACA,OAAAA,EAAA6B,aAGA,IAAIC,EAEJ,SAAAC,GAGA,SAAAT,EAAA9B,GACA,IAAAwC,EASA,OAPAA,EAAAD,EAAAE,KAAAC,KAAA1C,IAAA0C,MACAC,MAAA,CACAC,OAAA,MAEA,2DAAAC,QAAA,SAAAC,GACAN,EAAAM,GAAAN,EAAAM,GAAAC,KAAqC5C,OAAA6C,EAAA,EAAA7C,CAAsBqC,MAE3DA,EAZErC,OAAA8C,EAAA,EAAA9C,CAAc2B,EAAAS,GAehB,IAAAW,EAAApB,EAAAqB,UA6EA,OA3EAD,EAAAE,WAAA,SAAA5C,EAAA6C,GACAX,KAAAY,SAAA,CACAV,OAAAR,EAAA5B,KAEAkC,KAAA1C,MAAAoD,WAAA5C,EAAA6C,IAGAH,EAAAK,UAAA,SAAA/C,EAAA6C,GACAX,KAAAY,SAAA,CACAV,OAAA,OAEAF,KAAA1C,MAAAuD,UAAA/C,EAAA6C,IAGAH,EAAAM,OAAA,SAAAhD,GACAkC,KAAAY,SAAA,CACAV,OAAAR,EAAA5B,KAEAkC,KAAA1C,MAAAwD,OAAAhD,IAGA0C,EAAAO,UAAA,SAAAjD,GAEAA,EAAAkD,aAEAhB,KAAAY,SAAA,CACAV,OAAA,IAEAF,KAAA1C,MAAAyD,UAAAjD,IAGA0C,EAAAS,SAAA,SAAAnD,GACAkC,KAAAY,SAAA,CACAV,OAAA,OAEAF,KAAA1C,MAAA2D,SAAAnD,IAGA0C,EAAAU,OAAA,WACA,IAAAC,EAAAnB,KAEAoB,EAAApB,KAAA1C,MACAC,EAAA6D,EAAArE,IACAyB,EAAA4C,EAAA5C,OACAxB,EAAAoE,EAAApE,UACA6B,EAAAuC,EAAAvC,OACA1B,EAAAiE,EAAAjE,UACAU,EAAAuD,EAAAvD,SAEAwD,GADAD,EAAAtC,SACqBrB,OAAA6D,EAAA,EAAA7D,CAA6B2D,EAAA,0EAElDlB,EAAAF,KAAAC,MAAAC,OACAqB,EAA0B9D,OAAAmB,EAAA,EAAAnB,CAAI4D,EAAazC,EAAA,GAC3C4C,EAAqB/D,OAAAmB,EAAA,EAAAnB,CAAI4D,EAAazC,EAAA,GACtC,OAAW6C,EAAAxE,EAAKU,cAAeY,EAAA,WAAYd,OAAAiE,EAAA,EAAAjE,CAAQ,GAAG8D,EAAA,CACtDI,GAAAnD,EACAkC,WAAAV,KAAAU,WACAG,UAAAb,KAAAa,UACAC,OAAAd,KAAAc,OACAC,UAAAf,KAAAe,UACAE,SAAAjB,KAAAiB,WACK,SAAAjF,GACL,IAAA4F,EA1FA,SAAA5F,GACA,OAAAqD,EAAArD,IAAA,WAyFA6F,CAAA7F,GACA0B,EAAoBD,OAAAmB,EAAA,EAAAnB,CAAgBqE,IAAU9E,EAAA4E,EAAA/C,GAAA,mBAAA1B,GAC9C4E,EAAA,OAAA7B,EAAA,MACAA,UAEA,OAAauB,EAAAxE,EAAKU,cAAAJ,EAAoBE,OAAAiE,EAAA,EAAAjE,CAAQ,GAAG+D,EAAA,CACjDO,MAAetE,OAAAa,EAAA,EAAAb,CAAa,GAAG+D,EAAAO,SAC/B/E,UAAAU,EACAsE,IAAAb,EAAA7D,MAAAwB,WACOjB,MAIPuB,EA7FA,CA8FE6C,EAAA,WAEFrC,EAAQ9C,YACR8C,EAAQhC,eACO,IAAAsE,EAAA,wDC1ITC,cAEF,SAAAA,EAAY7E,GAAO,IAAAwC,EAAA,OAAArC,OAAA2E,EAAA,EAAA3E,CAAAuC,KAAAmC,IACfrC,EAAArC,OAAA4E,EAAA,EAAA5E,CAAAuC,KAAAvC,OAAA6E,EAAA,EAAA7E,CAAA0E,GAAApC,KAAAC,KAAM1C,KAEDiF,OAASzC,EAAKyC,OAAOlC,KAAZ5C,OAAA+E,EAAA,EAAA/E,CAAAqC,IAHCA,wEAOfE,KAAK1C,MAAMmF,8CAIN,IACEC,EAAa1C,KAAK1C,MAAlBoF,UACP,OACIjB,EAAAxE,EAAAU,cAAA,WACI8D,EAAAxE,EAAAU,cAACgF,EAAA,EAAD,CAAOnE,OAAQkE,EAAWH,OAAQvC,KAAKuC,QACnCd,EAAAxE,EAAAU,cAACiF,EAAA,EAAD,CAAaL,OAAQvC,KAAKuC,OAAQM,YAAU,eAA5C,2BACApB,EAAAxE,EAAAU,cAACmF,EAAA,EAAD,CAAWD,YAAU,aAArB,mIAIApB,EAAAxE,EAAAU,cAACoF,EAAA,EAAD,CAAaF,YAAU,eACnBpB,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASlD,KAAKuC,QAAtC,QAA4D,cAxBpDY,IAAMC,WAqCtCjB,EAAkBvE,aAAe,CAC7B8E,WAAW,GAIAP,6CC1CTkB,GAAiB,SAACC,EAAQC,GAC5B,IAAMC,EAAaD,EAAME,OAAOC,cAC1BC,EAAcH,EAAWI,OAE/B,OAAoB,IAAhBD,EACOL,EAIY,IAAhBK,EAAoB,GAAKL,EAAOO,OAAO,SAAAC,GAAI,OAC9CA,EAAKC,YAAYL,cAAcM,MAAM,EAAGL,KAAiBH,KAO3DS,GAAqB,SAAAC,GAAU,OAAIA,EAAWC,QAG9CC,GAAmB,SAAAF,GAAU,OAC/BzC,EAAAxE,EAAAU,cAAA,WACKuG,EAAWH,cAqELM,eAhEX,SAAAA,EAAY/G,GAAO,IAAAwC,EAAA,OAAArC,OAAA2E,EAAA,EAAA3E,CAAAuC,KAAAqE,IACfvE,EAAArC,OAAA4E,EAAA,EAAA5E,CAAAuC,KAAAvC,OAAA6E,EAAA,EAAA7E,CAAA4G,GAAAtE,KAAAC,KAAM1C,KAeVgH,4BAA8B,SAAAC,GAAa,IAAXhB,EAAWgB,EAAXhB,MAE5BzD,EAAKc,SAAS,CACV4D,YAAanB,GAAevD,EAAKxC,MAAMkH,YAAajB,MAnBzCzD,EAwBnB2E,4BAA8B,WAC1B3E,EAAKc,SAAS,CACV4D,YAAa,MAlBjB1E,EAAKG,MAAQ,CACTuE,YAAa,IATF1E,wEA+BV,IAAAsB,EACkCpB,KAAK1C,MAArCiG,EADFnC,EACEmC,MAAOmB,EADTtD,EACSsD,SAAUF,EADnBpD,EACmBoD,YAClBG,EAAgBC,YAAeJ,EAAajB,GAS5CsB,EAAa,CACfC,YAAa,uBACbvB,WATkBrF,IAAlByG,EACYpB,EAEAoB,EAAcZ,YAO1BW,SAAUA,GAId,OACIjD,EAAAxE,EAAAU,cAACoH,GAAA9H,EAAD,CACIuH,YAAaxE,KAAKC,MAAMuE,YACxBF,4BAA6BtE,KAAKsE,4BAClCG,4BAA6BzE,KAAKyE,4BAClCR,mBAAoBA,GACpBG,iBAAkBA,GAClBY,yBAAyB,EACzBC,0BAA0B,EAC1BJ,WAAYA,WA3DM1B,IAAMC,kDCQxC,SAAS8B,GAATX,GAAmH,IAAzFY,EAAyFZ,EAAzFY,YAAaC,EAA4Eb,EAA5Ea,aAAcC,EAA8Dd,EAA9Dc,cAAeC,EAA+Cf,EAA/Ce,cAAeC,EAAgChB,EAAhCgB,WAAYC,EAAoBjB,EAApBiB,UAAWlC,EAASiB,EAATjB,OACtG,QAAoBpF,IAAhBiH,GAA6C,KAAhBA,EAAoB,CACjD,IAAMM,EAAkBb,YAAetB,EAAQ6B,GAC3CO,EAAY,GAChB,QAAwBxH,IAApBuH,EAyBAC,EAxBkBD,EAAgBE,QAwBZC,IAAI,SAACC,EAAMC,GAC7B,GAAkB,IAAdD,EAAKE,OAAgBX,GAAgBS,EAAKG,WAAeZ,IAAiBS,EAAKG,UAAY,CAC3F,IAAMC,EAAU,GAAAC,OAAML,EAAKM,MACrBC,EAAkBP,EAAKQ,SAAa5E,EAAAxE,EAAAU,cAAA,KAAGX,UAAW,YAAd,KAAmC,KAEvEsJ,GAAeC,YAAQV,EAAKW,UAC9BC,EAAc,KAEdC,EAAY,GA2BhB,OAxBIb,EAAKc,WACLD,EAAY,WACLJ,EACPI,EAAY,SAIS,SAAdb,EAAKe,MACZF,EAAY,SACZD,EAAc,CACThF,EAAAxE,EAAAU,cAAA,UAAQkJ,IAAK,EAAGtD,OAAO,GAAvB,OACA9B,EAAAxE,EAAAU,cAAA,UAAQkJ,IAAK,EAAGtD,OAAO,GAAvB,QAKDmD,EADc,QAAdb,EAAKe,KACO,UACLf,EAAKe,KACA,QAOhBnF,EAAAxE,EAAAU,cAACmJ,EAAA,EAAD,CAAWD,IAAKf,EAAKiB,KAAG,GACpBtF,EAAAxE,EAAAU,cAACqJ,EAAA,EAAD,CAAOC,IAAKpB,EAAKqB,KAAMC,GAAI,GAAIlB,EAAYG,GAC3C3E,EAAAxE,EAAAU,cAACyJ,EAAA,EAAD,CAAKD,GAAI,GACL1F,EAAAxE,EAAAU,cAAC0J,EAAA,EAAD,CAAO3L,KAAMgL,EAAWnD,MAAO+B,EAAcO,EAAKqB,MAC3C9G,KAAMyF,EAAKqB,KAAMnJ,MAAOwH,EAAWM,EAAKqB,MAAOI,SAAU/B,EAAWM,EAAKqB,MACzEK,GAAI1B,EAAKqB,KAAMxC,SAAUW,EAAemC,SAAU3B,EAAKQ,UACzDI,GAELhF,EAAAxE,EAAAU,cAACQ,EAAA,EAAD,KAAeqH,EAAUK,EAAKqB,SAM1C,OAAO,OAInB,OAAOxB,EAEX,OACIjE,EAAAxE,EAAAU,cAAA,8CA2BR,SAAS8J,GAATC,GAAuG,IAAjFb,EAAiFa,EAAjFb,IAAKU,EAA4EG,EAA5EH,GAAII,EAAwED,EAAxEC,MAAOtC,EAAiEqC,EAAjErC,cAAe3J,EAAkDgM,EAAlDhM,KAAM6H,EAA4CmE,EAA5CnE,MAAOnD,EAAqCsH,EAArCtH,KAAM0E,EAA+B4C,EAA/B5C,YAA+B8C,EAAAF,EAAlBG,eAAkB,IAAAD,KACnG,OACInG,EAAAxE,EAAAU,cAACmJ,EAAA,EAAD,CAAWD,IAAKA,EAAKE,KAAG,GACpBtF,EAAAxE,EAAAU,cAACqJ,EAAA,EAAD,CAAOC,IAAKM,EAAIJ,GAAI,GAAIQ,GACxBlG,EAAAxE,EAAAU,cAACyJ,EAAA,EAAD,CAAKD,GAAI,GACL1F,EAAAxE,EAAAU,cAAC0J,EAAA,EAAD,CAAO3L,KAAMA,EAAM6H,MAAOA,EAAOnD,KAAMA,EAAM0E,YAAaA,EACnDyC,GAAIA,EAAI7C,SAAUW,EAAetH,MAAO8J,EAASP,SAAUO,EAASL,UAAQ,IACnF/F,EAAAxE,EAAAU,cAACQ,EAAA,EAAD,CAAcJ,OAAK,GAAnB,iCACA0D,EAAAxE,EAAAU,cAACQ,EAAA,EAAD,0DAQV2J,eAEF,SAAAA,EAAYxK,EAAOyK,GAAS,IAAAjI,EAAA,OAAArC,OAAA2E,EAAA,EAAA3E,CAAAuC,KAAA8H,IACxBhI,EAAArC,OAAA4E,EAAA,EAAA5E,CAAAuC,KAAAvC,OAAA6E,EAAA,EAAA7E,CAAAqK,GAAA/H,KAAAC,KAAM1C,EAAOyK,KAkCjBxF,OAAS,SAACyF,GACN,IAAI5H,EAAO4H,EAAEC,OAAO7H,KAEpBN,EAAKc,SAALnD,OAAAyK,EAAA,EAAAzK,CAAA,GAAgB2C,GAAQN,EAAKG,MAAMG,MAtCXN,EAqE5BqI,kBAAoB,SAACH,GAEjB,IAAII,EAAYJ,EAAEC,OAAO7H,KACrBoD,EAAawE,EAAEC,OAAO1E,MACpBmD,EAAY5G,EAAKG,MAAMoI,YAAYD,GACzCtI,EAAKc,SAAS,CACV0H,WAAW7K,OAAA8K,EAAA,EAAA9K,CAAA,GACJqC,EAAKG,MAAMqI,WADR7K,OAAAyK,EAAA,EAAAzK,CAAA,GAEL2K,EAAY5E,MAGrB,IAAIgF,GAAiB,EACjBtM,EAAQ,GACM,eAAdwK,GACA8B,EAAiBC,YAAmBjF,MAEhCtH,EAAQ,8EAES,aAAdwK,GACP8B,EAAiBE,YAAiBlF,MAE9BtH,EAAQ,yEAES,QAAdwK,KACP8B,EAAiBG,YAAYnF,MAEzBtH,EAAQ,8CAIZ4D,EAAKG,MAAMuH,SAASY,IAAgB5E,GAA6B,KAAfA,IAClDgF,GAAiB,KAEbtM,GAAS,2BAKjB4D,EAAKc,SAAS,SAACgI,GACX,MAAO,CACHf,QAAQpK,OAAA8K,EAAA,EAAA9K,CAAA,GACDmL,EAAUf,QADVpK,OAAAyK,EAAA,EAAAzK,CAAA,GAEF2K,EAAYI,IAEjBK,WAAWpL,OAAA8K,EAAA,EAAA9K,CAAA,GACJmL,EAAUC,WADPpL,OAAAyK,EAAA,EAAAzK,CAAA,GAEL2K,EAAYlM,QAnHD4D,EAgI5BgJ,gBAAkB,SAACC,EAADC,GAAuB,IAAdC,EAAcD,EAAdC,SAEhBnN,EAAagE,EAAKxC,MAAlBxB,UAEHoN,EAAMD,EAGNE,EAAmB,GACnBd,EAAc,GACdR,EAAU,GACVgB,EAAa,GACbrB,EAAW,GAGf,QAAYtJ,IAARgL,GAA6B,KAARA,EAAY,CAEjC,IAAMvE,EAAgBC,YAAe9I,EAAWoN,QAC1BhL,IAAlByG,GAEAA,EAAcgB,QAAQxF,QAAQ,SAAAiJ,GAAQ,IAE3BC,EAA0CD,EAA1CC,WAAYzC,EAA8BwC,EAA9BxC,KAAMM,EAAwBkC,EAAxBlC,KAAMb,EAAkB+C,EAAlB/C,SAClB,IADoC+C,EAARrD,OAErCoD,EAAiBjC,GAAQmC,EACzBhB,EAAYnB,GAAQN,EACpBY,EAASN,GAAQb,EAEjBwB,EAAQX,KAAUb,KAAcgD,GAA6B,KAAfA,IAE9CR,EAAW3B,GAAQ,MAI/BpH,EAAKc,SAAS,CACVuE,YAAa+D,EACbZ,WAAYa,EACZd,YAAaA,EACbR,QAASA,EACTgB,WAAYA,EACZrB,SAAUA,SAGd1H,EAAKc,SAAS,CAACuE,YAAa+D,KA1KRpJ,EAkL5BwJ,eAAiB,SAACtB,GACVA,GAAGA,EAAEuB,iBACTzJ,EAAKc,SAAS,CAAC4I,UAAY,IAC3B1J,EAAK2J,cAAcC,eAAe,CAACC,SAAU,YArLrB7J,EA2L5B8J,oBAAsB,SAAC5B,GACnBlI,EAAKc,SAAS,CAACiJ,iBAAkB/J,EAAKG,MAAM4J,mBA5LpB/J,EA8V5BgK,UAAY,SAAA9B,GACRlI,EAAKc,SAAS,CAACmJ,UAAW,GAAI5E,YAAa,MA/VnBrF,EAsW5BkK,WAAa,SAAAhC,GAAK,IACPiC,EAAuBnK,EAAKG,MAA5BgK,oBAEP,GADAC,QAAQC,IAAI,cACRF,EAAqB,CACrB,IAAM1G,EAAQyE,EAAEC,OAAO1E,MAEvBzD,EAAKc,SAAS,CAACmJ,UAAWxG,GAAQ,gBAEhBrF,IAAVqF,GAAiC,KAAVA,EACvBzD,EAAKc,SAAS,CAACwJ,kBAAkB,IAGjC9O,IAAcC,KAAK,cAAe,CAAC6E,KAAMmD,IAAQ/H,KAAK,SAAC6O,GACnD,IAAIC,EAASxK,EAAKG,MAAM4I,WACpBhB,EAAUtB,YAAQ8D,EAASxO,MAE3ByO,EAAM,UADNzC,EACsB,GAEA,YAG1B/H,EAAKc,SAAS,CAACiI,WAAYyB,EAAQF,iBAAkBvC,aAMjE/H,EAAKc,SAAS,SAACgI,GAAD,MAAgB,CAACC,WAAWpL,OAAA8K,EAAA,EAAA9K,CAAA,GAAKmL,EAAUC,WAAhB,CAA4BkB,UAAa,yBAjY9DjK,EAyY5ByK,qBAAuB,SAAAvC,GACflI,EAAKG,MAAM4J,gBACX/J,EAAKc,SAAS,CAAC4J,aAAa,IAE5B1K,EAAK2K,aAAaf,eAAe,CAACC,SAAU,YA3YhD7J,EAAKG,MAAQ,CAETyK,YAAY,EACZlB,UAAU,EACVgB,aAAa,EACbT,UAAW,GACXE,qBAAqB,EAErBJ,iBAAiB,EACjBvB,WAAY,GACZqC,gBAAiB,GACjBnD,SAAU,GACVoD,oBAAoB,EAEpBzF,YAAa,GACbiF,kBAAkB,EAClBvB,WAAY,CAACkB,UAAW,IACxB1B,YAAa,GACbR,QAAS,IAGb/H,EAAK+K,oBAAsB,KAE3B/K,EAAKgL,aAAehL,EAAKgL,aAAazK,KAAlB5C,OAAA+E,EAAA,EAAA/E,CAAAqC,IACpBA,EAAKiL,gBAAkBjL,EAAKiL,gBAAgB1K,KAArB5C,OAAA+E,EAAA,EAAA/E,CAAAqC,IACvBA,EAAKkL,oBAAsBlL,EAAKkL,oBAAoB3K,KAAzB5C,OAAA+E,EAAA,EAAA/E,CAAAqC,IAC3BA,EAAKmL,kBAAoBnL,EAAKmL,kBAAkB5K,KAAvB5C,OAAA+E,EAAA,EAAA/E,CAAAqC,IA5BDA,0MA2CjBiK,EAAa/J,KAAKC,MAAlB8J,4BAGazO,IAAcC,KAAK,cAAe,CAAC6E,KAAM2J,WAArDtO,SAGC8K,YAAQ9K,EAAII,QAEbqP,cAAclL,KAAK6K,qBACnB7K,KAAK6K,oBAAsB,KAC3B7K,KAAK+K,kBACL/K,KAAK1C,MAAM6N,QAAQC,KAAK,+DAK5BC,KAAMnP,MAAN,0BAAAgK,OAAAoF,EAAAC,IAA2C,CACvCC,WAAW,sJAuIR,IAAAC,EAEsCzL,KAAKC,MAA/CmK,EAFIqB,EAEJrB,iBAAkBjF,EAFdsG,EAEctG,YAAa0C,EAF3B4D,EAE2B5D,QAClC6D,GAAO,EAENtB,IACDsB,GAAO,GAES,KAAhBvG,IACAuG,GAAO,GAKX,QAAAC,EAAA,EAAAC,EAA2BnO,OAAOoO,QAAQhE,GAA1C8D,EAAAC,EAAAhI,OAAA+H,IAAoD,KAAAG,EAAAF,EAAAD,GAAAI,EAAAtO,OAAAuO,EAAA,EAAAvO,CAAAqO,EAAA,GAAxCjF,EAAwCkF,EAAA,GAAnCxI,EAAmCwI,EAAA,GAChD,IAAKlF,IAAQtD,EAAO,CAChBmI,GAAO,EACP,OAIR,OAAOA,4CAOP1L,KAAKY,SAAS,SAACX,EAAO3C,GAClB,MAAO,CAACsN,oBAAqB3K,EAAM2K,oEAQvC5K,KAAK+K,kBAE4B,OAA7B/K,KAAK6K,oBACL7K,KAAK6K,oBAAsBoB,YAAYjM,KAAKiL,kBAAmBiB,MAE/DhC,QAAQhO,MAAM,qGASlB8D,KAAKY,SAAS,SAACX,EAAO3C,GAClB,MAAO,CAACsN,oBAAoB,KAEhCM,cAAclL,KAAK6K,kGAQJ7C,kGACfA,EAAEuB,mBAGgCvJ,KAAKC,MAAhCqI,eAAYnD,gBACZrJ,EAAakE,KAAK1C,MAAlBxB,WAGHkE,KAAKmM,wCAEejO,IAAhBiH,GAA6C,KAAhBA,2BAELjH,KADlBuH,EAAkBb,YAAe9I,EAAWqJ,qBAIxCiH,EAAW3G,EAAgBE,QAI7B0G,EAAuB,2BAGfxF,0BAAKtD,OAEb,GAAY,UAARsD,EAEA,OADAwF,EAAqBxF,GAAOtD,EAC5B,WAEJ,IAAM+I,EAAkBF,EAASG,KAAK,SAACC,EAAK1G,EAAK2G,GAE7C,OAAQ5F,IAAQ2F,EAAItF,OAEpBoF,IAGI/I,IADiB+I,EAAdjD,aAGHgD,EAAqBxF,GAAOtD,WAfb9F,OAAOoO,QAAQvD,wJAsBtCzM,EAAO,CACP6Q,WAAYL,EAEZjM,KAAMJ,KAAKC,MAAM8J,UACjBrO,KAAMsE,KAAKC,MAAMkF,aAKrBnF,KAAKgL,gCAEqBhL,KAAK1C,MAAMqP,MAAMC,OAAhCzH,8CAIG7J,IAAcC,KAAK,iBAAkBM,WAC3CwP,KAAMwB,KAAK,2DAELvR,IAAcC,KAAK,gBAAiBM,WAC1CwP,KAAMwB,KAAK,6EAIfxB,KAAMnP,MAAN,0BAAAgK,OAAA4G,EAAAvB,IAA6C,CACzCC,WAAW,IAEfxL,KAAK+M,qDAMZ/M,KAAKC,MAAMuJ,UACZxJ,KAAKsJ,iBAGLtJ,KAAKC,MAAM4J,kBAAoB7J,KAAKC,MAAMuK,aAC1CxK,KAAKuK,uBAETc,KAAM2B,KAAN,sCAAkD,CAC9CxB,WAAW,8JAiEH,IAAArK,EAAAnB,KACTmF,EAAenF,KAAK1C,MAAMqP,MAAMC,OAAhCzH,cAIFnF,KAAK1C,MAAMxB,WAAakE,KAAK1C,MAAMxB,UAAU8H,OAAS,IACvD5D,KAAK1C,MAAMrC,eAEXkK,IAEAnF,KAAKY,SAAS,CAACmJ,UAAW5E,EAAaiF,kBAAkB,EAAMH,qBAAqB,IACpF3O,IAAcC,KAAK,aAAc,CAAC6E,KAAM+E,IAAc3J,KAClD,SAACC,GACGyO,QAAQC,IAAI1O,GACZ0F,EAAK2H,qBAAgB5K,EAAW,CAAC+K,SAAUxN,EAAII,KAAKH,OAEpDyF,EAAKP,SAAS,SAACgI,GAAD,MAAgB,CAC1BN,WAAW7K,OAAA8K,EAAA,EAAA9K,CAAA,GAAKmL,EAAUN,WAAe7M,EAAII,2DAa7DqP,cAAclL,KAAK6K,qBACnB7K,KAAK6K,oBAAsB,sCAGtB,IAAAoC,EAAAjN,KAAAkN,EACkGlN,KAAKC,MAArGyK,EADFwC,EACExC,WAAYlB,EADd0D,EACc1D,SAAUgB,EADxB0C,EACwB1C,YAAarF,EADrC+H,EACqC/H,YAAa0E,EADlDqD,EACkDrD,gBAAiBE,EADnEmD,EACmEnD,UAAWK,EAD9E8C,EAC8E9C,iBAC5EtO,EAAakE,KAAK1C,MAAlBxB,UAEP,OACI2F,EAAAxE,EAAAU,cAAA,OAAKkF,YAAU,qBACXpB,EAAAxE,EAAAU,cAAA,2HAEA8D,EAAAxE,EAAAU,cAACwP,EAAA,EAAD,CAAMC,SAAUpN,KAAK8K,cACjBrJ,EAAAxE,EAAAU,cAAC0P,EAAA,EAAD,KACI5L,EAAAxE,EAAAU,cAACN,EAAA,EAAD,KACIoE,EAAAxE,EAAAU,cAAA,UACI8D,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,OAAO7C,KAAK,aAAa8C,QAASlD,KAAKuC,OAC7CR,MAAO,CAACuL,aAAc,SAAS7L,EAAAxE,EAAAU,cAAA,yBADvC,oBAKR8D,EAAAxE,EAAAU,cAACuE,EAAD,CAAU1D,OAAQkM,GAEdjJ,EAAAxE,EAAAU,cAAC4P,EAAA,EAAD,KACI9L,EAAAxE,EAAAU,cAAC8J,GAAD,CAAaE,MAAM,0CACNtC,cAAerF,KAAKgK,WAAYzG,MAAOwG,EACvCjF,YAAa,eAAgB1E,KAAK,OAAOmH,GAAG,YAC5CM,QAASuC,IAEtB3I,EAAAxE,EAAAU,cAACmJ,EAAA,EAAD,CAAWC,KAAG,GACVtF,EAAAxE,EAAAU,cAACqJ,EAAA,EAAD,CAAOC,IAAI,YAAYE,GAAI,GAA3B,UACA1F,EAAAxE,EAAAU,cAACyJ,EAAA,EAAD,CAAKD,GAAI,GACL1F,EAAAxE,EAAAU,cAAC6P,GAAD,CAAqBhJ,YAAa1I,EAAWyH,MAAO4B,EAC/BT,SAAU1E,KAAK8I,oBAG5CrH,EAAAxE,EAAAU,cAACmJ,EAAA,EAAD,CAAWC,KAAG,GACVtF,EAAAxE,EAAAU,cAACyJ,EAAA,EAAD,CAAKD,GAAI,GACL1F,EAAAxE,EAAAU,cAACqJ,EAAA,EAAD,CAAOC,IAAI,kBAAX,0BAA2D,IAC3DxF,EAAAxE,EAAAU,cAAA,KAAG8P,KAAK,8CAAR,oBAKZhM,EAAAxE,EAAAU,cAAC+P,EAAA,EAAD,KACIjM,EAAAxE,EAAAU,cAAA,OAAKX,UAAU,YACXyE,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,UAAUjG,UAAU,cAAckG,QAASlD,KAAKsJ,gBAAgB7H,EAAAxE,EAAAU,cAAA,KAC1EX,UAAU,4BAM9ByE,EAAAxE,EAAAU,cAAC0P,EAAA,EAAD,KAEI5L,EAAAxE,EAAAU,cAAA,OAAKqE,IAAK,SAAC2L,GAAD,OAAQV,EAAKxD,cAAgBkE,KACvClM,EAAAxE,EAAAU,cAACN,EAAA,EAAD,KACIoE,EAAAxE,EAAAU,cAAA,UACI8D,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,OAAO7C,KAAK,WAAW8C,QAASlD,KAAKuC,OAC3CR,MAAO,CAACuL,aAAc,SAAS7L,EAAAxE,EAAAU,cAAA,yBADvC,kBAKR8D,EAAAxE,EAAAU,cAACuE,EAAD,CAAU1D,OAAQgL,GAEd/H,EAAAxE,EAAAU,cAAC4P,EAAA,EAAD,KACI9L,EAAAxE,EAAAU,cAACuH,GAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAerF,KAAKmI,kBACpB3C,UAAWxF,KAAKC,MAAM4I,WACtBtD,WAAYvF,KAAKC,MAAM4H,QACvBvC,cAAetF,KAAKC,MAAMqI,WAAYhF,OAAQxH,KAEnE2F,EAAAxE,EAAAU,cAAC+P,EAAA,EAAD,KACIjM,EAAAxE,EAAAU,cAAA,OAAKX,UAAU,YACXyE,EAAAxE,EAAAU,cAAA,OAAKX,UAAU,eACXyE,EAAAxE,EAAAU,cAAC0J,EAAA,EAAD,CAAO3L,KAAK,WAAW6H,MAAOsG,EACvBnF,SAAU1E,KAAK4J,sBAAsBnI,EAAAxE,EAAAU,cAAA,QAAMX,UAAU,QAAhB,yBAC5CyE,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASlD,KAAKuK,sBAAsB9I,EAAAxE,EAAAU,cAAA,KACxDX,UAAU,6BAQlCyE,EAAAxE,EAAAU,cAAC0P,EAAA,EAAD,KACI5L,EAAAxE,EAAAU,cAACN,EAAA,EAAD,KACIoE,EAAAxE,EAAAU,cAAA,UACI8D,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,OAAO7C,KAAK,cAAc8C,QAASlD,KAAKuC,OAC9CR,MAAO,CAACuL,aAAc,SAAS7L,EAAAxE,EAAAU,cAAA,yBADvC,0BAOR8D,EAAAxE,EAAAU,cAACuE,EAAD,CAAU1D,OAAQgM,GAEd/I,EAAAxE,EAAAU,cAAC4P,EAAA,EAAD,KACI9L,EAAAxE,EAAAU,cAACuH,GAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAerF,KAAKmI,kBACpB3C,UAAWxF,KAAKC,MAAM4I,WACtBtD,WAAYvF,KAAKC,MAAM4H,QACvBvC,cAAetF,KAAKC,MAAMqI,WAAYhF,OAAQxH,OAK3E2F,EAAAxE,EAAAU,cAAA,OAAKX,UAAU,WAAWgF,IAAK,SAAC2L,GAC5BV,EAAKxC,aAAekD,IAEpBlM,EAAAxE,EAAAU,cAAA,OAAKX,UAAU,oBACXyE,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,OAAOvH,KAAK,QAAQwH,QAAS,kBAAM+J,EAAKnD,cAAtD,SACArI,EAAAxE,EAAAU,cAACqF,EAAA,EAAD,CAAQC,MAAM,UAAUvH,KAAK,UAA7B,oBAKZ+F,EAAAxE,EAAAU,cAACiQ,EAAD,CAAmBlL,UAAW1C,KAAKC,MAAM2K,mBAAoBnI,WAAYzC,KAAK+K,0BA5iBvE5H,IAAMC,WA+jB7B0E,GAASlK,aAAe,CACpBiQ,QAAQ,GAGGC,uBAlBS,SAAA7N,GAAK,MAAK,CAI9BnE,UAAWmE,EAAMqD,OAAOxH,YAcY,CAACb,mBAA1B6S,CAAyChG","file":"static/js/19.30e82399.chunk.js","sourcesContent":["import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(\"/config/providers\").then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(\"/config/dump\").then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread({}, childProps.style, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        A page will open for you with the authentication for your drive. This modal will automatically\n                        dismiss upon successful creation\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                        {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {findFromConfig, isEmpty, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(\"/config/get\", {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post('/config/create', data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(\"config/update\", data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        console.log(\"changeName\");\n        if (driveNameIsEditable) {\n            const value = e.target.value;\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post('/config/get', {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(\"config/get\", {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                    parameters as is.</p>\n                <Form onSubmit={this.handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote Config</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colRconfig}>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                            </CardBody>\n\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                        className=\"fa fa-check fa-lg \"/></Button>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        {/*div for Scrolling to here*/}\n                        <div ref={(el) => this.setupDriveDiv = el}/>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colSetup}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n\n                                    </div>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                    (optional)</Button>\n\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colAdvanced}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                    <div className=\"clearfix\" ref={(el) => {\n                        this.configEndDiv = el\n                    }}>\n                        <div className=\"float-right mb-3\">\n                            <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                            <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                        </div>\n                    </div>\n                </Form>\n                <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}