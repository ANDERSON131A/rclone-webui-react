{"version":3,"sources":["_nav.js","routes.js","containers/DefaultLayout/DefaultLayout.js"],"names":["_nav","items","name","url","icon","MyDashboard","React","lazy","Promise","all","__webpack_require__","e","then","bind","Home","ShowConfig","RemoteExplorerLayout","routes","path","exact","component","DefaultAside","DefaultFooter","DefaultHeader","DefaultLayout","loading","react_default","a","createElement","className","localStorage","getItem","USER_NAME_KEY","PASSWORD_KEY","this","props","history","push","_this2","data-test","ErrorBoundary","es","fixed","react","fallback","onLogout","signOut","display","Object","assign","navConfig","navigation","appRoutes","Container","fluid","react_router","map","route","idx","key","render","from","to","Component","connect","state","isConnected","status"],"mappings":"wLAAeA,EAAA,CACXC,MAAO,CACH,CACIC,KAAM,YACNC,IAAK,aACLC,KAAM,oBAEV,CACIF,KAAM,UACNC,IAAK,cACLC,KAAM,aAEV,CACIF,KAAM,WACNC,IAAK,kBACLC,KAAM,uBAEV,CACIF,KAAM,UACNC,IAAK,iBACLC,KAAM,aAEV,CACIF,KAAM,UACNC,IAAK,SACLC,KAAM,iBCvBZC,EAAcC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAC/BC,EAAOR,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aACxBE,EAAaT,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAC9BG,EAAuBV,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAmB/BI,EAbA,CACX,CAACC,KAAM,IAAKC,OAAO,EAAMjB,KAAM,QAC/B,CAACgB,KAAM,8BAA+BhB,KAAM,YAAakB,UAAWf,GACpE,CAACa,KAAM,YAAaC,OAAO,EAAMjB,KAAM,YAAakB,UAAWf,GAC/D,CAACa,KAAM,SAAUC,OAAO,EAAMjB,KAAM,YAAakB,UATvCd,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAU3B,CAACK,KAAM,aAAchB,KAAM,YAAakB,UAAWN,GACnD,CAACI,KAAM,cAAehB,KAAM,UAAWkB,UAAWL,GAClD,CAACG,KAAM,0CAA2CC,OAAO,EAAMjB,KAAM,WAAYkB,UAAWJ,GAC5F,CAACE,KAAM,kBAAmBhB,KAAM,WAAYkB,UAAWJ,GACvD,CAACE,KAAM,iBAAkBhB,KAAM,iBAAkBkB,UAb7Bd,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,yCCiBnCQ,EAAef,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAChCS,EAAgBhB,IAAMC,KAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aACjCU,EAAgBjB,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAEjCW,6MAEFC,QAAU,kBAAMC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAAf,mGAIPC,aAAaC,QAAQC,MAAmBF,aAAaC,QAAQE,MAC9DC,KAAKC,MAAMC,QAAQC,KAAK,2CAIvB,IAAAC,EAAAJ,KAEL,OAGIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMU,YAAU,iBAC3Bb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,OAAK,GACZhB,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,SAAUV,KAAKT,WACrBC,EAAAC,EAAAC,cAACL,EAAD,CAAesB,SAAU,SAAAlC,GAAC,OAAI2B,EAAKQ,QAAQnC,QAGnDe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,OAAK,EAACK,QAAQ,MACtBrB,EAAAC,EAAAC,cAACa,EAAA,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAA,EAAD,MACAf,EAAAC,EAAAC,cAACe,EAAA,SAAD,KACIjB,EAAAC,EAAAC,cAACa,EAAA,EAADO,OAAAC,OAAA,CAAeC,UAAWC,GAAgBjB,KAAKC,SAEnDT,EAAAC,EAAAC,cAACa,EAAA,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAA,EAAD,OAEJf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAeW,UAAWnC,IAC1BS,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAWC,OAAK,GACZ5B,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,SAAUV,KAAKT,WACrBC,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KAEQtC,EAAOuC,IAAI,SAACC,EAAOC,GACf,OAAOD,EAAMrC,UACTM,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACII,IAAKD,EACLxC,KAAMuC,EAAMvC,KACZC,MAAOsC,EAAMtC,MACbjB,KAAMuD,EAAMvD,KACZ0D,OAAQ,SAAAzB,GAAK,OACTT,EAAAC,EAAAC,cAAC6B,EAAMrC,UAAce,MAE5B,OAGbT,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUM,KAAK,IAAIC,GAAG,eAKtCpC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAUC,OAAK,GACXhB,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,SAAUV,KAAKT,WACrBC,EAAAC,EAAAC,cAACP,EAAD,SAIZK,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,SAAUV,KAAKT,WACrBC,EAAAC,EAAAC,cAACN,EAAD,iBAjEAyC,aA8EbC,sBAJS,SAACC,GAAD,MAAY,CAChCC,YAAaD,EAAME,OAAOD,cAGU,GAAzBF,CAA6BxC","file":"static/js/22.0254ba32.chunk.js","sourcesContent":["export default {\n    items: [\n        {\n            name: 'Dashboard',\n            url: '/dashboard',\n            icon: 'icon-speedometer'\n        },\n        {\n            name: 'Configs',\n            url: '/showconfig',\n            icon: 'icon-note'\n        },\n        {\n            name: 'Explorer',\n            url: '/remoteExplorer',\n            icon: 'icon-screen-desktop'\n        },\n        {\n            name: 'Backend',\n            url: '/rcloneBackend',\n            icon: 'icon-star',\n        },\n        {\n            name: 'Log Out',\n            url: '/login',\n            icon: 'icon-logout',\n        },\n\n    ],\n};\n","import React from 'react';\n\nconst MyDashboard = React.lazy(() => import('./views/RemoteManagement/NewDrive'));\nconst Home = React.lazy(() => import('./views/Home'));\nconst ShowConfig = React.lazy(() => import('./views/RemoteManagement/ShowConfig'));\nconst RemoteExplorerLayout = React.lazy(() => import(\"./views/Explorer/RemoteExplorerLayout\"));\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\nconst RCloneDashboard = React.lazy(() => import(\"./views/RCloneDashboard\"));\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\n// Define the routes as required\nconst routes = [\n    {path: '/', exact: true, name: 'Home'},\n    {path: '/newdrive/edit/:drivePrefix', name: 'New Drive', component: MyDashboard},\n    {path: '/newdrive', exact: true, name: 'New Drive', component: MyDashboard},\n    {path: '/login', exact: true, name: 'New Drive', component: Login},\n    {path: '/dashboard', name: 'Dashboard', component: Home},\n    {path: '/showconfig', name: 'Configs', component: ShowConfig},\n    {path: '/remoteExplorer/:remoteName/:remotePath', exact: true, name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/remoteExplorer', name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/rcloneBackend', name: 'Rclone Backend', component: RCloneDashboard},\n\n];\n\nexport default routes;\n","import React, {Component, Suspense} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Container} from 'reactstrap';\n\nimport {\n    AppAside,\n    AppBreadcrumb,\n    AppFooter,\n    AppHeader,\n    AppSidebar,\n    AppSidebarFooter,\n    AppSidebarForm,\n    AppSidebarHeader,\n    AppSidebarMinimizer,\n    AppSidebarNav,\n} from '@coreui/react';\n// sidebar nav config\nimport navigation from '../../_nav';\n// routes config\nimport routes from '../../routes';\nimport {connect} from \"react-redux\";\nimport {PASSWORD_KEY, USER_NAME_KEY} from \"../../utils/Constants\";\nimport ErrorBoundary from \"../../ErrorHandling/ErrorBoundary\";\n\nconst DefaultAside = React.lazy(() => import('./DefaultAside'));\nconst DefaultFooter = React.lazy(() => import('./DefaultFooter'));\nconst DefaultHeader = React.lazy(() => import('./DefaultHeader'));\n\nclass DefaultLayout extends Component {\n\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n\n    componentWillMount() {\n        if (!localStorage.getItem(USER_NAME_KEY) || !localStorage.getItem(PASSWORD_KEY)) {\n            this.props.history.push('/login');\n        }\n    }\n\n    render() {\n        // console.log(\"isConnected, default layout\", this.props.isConnected);\n        return (\n\n\n            <div className=\"app\" data-test=\"defaultLayout\">\n                <ErrorBoundary>\n                    <AppHeader fixed>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultHeader onLogout={e => this.signOut(e)}/>\n                        </Suspense>\n                    </AppHeader>\n                    <div className=\"app-body\">\n                        <AppSidebar fixed display=\"lg\">\n                            <AppSidebarHeader/>\n                            <AppSidebarForm/>\n                            <Suspense>\n                                <AppSidebarNav navConfig={navigation} {...this.props} />\n                            </Suspense>\n                            <AppSidebarFooter/>\n                            <AppSidebarMinimizer/>\n                        </AppSidebar>\n                        <main className=\"main\">\n                            <AppBreadcrumb appRoutes={routes}/>\n                            <Container fluid>\n                                <Suspense fallback={this.loading()}>\n                                    <Switch>\n                                        {\n                                            routes.map((route, idx) => {\n                                                return route.component ? (\n                                                    <Route\n                                                        key={idx}\n                                                        path={route.path}\n                                                        exact={route.exact}\n                                                        name={route.name}\n                                                        render={props => (\n                                                            <route.component {...props} />\n                                                        )}/>\n                                                ) : (null);\n                                            })\n                                        }\n                                        <Redirect from=\"/\" to=\"/login\"/>\n                                    </Switch>\n                                </Suspense>\n                            </Container>\n                        </main>\n                        <AppAside fixed>\n                            <Suspense fallback={this.loading()}>\n                                <DefaultAside/>\n                            </Suspense>\n                        </AppAside>\n                    </div>\n                    <AppFooter>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultFooter/>\n                        </Suspense>\n                    </AppFooter>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isConnected: state.status.isConnected,\n});\n\nexport default connect(mapStateToProps, {})(DefaultLayout);"],"sourceRoot":""}