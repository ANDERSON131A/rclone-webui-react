{"version":3,"sources":["utils/Tools.js","utils/API/API.js","../node_modules/reactstrap/es/Button.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["isEmpty","obj","Array","isArray","length","key","hasOwnProperty","bytesToKB","bytes","bytesToGB","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","config","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","IsDir","MimeType","searchQuery","toLowerCase","Name","startsWith","remoteName","axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","_async","console","post","abrupt","sent","stop","interceptors","request","use","Authorization","btoa","error","Promise","reject","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","n","prop_types__WEBPACK_IMPORTED_MODULE_5__","prop_types__WEBPACK_IMPORTED_MODULE_5___default","classnames__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_6___default","_utils__WEBPACK_IMPORTED_MODULE_7__","propTypes","active","bool","aria-label","string","block","color","disabled","outline","tag","innerRef","oneOfType","object","func","onClick","size","children","node","className","cssModule","close","Button","_React$Component","props","_this","call","this","bind","Object","_proto","prototype","e","preventDefault","render","_this$props","ariaLabel","Tag","attributes","createElement","aria-hidden","btnOutlineColor","classes","href","defaultAriaLabel","type","ref","Component","defaultProps","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","inverse","body","Card","CardBody","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","dispatch","then","res","GET_PROVIDERS","payload","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","REQUEST_ERROR","CardHeader","valid","tooltip","FormFeedback","validMode","_transitionStatusToCl","esm_objectSpread","react_transition_group","isOpen","prop_types_default","arrayOf","utils","navbar","appear","enter","exit","timeout","Collapse","transitionStatusToClassHash","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","Collapse_Collapse","_Component","state","height","forEach","esm_assertThisInitialized","inheritsLoose","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","_this2","otherProps","objectWithoutPropertiesLoose","transitionProps","childProps","react_default","esm_extends","in","collapseClass","getTransitionClass","classnames_default","style","react","es_Collapse","NewDriveAuthModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","assertThisInitialized","closeModal","isVisible","Modal","ModalHeader","data-test","ModalBody","ModalFooter","React","getSuggestions","value","inputValue","trim","inputLength","lang","Description","slice","getSuggestionValue","suggestion","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","inputProps","placeholder","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","Examples","examplesMap","inputType","IsPassword","Type","FormGroup","row","Label","for","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","DefaultStr","openSetupDrive","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsValid","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","validateForm","defaults","finalParameterValues","_i2","_Object$entries2","_loop","parameters","info","_context2","stopAuthentication","warn","_this$state3","Form","onSubmit","marginBottom","NewDrive_ProviderAutoSuggest","CardFooter","el","Base_NewDriveAuthModal_NewDriveAuthModal","connect"],"mappings":"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","file":"static/js/16.32fed5a5.chunk.js","sourcesContent":["/**\n * Returns whether the passed in object (obj) is empty or it contains some entries.\n * @param obj {$ObjMap} An object to check if it is empty: it can be an array or a map.\n * @returns {boolean}\n */\nexport function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n/**\n * Converts bytes into MB.\n * @param bytes {number} bytes to be converted.\n * @returns {number}\n */\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\n/**\n * Converts bytes to KB.\n * @param bytes {number} bytes to be converted\n * @returns {number}\n */\nexport function bytesToKB(bytes) {\n    if (bytes === 0) return 0;\n    const kb = bytes / 1024;\n\n    return kb;\n}\n\n/**\n * Converts bytes to GB.\n * @param bytes {number} bytes to be converted\n * @returns {number}\n */\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\n/**\n * Converts bytes per second to Megabytes per second.\n * @param bps {number} bytes per second.\n * @returns {number}\n */\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\n/**\n * Format bytes to a human readable format.\n * @param bytes {number} bytes to be formatted.\n * @param decimals {number} specifies the precision of numbers after the decimal point.\n * @returns {string}\n */\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Converts time in seconds to a minute and hour string of the format \"HH:MM:SS hrs\"\n * @param seconds {number} Number of seconds since 00:00:00\n * @returns {string}\n */\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\n/**\n * Converts seconds to a human readable string with support for year, day, week, minute, seconds.\n * @param seconds\n * @returns {string}\n */\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\n/**\n * Base validator takes in a regex exp and tests an input str against that regex.\n * @param regex\n * @param str\n * @returns {boolean | * | never}\n */\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n/**\n * Validate Size Suffix of the format (off | 1K | 1M | 100G | 10P ) etc\n * @param str {string} String to be validated\n * @returns {boolean|*|never}\n */\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\n/**\n * Validate integer without decimal points (0-9)\n * @param str {number|string} The string to be validated.\n * @returns {boolean|*|never}\n */\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\n/**\n * Validate duration hours, minutes, seconds, milliseconds etc.\n * @param str {number|string} The duration to be validated.\n * @returns {boolean|*|never}\n */\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\n/**\n * Opens the specified URL in a new tab and focus on it.\n * @param url {string} URL to be opened.\n */\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/**\n * Helper function for finding the provider with a given prefix.\n * @param config {$ObjMap} Array of remote configs\n * @param name {string} Specifies the name of the provider to find.\n * @returns {*}\n */\n\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\n\n/**\n * Helper function to add semicolon to the last.\n * Behaviour: if the passed in string does not have a semicolon at last, then insert it.\n * If there is a semicolon in the middle, skip insertion.\n * @param name\n * @returns {string}\n */\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\n/**\n * Allowed types for visibility Status modification in file explorer.\n * @type {{Pdf: string, Images: string}}\n */\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n/**\n * Function to filter the list of files based on the provided visibility status.\n * @param list {$ObjMap}\n * @param filter {string} Specifies the type of files to display eg: Images, Pdf etc.\n * @param checkList {$ObjMap} Provides mimeType matches for every string visibility operation eg: Images: \"image/jpeg\"\n * @returns {$ObjMap}\n */\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n/**\n * Function to filter the list of files based on the provided search query.\n * Uses linear search for filtering the relevant files.\n * @param list\n * @param searchQuery\n * @returns {*}\n */\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n/**\n * Checks whether the remoteName is local or not. Returns true if it is a remote local path, false otherwise.\n * Behaviour: if the name starts with \"/\" it is a local name.\n * @param remoteName {string} Name of the remote to check for.\n * @returns {boolean}\n */\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import axios from \"axios\";\nimport {isLocalRemoteName} from \"../Tools\";\n\n// Global level axios configuration. These settings are automatically used in other places by using an axiosInstance instead of axios directly\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n/**\n * Helper Method for moving a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\n/**\n * Helper Method for copying a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\n/**\n * Perform the actual copying/ moving of a file/directory.\n * @access private\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @param mode      {string}    Determines whether to copy or move. Allowed values: \"copy\", \"move\".\n * @returns         {Promise<AxiosResponse<T>>}\n */\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n\n    if (isLocalRemoteName(srcFs)) {\n        srcFs = \"\";\n    }\n\n    if (isLocalRemoteName(dstFs)) {\n        dstFs = \"\";\n    }\n\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n        console.log(\"DirOp:\", data);\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote,\n            _async: true\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  close: PropTypes.bool\n};\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        ariaLabel = _this$props['aria-label'],\n        block = _this$props.block,\n        className = _this$props.className,\n        close = _this$props.close,\n        cssModule = _this$props.cssModule,\n        color = _this$props.color,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"aria-label\", \"block\", \"className\", \"close\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n    if (close && typeof attributes.children === 'undefined') {\n      attributes.children = React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"\\xD7\");\n    }\n\n    var btnOutlineColor = \"btn\" + (outline ? '-outline' : '') + \"-\" + color;\n    var classes = mapToCssModules(classNames(className, {\n      close: close\n    }, close || 'btn', close || btnOutlineColor, size ? \"btn-\" + size : false, block ? 'btn-block' : false, {\n      active: active,\n      disabled: this.props.disabled\n    }), cssModule);\n\n    if (attributes.href && Tag === 'button') {\n      Tag = 'a';\n    }\n\n    var defaultAriaLabel = close ? 'Close' : null;\n    return React.createElement(Tag, _extends({\n      type: Tag === 'button' && attributes.onClick ? 'button' : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": ariaLabel || defaultAriaLabel\n    }));\n  };\n\n  return Button;\n}(React.Component);\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\nexport default Button;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, deprecated, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  block: deprecated(PropTypes.bool, 'Please use the props \"body\"'),\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      block = props.block,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"block\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, block || body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(\"/config/providers\").then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(\"/config/dump\").then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread({}, childProps.style, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        A page will open for you with the authentication for your drive. This modal will automatically\n                        dismiss upon successful creation\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                        {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {findFromConfig, isEmpty, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\n\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(\"/config/get\", {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n\n    };\n\n    // Update the driveType and then load the equivalent input parameters for that drive\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        if (Required && (!DefaultStr || DefaultStr === \"\"))\n                            isValid[Name] = false;\n                        else\n                            isValid[Name] = true;\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n\n\n\n\n    };\n\n    // Open second step of setting up the drive\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    // Decide whether to use advanced options\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, 1000);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            return (key === ele.Name);\n                        });\n\n                        const {DefaultStr} = defaultValueObj;\n                        if (value !== DefaultStr) {\n                            // console.log(`${value} !== ${DefaultStr}`);\n                            finalParameterValues[key] = value;\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        await axiosInstance.post('/config/create', data);\n                        toast.info(\"Config created\");\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n\n    changeName = e => {\n        const value = e.target.value;\n\n        this.setState({driveName: value}, () => {\n\n            if (value === undefined || value === \"\") {\n                this.setState({driveNameIsValid: false});\n            } else {\n\n                axiosInstance.post('/config/get', {name: value}).then((response) => {\n                    let errors = this.state.formErrors;\n                    let isValid = isEmpty(response.data);\n                    if (isValid) {\n                        errors[\"driveName\"] = \"\";\n                    } else {\n                        errors[\"driveName\"] = \"Duplicate\";\n\n                    }\n                    this.setState({formErrors: errors, driveNameIsValid: isValid});\n                });\n            }\n\n        });\n    };\n\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n\n    componentDidMount() {\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                    parameters as is.</p>\n                <Form onSubmit={this.handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote Config</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colRconfig}>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                            </CardBody>\n\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                        className=\"fa fa-check fa-lg \"/></Button>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        {/*div for Scrolling to here*/}\n                        <div ref={(el) => this.setupDriveDiv = el}/>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colSetup}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n\n                                    </div>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                    (optional)</Button>\n\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colAdvanced}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                    <div className=\"clearfix\" ref={(el) => {\n                        this.configEndDiv = el\n                    }}>\n                        <div className=\"float-right mb-3\">\n                            <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                            <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                        </div>\n                    </div>\n                </Form>\n                <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}