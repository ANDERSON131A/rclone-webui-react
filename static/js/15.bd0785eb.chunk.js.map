{"version":3,"sources":["utils/API/API.js","utils/Tools.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","length","_async","post","abrupt","sent","stop","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","bytesToMB","bytes","bytesToGB","formatBytes","decimals","arguments","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","MimeType","searchQuery","toLowerCase","startsWith","remoteName","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","inverse","bool","color","string","block","Object","body","outline","className","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","classes","createElement","ref","defaultProps","CardBody","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","dispatch","then","res","type","GET_PROVIDERS","payload","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","REQUEST_ERROR","CardHeader","children","prop_types_default","node","utils","valid","tooltip","FormFeedback_FormFeedback","objectWithoutPropertiesLoose","validMode","classnames_default","react_default","esm_extends","_transitionStatusToCl","es_FormFeedback","Collapse_propTypes","esm_objectSpread","react_transition_group","isOpen","arrayOf","navbar","Collapse_defaultProps","appear","enter","exit","timeout","Collapse","transitionStatusToClassHash","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","Collapse_Collapse","_Component","_this","call","this","state","height","forEach","bind","esm_assertThisInitialized","inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","childProps","in","collapseClass","getTransitionClass","style","react","es_Collapse","NewDriveAuthModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","assertThisInitialized","closeModal","isVisible","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","onClick","React","Component","getSuggestions","value","inputValue","trim","inputLength","lang","Description","slice","getSuggestionValue","suggestion","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","inputProps","placeholder","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","Examples","examplesMap","inputType","IsPassword","Type","FormGroup","row","Label","for","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","e","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","DefaultStr","openSetupDrive","preventDefault","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsValid","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","console","validateForm","defaults","finalParameterValues","_i2","_Object$entries2","_loop","parameters","info","_context2","stopAuthentication","warn","_this$state3","Form","onSubmit","marginBottom","NewDrive_ProviderAutoSuggest","href","CardFooter","el","Base_NewDriveAuthModal_NewDriveAuthModal","connect"],"mappings":"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","file":"static/js/15.bd0785eb.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote,\n            _async: true\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, deprecated, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  block: deprecated(PropTypes.bool, 'Please use the props \"body\"'),\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      block = props.block,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"block\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, block || body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(\"/config/providers\").then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(\"/config/dump\").then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread({}, childProps.style, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        A page will open for you with the authentication for your drive. This modal will automatically\n                        dismiss upon successful creation\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                        {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport isEmpty, {findFromConfig, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\n\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(\"/config/get\", {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n\n    };\n\n    // Update the driveType and then load the equivalent input parameters for that drive\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        if (Required && (!DefaultStr || DefaultStr === \"\"))\n                            isValid[Name] = false;\n                        else\n                            isValid[Name] = true;\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n\n\n\n\n    };\n\n    // Open second step of setting up the drive\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    // Decide whether to use advanced options\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, 1000);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            return (key === ele.Name);\n                        });\n\n                        const {DefaultStr} = defaultValueObj;\n                        if (value !== DefaultStr) {\n                            // console.log(`${value} !== ${DefaultStr}`);\n                            finalParameterValues[key] = value;\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        await axiosInstance.post('/config/create', data);\n                        toast.info(\"Config created\");\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n\n    changeName = e => {\n        const value = e.target.value;\n\n        this.setState({driveName: value}, () => {\n\n            if (value === undefined || value === \"\") {\n                this.setState({driveNameIsValid: false});\n            } else {\n\n                axiosInstance.post('/config/get', {name: value}).then((response) => {\n                    let errors = this.state.formErrors;\n                    let isValid = isEmpty(response.data);\n                    if (isValid) {\n                        errors[\"driveName\"] = \"\";\n                    } else {\n                        errors[\"driveName\"] = \"Duplicate\";\n\n                    }\n                    this.setState({formErrors: errors, driveNameIsValid: isValid});\n                });\n            }\n\n        });\n    };\n\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n\n    componentDidMount() {\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                    parameters as is.</p>\n                <Form onSubmit={this.handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote Config</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colRconfig}>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                            </CardBody>\n\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                        className=\"fa fa-check fa-lg \"/></Button>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        {/*div for Scrolling to here*/}\n                        <div ref={(el) => this.setupDriveDiv = el}/>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colSetup}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n\n                                    </div>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                    (optional)</Button>\n\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colAdvanced}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                    <div className=\"clearfix\" ref={(el) => {\n                        this.configEndDiv = el\n                    }}>\n                        <div className=\"float-right mb-3\">\n                            <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                            <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                        </div>\n                    </div>\n                </Form>\n                <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}