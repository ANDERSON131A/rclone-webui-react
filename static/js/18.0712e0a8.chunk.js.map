{"version":3,"sources":["utils/Tools.js","utils/API/API.js","views/Base/RunningJobs/RunningJobs.js","actions/statusActions.js","views/Base/BackendStatusCard/BackendStatusCard.js","views/Base/Widgets/BandwidthWidget.js","views/Base/BandwidthStatusCard/BandwidthStatusCard.js","views/Home/Home.js"],"names":["bytesToKB","bytes","bytesToGB","formatBytes","decimals","arguments","length","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","secondsToStr","seconds","numberEnding","number","years","days","hours","minutes","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","findFromConfig","config","name","find","ele","idx","array","Prefix","addColonAtLast","indexOf","__webpack_require__","d","__webpack_exports__","changeListVisibility","changeSearchFilter","isLocalRemoteName","isEmpty","obj","Array","isArray","key","hasOwnProperty","visibilityAssociation","Images","Pdf","list","filter","acceptType","item","IsDir","MimeType","searchQuery","toLowerCase","Name","startsWith","remoteName","axiosInstance","axios","create","baseURL","localStorage","getItem","headers","Content-Type","responseType","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","performCopyOrMoveFile","performCopyFile","_callee","mode","url","splitRes","data","_data","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","split","_async","console","post","abrupt","sent","stop","interceptors","request","use","Authorization","btoa","error","Promise","reject","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","_ref","job","eta","percentage","speed","speedAvg","size","isNaN","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","value","className","JobCardRow","_ref2","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","lg","GlobalStatus","_ref3","stats","checks","elapsedTime","deletes","errors","transfers","TransferringJobs","_ref4","transferring","map","TransferringJobsRow","_ref5","RunningJobs","props","context","_this","Object","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","toggleShowing","setState","prevState","isShowing","state","_this2","_this$props","jobs","isConnected","lineChartData","sm","react_chartjs_2__WEBPACK_IMPORTED_MODULE_15__","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_12__","color","React","Component","connect","ownProps","speedData","status","labels","data1","data2","dataLength","slice","forEach","push","ceil","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","getStatus","_home_travis_build_negative0_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","mark","dispatch","getState","_getState","checkStatus","then","res","type","FETCH_STATUS","REQUEST_SUCCESS","payload","REQUEST_ERROR","_x","_x2","apply","enableCheckStatus","shouldEnable","_callee2","_context2","ENABLE_STATUS_CHECK","_x3","getBandwidth","_callee3","_context3","GET_BANDWIDTH","_x4","setBandwidth","newRate","_callee4","_context4","rate","SET_BANDWIDTH","_x5","TaskModal","ReactDOM","createPortal","_RunningJobs__WEBPACK_IMPORTED_MODULE_11__","document","getElementById","BackendStatusCard","toggleCheckStatus","refreshInterval","setInterval","clearInterval","_this$props2","ipAddress","username","StatusText","connectivityStatus","userName","defaultProps","isDisabled","BandwidthWidget","cssModule","header","icon","children","invert","attributes","objectWithoutProperties","progress","style","card","bgColor","classes","mapToCssModules","classNames","react_default","Card","assign","CardBody","Progress","BandwidthStatusCard","classCallCheck","possibleConstructorReturn","getPrototypeOf","_this$state","bandwidthText","hasError","toast","changeBandwidthInput","e","inputValue","target","validateInput","toggleShowChangeBandwidth","showChangeBandwidth","_this$state2","bandwidth","Row","Col","Widgets_BandwidthWidget","Button","CardHeader","Form","onSubmit","FormGroup","row","Label","for","Input","valid","invalid","id","onChange","FormFeedback","Home","data-test","_Base_BackendStatusCard_BackendStatusCard__WEBPACK_IMPORTED_MODULE_8__","global","_Base_BandwidthStatusCard_BandwidthStatusCard__WEBPACK_IMPORTED_MODULE_10__","_Base_RunningJobs__WEBPACK_IMPORTED_MODULE_9__"],"mappings":"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","file":"static/js/18.0712e0a8.chunk.js","sourcesContent":["export function isEmpty(obj) {\n    if (Array.isArray(obj)) return obj.length === 0;\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bytesToKB(bytes) {\n    if (bytes === 0) return 0;\n    const kb = bytes / 1024;\n\n    return kb;\n}\n\nexport function bytesToGB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'Just now'; //'just now' //or other string you like;\n}\n\nexport function baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^(off|(([0-9]+[.][0-9]+|[0-9]+)([KMGTP])))$/i;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\nconst visibilityAssociation = {\n    Images: \"image/jpeg\",\n    Pdf: \"application/pdf\",\n};\n\n\nexport function changeListVisibility(list, filter, checkList = visibilityAssociation) {\n    let acceptType = checkList[filter];\n    // console.log(list);\n    if (acceptType) {\n        let newList = list.filter((item) => {\n            return (item.IsDir || item.MimeType === acceptType);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\nexport function changeSearchFilter(list, searchQuery = \"\") {\n    searchQuery = searchQuery.toLowerCase();\n    if (searchQuery) {\n        let newList = list.filter((item) => {\n            return item.Name.toLowerCase().startsWith(searchQuery);\n        });\n        return newList;\n    }\n    return list;\n\n}\n\n\nexport function isLocalRemoteName(remoteName) {\n    return (remoteName && remoteName !== \"\" && remoteName[0] === \"/\");\n}","import axios from \"axios\";\nimport {isLocalRemoteName} from \"../Tools\";\n\n// Global level axios configuration. These settings are automatically used in other places by using an axiosInstance instead of axios directly\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n/**\n * Helper Method for moving a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\n/**\n * Helper Method for copying a file/directory.\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @returns         {Promise<*>}\n */\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\n/**\n * Perform the actual copying/ moving of a file/directory.\n * @access private\n * @param srcFs     {string}    remoteName of the source\n * @param srcRemote {string}    remotePath of the source\n * @param dstFs     {string}    remoteName of the destination\n * @param dstRemote {string}    remotePath of the destination\n * @param Name      {string}    name of the file/directory\n * @param IsDir     {boolean}   Determines whether the current path is a directory (true) or a file (false)\n * @param mode      {string}    Determines whether to copy or move. Allowed values: \"copy\", \"move\".\n * @returns         {Promise<AxiosResponse<T>>}\n */\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n\n    if (isLocalRemoteName(srcFs)) {\n        srcFs = \"\";\n    }\n\n    if (isLocalRemoteName(dstFs)) {\n        dstFs = \"\";\n    }\n\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1],\n            _async: true\n        };\n        console.log(\"DirOp:\", data);\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote,\n            _async: true\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n","import React from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Progress, Row} from \"reactstrap\";\nimport {bytesToKB, formatBytes, secondsToStr} from \"../../../utils/Tools\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {Line} from \"react-chartjs-2\";\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\n\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }],\n        xAxes: [{\n            ticks: {\n                display: false\n            }\n        }]\n    }\n};\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    if (name && !isNaN(speed)) {\n\n        return (<Card>\n            <CardHeader>Running Jobs</CardHeader>\n            <CardBody>\n                <p>{name}</p> {/*Name of the file*/}\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\n                <p><strong>ETA: </strong>{secondsToStr(eta)} seconds</p>\n            </CardBody>\n\n        </Card>);\n    }\n    return null;\n}\n\nfunction JobCardRow({job}) {\n    const {name, percentage, speed, size} = job;\n    return (\n        <React.Fragment>\n            <Row>\n                {(size && speed) ? (<Col lg={12}>{name}({formatBytes(size)}) - {formatBytes(speed)}PS </Col>) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <p><strong>Bytes Transferred: </strong>{formatBytes(bytes)}</p>\n                <p><strong>Average Speed: </strong>{formatBytes(speed)}PS</p>\n                <p><strong>Checks: </strong>{checks}</p>\n                <p><strong>Deletes: </strong>{deletes}</p>\n                <p><strong>Running since: </strong>{secondsToStr(elapsedTime)}</p>\n                <p><strong>Errors: </strong>{errors}</p>\n                <p><strong>Transfers: </strong>{transfers}</p>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n\n}\n\nfunction TransferringJobs({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCardRow key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isShowing: true\n        }\n    }\n\n    toggleShowing = () => {\n        this.setState((prevState) => {\n            return {\n                isShowing: !prevState.isShowing\n            }\n        })\n    };\n\n\n\n    render() {\n        const {jobs, isConnected, lineChartData} = this.props;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={4}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n\n                        <Col sm={12} lg={4}>\n                            <Card>\n                                <CardHeader>\n                                    Speed\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-wrapper\">\n                                        <Line data={lineChartData} options={options}/>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className=\"progress-modal d-none d-sm-block\">\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\n                            <div className=\"card-header-actions\">\n                                <Button color=\"link\">\n                                    <i className=\"fa fa-close fa-lg\"/>\n                                </Button>\n                            </div>\n                        </CardHeader>\n                        <CardBody className={!this.state.isShowing && \"d-none\"}>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n    }\n}\n\nRunningJobs.propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    jobs: PropTypes.object.isRequired,\n    error: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const speedData = state.status.speed;\n    let lineChartData = {};\n    if (speedData) {\n        let labels = [];\n        let data1 = [];\n        let data2 = [];\n\n        const dataLength = speedData.length;\n        //\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\n        // console.log(limitedData.length);\n        limitedData.forEach((item, idx) => {\n            labels.push(Math.ceil(item.elapsedTime));\n            data1.push(bytesToKB(item.speed).toFixed(2));\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\n        });\n\n        // console.log(data1, data2);\n        lineChartData = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Speed (kbps)',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data1,\n                },\n                {\n                    label: 'Average Speed (kbps)',\n                    fill: true,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(187,69,14,0.4)',\n                    borderColor: 'rgb(192,76,58)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgb(187,69,14)',\n                    pointBackgroundColor: '#ff7459',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data2,\n                }\n            ],\n        };\n    }\n\n\n    return {\n        jobs: state.status.jobs,\n        isConnected: state.status.isConnected,\n        error: state.status.error,\n        lineChartData\n    }\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n","import axiosInstance from \"../utils/API/API\";\nimport {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\n\n\nexport const getStatus = () => async (dispatch, getState) => {\n    // console.log(\"get Status\");\n    const {status} = getState();\n    if (status.checkStatus) {\n        axiosInstance.post('core/stats').then(res => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_SUCCESS,\n            payload: res.data\n        }), error => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n    }\n};\n\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\n    dispatch({\n        type: ENABLE_STATUS_CHECK,\n        payload: shouldEnable\n    })\n};\n\n\nexport const getBandwidth = () => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post('core/bwlimit').then(res => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n\nexport const setBandwidth = (newRate) => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post('core/bwlimit', {rate: newRate}).then(res => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\n\n\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(\"modal-root\"));\n}\n\nclass BackendStatusCard extends React.Component {\n\n\n    componentWillMount() {\n\n        // Check if the connection to the backend is active\n        this.props.getStatus();\n        this.refreshInterval = setInterval(() => this.props.getStatus(), 5000);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    toggleCheckStatus = () => {\n        const {checkStatus, enableCheckStatus} = this.props;\n        console.log(checkStatus, enableCheckStatus);\n        enableCheckStatus(!checkStatus);\n    };\n\n    render() {\n        const {isConnected, mode, checkStatus} = this.props;\n\n        const ipAddress = localStorage.getItem('ipAddress');\n        const username = localStorage.getItem(\"username\");\n\n\n        if (mode === \"card\")\n            return (\n\n                <Card\n                      className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        rclone status\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\n                                    userName={username}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            );\n    }\n}\n\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\n    if (!checkStatus) {\n        return <p>Not monitoring connectivity status. Tap the icon in navbar to start.</p>\n    }\n    if (connectivityStatus) {\n        return (\n            <p>The rclone backend is connected and working as expected.<br/>Current IP address is {ipAddress}\n                <br/><strong> Username: </strong>{userName}</p>\n        );\n    } else {\n        return (\n            <p>Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.</p>\n\n        )\n    }\n}\n\nconst propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    checkStatus: PropTypes.bool.isRequired,\n    enableCheckStatus: PropTypes.func.isRequired,\n    getStatus: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    isDisabled: state.status.isDisabled,\n    checkStatus: state.status.checkStatus\n});\n\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, CardBody, Progress} from 'reactstrap';\nimport classNames from 'classnames';\nimport {mapToCssModules} from 'reactstrap/lib/utils';\n\nconst propTypes = {\n    header: PropTypes.string,\n    icon: PropTypes.string,\n    color: PropTypes.string,\n    value: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    invert: PropTypes.bool,\n};\n\nconst defaultProps = {\n    header: '87.500',\n    icon: 'icon-people',\n    color: 'info',\n    value: '25',\n    children: 'Visitors',\n    invert: false,\n};\n\nclass BandwidthWidget extends Component {\n    render() {\n        const {className, cssModule, header, icon, color, value, children, invert, ...attributes} = this.props;\n\n        // demo purposes only\n        const progress = {style: '', color: color, value: value};\n        const card = {style: '', bgColor: '', icon: icon};\n\n        if (invert) {\n            progress.style = 'progress-white';\n            progress.color = '';\n            card.style = 'text-white';\n            card.bgColor = 'bg-' + color;\n        }\n\n        const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\n        progress.style = classNames('progress-xs mt-3 mb-0', progress.style);\n\n        return (\n            <Card className={classes} {...attributes}>\n                <CardBody>\n                    <div className=\"h1 text-muted text-right mb-2\">\n                        <i className={card.icon}></i>\n                    </div>\n                    <div className=\"h4 mb-0\">{header}</div>\n                    <small className=\"text-muted text-uppercase font-weight-bold\">{children}</small>\n                    <Progress className={progress.style} color={progress.color} value={progress.value}/>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nBandwidthWidget.propTypes = propTypes;\nBandwidthWidget.defaultProps = defaultProps;\n\nexport default BandwidthWidget;","import React from \"react\";\nimport BandwidthWidget from \"../Widgets/BandwidthWidget\";\nimport {validateSizeSuffix} from \"../../../utils/Tools\";\nimport {toast} from \"react-toastify\";\nimport {Button, Card, CardBody, CardHeader, Col, Form, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\nimport {connect} from \"react-redux\";\nimport {getBandwidth, setBandwidth} from \"../../../actions/statusActions\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass BandwidthStatusCard extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            bandwidthText: \"\",\n            hasError: false,\n            showChangeBandwidth: false\n        };\n    }\n\n    getBandwidth = () => {\n        const {getBandwidth} = this.props;\n        getBandwidth();\n    };\n\n    setBandwidth = () => {\n        const {bandwidthText, hasError} = this.state;\n        console.log(bandwidthText, hasError);\n        if (bandwidthText && !hasError) {\n            const {setBandwidth} = this.props;\n            setBandwidth(bandwidthText);\n        } else {\n            toast.error(\"Error in form\");\n        }\n    };\n\n    changeBandwidthInput = (e) => {\n        const inputValue = e.target.value;\n        const validateInput = validateSizeSuffix(inputValue);\n        console.log(validateInput);\n        this.setState({\n            bandwidthText: inputValue,\n            hasError: !validateInput\n        })\n    };\n\n    componentDidMount() {\n        this.getBandwidth();\n    }\n\n\n    toggleShowChangeBandwidth = () => {\n        this.setState((prevState) => ({\n\n            showChangeBandwidth: !prevState.showChangeBandwidth\n        }))\n    }\n    render() {\n        const {bandwidthText, hasError, showChangeBandwidth} = this.state;\n        const {bandwidth} = this.props;\n\n        return (\n\n            <Row>\n                <Col lg={showChangeBandwidth ? 6 : 12} sm={12}>\n                    <BandwidthWidget icon=\"icon-speedometer\" color=\"danger\" header={bandwidth.rate} lg={6} sm={12}>\n                        Current bandwidth <Button color=\"link\" onClick={this.toggleShowChangeBandwidth}><i\n                        className=\"fa fa-lg fa-angle-right\"/></Button>\n                    </BandwidthWidget>\n                </Col>\n                <Col lg={6} sm={12} className={showChangeBandwidth ? \"\" : \"d-none\"}>\n                    <Card>\n                        <CardHeader>Change bandwidth</CardHeader>\n                        <CardBody>\n                            <Form onSubmit={this.setBandwidth}>\n                                <FormGroup row>\n\n\n                                    <Label for=\"bandwidthValue\" sm={5}>New Bandwidth</Label>\n                                    <Col sm={7}>\n                                        <Input type=\"text\" value={bandwidthText}\n                                               valid={!hasError} invalid={hasError}\n                                               id=\"bandwidthValue\" onChange={this.changeBandwidthInput}>\n                                        </Input>\n                                        <FormFeedback valid>Keep empty to reset.</FormFeedback>\n                                        <FormFeedback>The bandwidth should be of the form 1M|2M|1G|1K|1.1K\n                                            etc</FormFeedback>\n\n                                    </Col>\n\n\n                                </FormGroup>\n                                <Button className=\"float-right\" color=\"success\" type=\"submit\">Set</Button>\n\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n\n            </Row>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    bandwidth: state.status.bandwidth\n});\n\nBandwidthStatusCard.propTypes = {\n    getBandwidth: PropTypes.func.isRequired,\n    setBandwidth: PropTypes.func.isRequired,\n\n};\n\nexport default connect(mapStateToProps, {getBandwidth, setBandwidth})(BandwidthStatusCard)\n","import React from 'react';\nimport {Col, Row} from \"reactstrap\";\nimport BackendStatusCard from \"../Base/BackendStatusCard/BackendStatusCard\";\nimport RunningJobs from \"../Base/RunningJobs\";\nimport BandwidthStatusCard from \"../Base/BandwidthStatusCard/BandwidthStatusCard\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from 'prop-types';\n\nclass Home extends React.Component {\n\n\n    render() {\n        const {checkStatus} = this.props;\n        return (\n            <div data-test=\"homeComponent\">\n                <h2>Welcome to Rclone dashboard. </h2>\n                <p>Begin by creating a new remote config from the left sidebar.</p>\n\n\n                <Row>\n                    <Col lg={4} sm={12}>\n                        <BackendStatusCard ipAddress={global.ipAddress} mode={\"card\"}/>\n                    </Col>\n                    <Col lg={4} sm={12}>\n                        <BandwidthStatusCard/>\n                    </Col>\n                </Row>\n                <h2>Jobs</h2>\n                {checkStatus ? <RunningJobs mode={\"full-status\"}/> : <p>Not Monitoring</p>}\n\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    checkStatus: state.status.checkStatus\n});\n\nHome.propTypes = {\n    checkStatus: PropTypes.bool.isRequired\n};\n\nexport default connect(mapStateToProps, {})(Home);\n"],"sourceRoot":""}